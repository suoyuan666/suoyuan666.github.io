<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - Tag - 索元的博客</title>
        <link>http://localhost:1313/tags/linux/</link>
        <description>Linux - Tag - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Tue, 07 Jan 2025 10:00:36 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>Gentoo Linux 安全加固指南</title>
    <link>http://localhost:1313/posts/gentoo_hardened_guide/</link>
    <pubDate>Tue, 07 Jan 2025 10:00:36 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentoo_hardened_guide/</guid>
    <description><![CDATA[<h1 id="gentoo-linux-安全加固指南">Gentoo Linux 安全加固指南</h1>
<blockquote>
<ul>
<li>2025 年 1 月 8/9/10 号修改
<ul>
<li>添加了 VSCodium 的 bwrap 启动参数</li>
<li>修改了 sysctl 和内核启动参数部分</li>
<li>添加了 Chromium 的 bwrap 启动参数</li>
<li>添加了 NetworkManager 部分</li>
</ul>
</li>
<li>2025 年 1 月 13 号修改
<ul>
<li>修改了bwrap 中 FireFox 部分，让它可以响应 <code>xdg-open</code></li>
<li>添加了禁止核心转储 (core dump) 的段落</li>
<li>添加了面向安全的编译选项部分</li>
</ul>
</li>
<li>2025 年 1 月 19 号修改
<ul>
<li>添加了 NetworkManager 下开启 IPV6 隐私扩展的描述</li>
<li>修改了 编译选项 的部分</li>
</ul>
</li>
<li>2025 年 1 月 27/28 号修改
<ul>
<li>在 sysctl 和内核参数部分添加了更多的解释</li>
<li>修改了文章中部分语句不通，不好理解的地方</li>
</ul>
</li>
</ul>
</blockquote>
<p>我一直在寻求一个尽可能不影响日常使用的同时尽量做到安全的操作系统。</p>
<p>单论安全性，我认为 <a href="https://www.qubes-os.org/" target="_blank" rel="noopener noreffer ">Qubes OS</a> 很不错，但是网络配置看起来不是很容易，并且社区貌似不是很大。</p>
<p>Fedora Silverblue 也是个不错的选择，原子更新，桌面应用大多是从 Flatpak 安装，不过我对 Fedora 官方软件仓库没有我想要的软件这一情况一直有些介意，虽然有 COPR 源，但我不是特别想用。</p>
<p>NixOS 也是个选择，同样是不可变发行版，nixpkg 提供了很多软件包，包括 linux-hardened、hardened-malloc 等，NixOS 官方有一套 security profile，不过我还没尝试，印象中是使用了 linux-hardened 内核，启用了一些安全相关的 sysctl 设置，将内存分配器改成 scudo（好像还启用了 AppArmor？）</p>
<p>我目前认为 Gentoo Linux 是一个不错的选择，但由于 Gentoo Linux 编译真的很费时间，所以我放假回来才开始尝试一些我以前想过但没尝试的功能。</p>
<h2 id="硬盘加密">硬盘加密</h2>
<p>我现在认为硬盘加密是一个必须的选择。我选择了 Luks2 的 argon2id 算法，这导致我需要使用 systemd-boot，GRUB 对 Luks2 的支持有限。</p>
<p>在硬盘分区时，根据 <a href="https://wiki.gentoo.org/wiki/Rootfs_encryption" target="_blank" rel="noopener noreffer ">Rootfs_encryption</a>，直接执行：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha512 --iter-time <span class="m">5000</span> --key-size <span class="m">256</span> --pbkdf argon2id --use-urandom --verify-passphrase luksFormat /dev/block</span></span></code></pre></div></div>
<p>如何你想使用 GRUB 作为 bootloader（比如你有引导 windows 启动项的需求等），那就不能使用 luks2，应该选择用 luks 的算法。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cryptsetup luksOpen /dev/block root
</span></span><span class="line"><span class="cl">$ mkfs.xfs -L rootfs /dev/mapper/root
</span></span><span class="line"><span class="cl">$ mount --label rootfs /mnt/gentoo</span></span></code></pre></div></div>
<p>这样就可以将其格式化成 XFS 文件系统了，我没有使用 SWAP 分区，我选择了使用 ZRAM 做交换分区，不过加密的 SWAP 倒也是个选择，只是我没这么做。</p>
<p>之后你需要附加相关命令行参数用于解锁：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ lsblk -o name,uuid
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">NAME        UUID
</span></span><span class="line"><span class="cl">sdb                                           
</span></span><span class="line"><span class="cl">├─nvme0n1p1 BDF2-0139
</span></span><span class="line"><span class="cl">├─nvme0n1p2 b0e86bef-30f8-4e3b-ae35-3fa2c6ae705b
</span></span><span class="line"><span class="cl">└─nvme0n1p3 4bb45bd6-9ed9-44b3-b547-b411079f043b
</span></span><span class="line"><span class="cl">  └─root    cb070f9e-da0e-4bc5-825c-b01bb2707704</span></span></code></pre></div></div>
<p>假设输出是上面这样，那么应该在 <strong>/etc/dracut.conf.d/luks.conf</strong> 下写入：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">kernel_cmdline+=&#34; root=UUID=cb070f9e-da0e-4bc5-825c-b01bb2707704 rd.luks.uuid=4bb45bd6-9ed9-44b3-b547-b411079f043b &#34;</span></span></code></pre></div></div>
<h2 id="安全启动">安全启动</h2>
<p>安全启动是个耳熟能详的名词，我在刚接触到给自己的笔记本电脑安装 GNU/Linux 发行版的教程的时候，一般都会说明首先要在 BIOS 中关闭快速启动和安全启动，部分社区支持的发行版无法在开启安全启动的情况下安装（不过可以安装时/后开启安全启动的支持），商业公司支持的（如 Fedora，OpenSUSE，Deepin 等）发行版应该是都可以直接启动安装。</p>
<p>安全启动是 UEFI 下才有的安全验证机制，旨在确保引导的操作系统是可信的。</p>
<p>只需要在安装的过程中对照着手册，看到安全启动的部分就跟着手册来就行。</p>
<p>这里有一点，Shim 被硬编码为使用 grubx64.efi，但是由于我使用的 systemd-boot 作为 bootloader，没有 grubx64.efi，所以我选择了将 systemd-bootx64.efi 复制一个 grubx64.efi 出来。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cp /efi/EFI/systemd/systemd-bootx64.efi /efi/EFI/systemd/grubx64.efi</span></span></code></pre></div></div>
<h2 id="bwrap">bwrap</h2>
<p>沙盒程序就这两位我还算熟悉，<a href="https://github.com/netblue30/firejail" target="_blank" rel="noopener noreffer ">Firejail</a> 和 <a href="https://github.com/containers/bubblewrap" target="_blank" rel="noopener noreffer ">Bubblewrap</a>。前者有令人诟病的 setuid 安全隐患，后者没有 Firejail 那样有社区提供好的沙盒模板（即部分应用可以运行一个命令直接获得沙盒化，如 git，firefox 等）</p>
<p>我选择了 Bubblewrap（也就是标题中的 bwrap），目前只用到了浏览器和我的代码编辑器上，我目前的目标是，让使用的图形化软件基本都套一层 bwrap（除了终端模拟器）</p>
<p>对于到底应该 <code>--ro-bind</code> 什么文件，可以用 <code>strace -e openat</code> 看一下该程序到底尝试打开什么文件，然后决定到底要不要映射过去</p>
<h3 id="firefox">FireFox</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --symlink /usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    xdg-dbus-proxy <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    unix:path<span class="o">=</span>/var/run/user/<span class="nv">$UID</span>/bus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /run/user/<span class="nv">$UID</span>/.dbus-proxy/session-bus-proxy-6271 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --filter <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mpris.MediaPlayer2.firefox.*&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mozilla.firefox.*&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mozilla.firefox_beta.*&#34;</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /opt/bin /opt/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/egl /usr/share/egl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/nvidia /usr/share/nvidia <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/ca-certificates /usr/share/ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /run/user/<span class="nv">$UID</span>/bus /run/user/<span class="nv">$UID</span>/bus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/shm /dev/shm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia0 /dev/nvidia0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidiactl /dev/nvidiactl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia-uvm /dev/nvidia-uvm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia-modeset /dev/nvidia-modeset <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /sys /sys <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="nv">$HOME</span>/.config/dconf <span class="nv">$HOME</span>/.config/dconf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="nv">$HOME</span>/.config/user-dirs.dirs <span class="nv">$HOME</span>/.config/user-dirs.dirs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="nv">$HOME</span>/.mozilla <span class="nv">$HOME</span>/.mozilla <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv GTK_THEME Papirus:light <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv MOZ_ENABLE_WAYLAND <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv PATH /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --hostname RESTRICTED <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --die-with-parent <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  /usr/bin/firefox <span class="nv">$@</span></span></span></code></pre></div></div>
<p>Chromium 的编译时间实在太长了（虽然 FireFox 的也没差到哪去，开启了 LTO 和 PGO 之后编译时间感人），我又用回来了这位</p>
<p>由于我有了其他软件从系统默认浏览器打开链接的需求，所以就用 xdg-dbus-proxy 设置了相关服务，并且我 waybar 的 mpris 组件也能显示 FireFox 播放的媒体了。</p>
<p>我使用了 nvidia-vaapi-driver，所以设备上暴露了一些 nvidia 的，这个 /dev/nvidia-uvm 一开始是没有的，我运行了 <code>vainfo</code> 之后就会出现，所以现在有一个抽象的事情就是我会先在 foot 上执行一遍 vainfo，之后打开 FireFox。这套是可以用上 nvidia-vaapi-driver 的硬件视频解码的，如果 FireFox 能支持 nvenc 就更好了。</p>
<h3 id="vscodium">VSCodium</h3>
<p>vscodium 基本照搬的 下面的 Chromium 的配置</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/locale /usr/share/locale <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/zoneinfo /usr/share/zoneinfo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/verilator /usr/share/verilator <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/include /usr/include <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/chromium /etc/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/localtime /etc/localtime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /opt/vscodium/ /opt/vscodium/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/dev/char /sys/dev/char <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/devices/pci0000:00 /sys/devices/pci0000:00 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.config/VSCodium <span class="nv">$HOME</span>/.config/VSCodium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.vscode-oss <span class="nv">$HOME</span>/.vscode-oss <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Documents <span class="nv">$HOME</span>/Documents <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/codpjt <span class="nv">$HOME</span>/codpjt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/git_repo <span class="nv">$HOME</span>/git_repo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--setenv GTK_THEME Papirus:light <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--hostname RESTRICTED <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>/opt/vscodium/codium --ozone-platform<span class="o">=</span>wayland --use-gl<span class="o">=</span>angle --use-angle<span class="o">=</span>vulkan --enable-features<span class="o">=</span>AcceleratedVideoEncoder,AcceleratedVideoDecodeLinuxGL,VaapiOnNvidiaGPUs,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE --ignore-gpu-blocklist --disable-gpu-driver-bug-workaround --enable-wayland-ime</span></span></code></pre></div></div>
<h3 id="chromium">Chromium</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/chromium /etc/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/localtime /etc/localtime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/zoneinfo /usr/share/zoneinfo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/pixmaps /usr/share/pixmaps <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/locale /usr/share/locale <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/dev/char /sys/dev/char <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/devices/pci0000:00 /sys/devices/pci0000:00 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /run/dbus /run/dbus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pipewire-0&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pipewire-0&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="nv">$HOME</span>/.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.config/chromium <span class="nv">$HOME</span>/.config/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--die-with-parent <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>/usr/bin/chromium</span></span></code></pre></div></div>
<p>使用 FireFox 的时候还在用我的 NVIDIA 显卡驱动，由于 FireFox 官方并不支持 NVENC 视频解码（虽然可以通过安装 media-libs/nvidia-vaapi-driver 实现翻译）</p>
<p>由于使用 FireFox 打开部分网站速度不佳，我选择了 Chromium（由于 media-libs/libpng 依赖问题，我把 FireFox 删除了）</p>
<p>使用 Chromium 的时候是 Intel 的核显驱动，安装了 media-libs/libva-intel-media-driver 软件包，这套 bwrap 参数可以让 Chromium 用到显卡的视频解码，由于 Gentoo 的 Chromium 会读取 /etc/chromium/ 下的文件作为 Chromium 启动时的命令行参数，所以我把参数都放到那里了</p>
<p>我这套选项可能有的有些多余，不过我懒得再裁剪了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">--ozone-platform=wayland --use-gl=angle --use-angle=vulkan --enable-features=AcceleratedVideoEncoder,AcceleratedVideoDecodeLinuxGL,VaapiOnNvidiaGPUs,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE --ignore-gpu-blocklist --disable-gpu-driver-bug-workaround --enable-wayland-ime --wayland-text-input-version=3</span></span></code></pre></div></div>
<h2 id="sysctl">sysctl</h2>
<p>我参考了一些文章给出的 sysctl 配置，新建目录 /etc/sysctl.d/，并新建文件 99-hardened.conf，文件内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">core_pattern</span><span class="o">=|/</span><span class="n">bin</span><span class="o">/</span><span class="bp">false</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">kptr_restrict</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">dmesg_restrict</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">unprivileged_bpf_disabled</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">bpf_jit_harden</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">dev</span><span class="o">.</span><span class="n">tty</span><span class="o">.</span><span class="n">ldisc_autoload</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">unprivileged_userfaultfd</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">kexec_load_disabled</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">sysrq</span><span class="o">=</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_syncookies</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_rfc1337</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_timestamps</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">rp_filter</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">rp_filter</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">secure_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">secure_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">send_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">send_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">icmp_echo_ignore_all</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">use_tempaddr</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">use_tempaddr</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_ra</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_ra</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">yama</span><span class="o">.</span><span class="n">ptrace_scope</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">mmap_rnd_bits</span><span class="o">=</span><span class="mi">32</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">mmap_rnd_compat_bits</span><span class="o">=</span><span class="mi">16</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_symlinks</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_hardlinks</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_fifos</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_regular</span><span class="o">=</span><span class="mi">2</span></span></span></code></pre></div></div>
<p><code>kernel.yama.ptrace_scope=1</code> 貌似是默认的？为了更安全可以选择 <code>2</code> 或 <code>3</code>，我印象中 2 是不允许非 root 用户做这件事，而 3 这是不允许该行为</p>
<p>我设置为 1 是允许父子进程关系才可以查看进程的内存和运行状态等信息，这是因为我仍然有调试软件的需求，如果没有的话设置死也是个选择 🤔</p>
<p>可以安装 <a href="https://github.com/slimm609/checksec" target="_blank" rel="noopener noreffer ">checksec</a> 查看当前运行的 kernel 的安全性（当然，该工具检查的并不全面）</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ checksec --kernel 
</span></span><span class="line"><span class="cl">* Kernel protection information:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Description - List the status of kernel protection mechanisms. Rather than
</span></span><span class="line"><span class="cl">  inspect kernel mechanisms that may aid in the prevention of exploitation of
</span></span><span class="line"><span class="cl">  userspace processes, this option lists the status of kernel configuration
</span></span><span class="line"><span class="cl">  options that harden the kernel itself against attack.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Kernel config:
</span></span><span class="line"><span class="cl">/proc/config.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Vanilla Kernel ASLR:                    Full
</span></span><span class="line"><span class="cl">  NX protection:                          Enabled
</span></span><span class="line"><span class="cl">  Protected symlinks:                     Enabled
</span></span><span class="line"><span class="cl">  Protected hardlinks:                    Enabled
</span></span><span class="line"><span class="cl">  Protected fifos:                        Enabled
</span></span><span class="line"><span class="cl">  Protected regular:                      Enabled
</span></span><span class="line"><span class="cl">  Ipv4 reverse path filtering:            Enabled
</span></span><span class="line"><span class="cl">  Kernel heap randomization:              Enabled
</span></span><span class="line"><span class="cl">  GCC stack protector support:            Enabled
</span></span><span class="line"><span class="cl">  GCC stack protector strong:             Enabled
</span></span><span class="line"><span class="cl">  SLAB freelist randomization:            Enabled
</span></span><span class="line"><span class="cl">  Virtually-mapped kernel stack:          Enabled
</span></span><span class="line"><span class="cl">  Restrict /dev/mem access:               Enabled
</span></span><span class="line"><span class="cl">  Restrict I/O access to /dev/mem:        Enabled
</span></span><span class="line"><span class="cl">  Exec Shield:                            Unsupported
</span></span><span class="line"><span class="cl">  YAMA:                                   Active
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Hardened Usercopy:                      Enabled
</span></span><span class="line"><span class="cl">  Harden str/mem functions:               Enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* X86 only:            
</span></span><span class="line"><span class="cl">  Address space layout randomization:     Enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* SELinux:                                Disabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  SELinux infomation available here: 
</span></span><span class="line"><span class="cl">    http://selinuxproject.org/</span></span></code></pre></div></div>
<p>这里除了 SELinux 没有开启之外，其他都是通过检查的</p>
<p>印象中还有一个项目，它检查内核配置比这个更全面，除了基本的这些之外，还有 <a href="https://kspp.github.io/" target="_blank" rel="noopener noreffer ">KSPP</a> (Kenrel Self Protection Project) 和 PAX 等项目的建议，不过我没用它</p>
<p><code>checksec</code> 还可以检查指定的可执行文件的安全配置情况</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ checksec --file<span class="o">=</span>/usr/bin/sway
</span></span><span class="line"><span class="cl">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	    Symbols	     FORTIFY	 Fortified  Fortifiable	FILE
</span></span><span class="line"><span class="cl">Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   No Symbols	Partial	9		18		/usr/bin/sway</span></span></code></pre></div></div>
<h2 id="内核命令行参数">内核命令行参数</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">page_alloc.shuffle=1 pti=on vsyscall=none module.sig_enforce=1 lockdown=confidentiality quiet loglevel=0
</span></span><span class="line"><span class="cl">intel_iommu=on amd_iommu=force_isolation efi=disable_early_pci_dma iommu=force iommu.passthrough=0 iommu.strict=1
</span></span><span class="line"><span class="cl">spectre_v2=on spec_store_bypass_disable=on tsx=off tsx_async_abort=full mds=full l1tf=full,force kvm.nx_huge_pages=force</span></span></code></pre></div></div>
<p>第一行中的启动参数是开启一些常见的安全防护机制，比如页表隔离，模块签名验证等，其实有更多的参数可以写，比如 <code>slab_nomerge</code> 和 <code>randomize_kstack_offset=on</code> 这些，不过由于我使用的内核是 hardened USE 变量的 gentoo-kernel，这些已经在编译的时候开启了，我就不在这里写了</p>
<p>第二行是开启一些 IOMMU 防护</p>
<p>第三行是开启 Spectre 等 CPU 漏洞的缓解机制</p>
<p>如果要检查当前运行的 CPU 是否受到已知漏洞的影响，可以运行</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ grep -r . /sys/devices/system/cpu/vulnerabilities/</span></span></code></pre></div></div>
<h2 id="networkmanager">NetworkManager</h2>
<p>NetworkManager 是目前大多数用户使用的桌面环境都在用的网络管理工具，它既可以管理有线网络，也可以管理无线网络。</p>
<p>应该开启 NetworkManager 的 MAC 地址随机化</p>
<p>在 /etc/NetworkManager/conf.d/ 下创建 99-macrandomize.conf</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[device]
</span></span><span class="line"><span class="cl">wifi.scan-rand-mac-address=yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[connection]
</span></span><span class="line"><span class="cl">wifi.cloned-mac-address=random
</span></span><span class="line"><span class="cl">ethernet.cloned-mac-address=random</span></span></code></pre></div></div>
<p>我使用的是 Hyprland 窗口管理器，这些窗口管理器基本都有一个缺陷 —— 没有自家的 keyring 服务（GNOME 有 gnome-keyring，KDE Plasma 有 kwallet）</p>
<p>我安装了 gnome-base/gnome-keyring，并且运行了 <code>systemctl --user enable --now gnome-keyring-daemon</code></p>
<p>之后我安装了 gnome-extra/nm-applet 用来连接 WIFI，并使用网络编辑，在 WIFI 安全性中改成仅为该用户存储密码</p>
<p>如果要安装 gnome-extra/nm-applet 的话，最好启用 <code>appindicator</code> USE 变量</p>
<p>之后是开启 IPV6 隐私扩展</p>
<p>新建 /etc/NetworkManager/conf.d/ip6-privacy.conf，其内容为</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[connection]
</span></span><span class="line"><span class="cl">ipv6.ip6-privacy=2</span></span></code></pre></div></div>
<p>在 /etc/NetworkManager/system-connections/ 下编辑已有的连接</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">[ipv6]
</span></span><span class="line"><span class="cl">method=auto
</span></span><span class="line"><span class="cl">ip6-privacy=2
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>添加这个 <code>ip6-privacy=2</code></p>
<h2 id="浏览器配置">浏览器配置</h2>
<p>FireFox 我推荐 <a href="https://github.com/arkenfox/user.js" target="_blank" rel="noopener noreffer ">arkenfox/user.js</a> 项目，搭配 <a href="https://github.com/gorhill/uBlock" target="_blank" rel="noopener noreffer ">uBlock Origin</a></p>
<p>如果为了防止被网站跟踪，可以选择使用 Mullvad Browser，这位是和 Tor Project 联合开发，并去除了 Tor 的部分</p>
<p>Chromium 的话，我选择根据 <a href="https://www.chromium.org/administrators/policy-templates/" target="_blank" rel="noopener noreffer ">Policy Templates</a> 配置一些策略</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxAdMeasurementEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxAdTopicsEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxPromptEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxSiteEnabledAdsEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AudioSandboxEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;NetworkServiceSandboxEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AutoplayAllowed&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;BlockThirdPartyCookies&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SavingBrowserHistoryDisabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;EncryptedClientHelloEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;HttpsUpgradesEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;WebRtcIPHandling&#34;</span><span class="p">:</span> <span class="s2">&#34;disable_non_proxied_udp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingProtectionLevel&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingProxiedRealTimeChecksAllowed&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;CACertificateManagementAllowed&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>写完可以用 <code>jq</code> 验证一下 JSON 格式对不对 <code>cat test.json | jq</code></p>
<p>我在 Chromium 上依旧在使用 uBlock Origin，也不知道 Chromium 什么时候开始停止支持 Mainfest V2 标准的浏览器扩展</p>
<h2 id="禁用-core-dump">禁用 core dump</h2>
<p>禁用 core dump 貌似是为了防止有写私密数据也被 dump 下来了。不过就我个人而言，我只是很讨厌这种在我不知道的时候 dump 的行为，不知不觉运行 <code>coredumpctl</code> 一看，python、firefox 这些软件都 dump 过，难绷。</p>
<p>新建 /etc/systemd/coredump.conf.d/disable.conf 中写入</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[Coredump]
</span></span><span class="line"><span class="cl">Storage=none
</span></span><span class="line"><span class="cl">ProcessSizeMax=0</span></span></code></pre></div></div>
<p>上面 sysctl 的 <code>kernel.core_pattern=|/bin/false</code> 也是在禁用 core dump</p>
<p>不得不说，禁用了之后，我自己开发的软件 core dump 了也没存。有一说一，core dump 还是有助于开发的，等之后我手动临时开启试试看吧。</p>
<h2 id="面向安全的编译选项">面向安全的编译选项</h2>
<p>在我最先写这个文章的时候，我就想写这部分，但是由于我对 GCC 和 LLVM 的了解还太少，导致我有些迟疑（当然，现在也了解不多，只是感觉应该加上而已）</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">COMMON_FLAGS=&#34;-O3 -pipe -march=x86-64-v3 -flto=thin -fstack-protector-strong -fstack-clash-protection -fcf-protection=full -D_FORTIFY_SOURCE=3&#34;
</span></span><span class="line"><span class="cl">RUSTFLAGS=&#34;${RUSTFLAGS} -C target-cpu=native&#34;
</span></span><span class="line"><span class="cl">CFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FCFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">LDFLAGS=&#34;-Wl,-O3,-z,now,--as-needed,--lto-O3,--icf=safe,--gc-sections&#34;</span></span></code></pre></div></div>
<p>我使用的是 LLVM/systemd profile，所以这里用了 thinlto</p>
<p>上面就是我个人的编译选项了，我本身就开启了 <code>hardened</code> USE 变量，说实话，这里的部分 USE 变量是重复的</p>
<p>只要开启了 <code>hardened</code> USE 变量，这里面有些选项是默认就加上的</p>
<blockquote>
<p>运行 <code>clang --version</code> 可以看到</p>
<p>Configuration file: /etc/clang/x86_64-pc-linux-gnu-clang.cfg</p>
<p>从那个文件中可以看到它依赖于 @gentoo-common.cfg @gentoo-common-ld.cfg 和 @gentoo-cet.cfg</p>
<p>我这里的 -fstack-clash-protection -fstack-protector-strong -fcf-protection=all 在在上面的文件中</p>
</blockquote>
<p><code>fstack-protector-*</code> 都是对栈溢出的防御，而 <code>fcf-protection</code> 则是对控制流劫持（也不知道是不是这个名字，就是 ROP 之类的）攻击的防御</p>
<p>LLVM 中也有一个应对 ROP 这种攻击的技术，就是 <a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html" target="_blank" rel="noopener noreffer ">CFI</a>，CFI 必须在开启了 LTO 的情况下才能使用（我印象中 KCFI 不需要 LTO，它被用在操作系统内核等底层软件，检测的范围更小），我感觉为特定的软件开 CFI，倒也可以接受。Linux kernel 有专门的 CFI 的选项，Chromium 也实施了 CFI。</p>
<p>CFI 还分前端和后端，我也没太仔细研究，也不太清楚区别</p>
<p>我使用了 <code>O3</code> 编译，虽然说 O3 的提升空间不大，不过我个人希望试试看。</p>
<p><code>march=x86-64-v3</code> 表示了我本机 CPU 的指令集是这位，其实用 <code>march=native</code> 就行，编译器会自动选择适合的指令集</p>
<p><code>D_FORTIFY_SOURCE=3</code> 用于应用 libc 的一种强化措施，主要用于检测某些库函数的缓冲区溢出问题。具体可以参考 glibc 的文档：https://www.gnu.org/software/libc/manual/html_node/Source-Fortification.html</p>
<h2 id="selinuxapparmor">SELinux/AppArmor</h2>
<p>TODO 我自己还没太准备学习这二位</p>
]]></description>
</item>
<item>
    <title>译文: 为什么没有很多人使用 Linux</title>
    <link>http://localhost:1313/posts/why_not_linux/</link>
    <pubDate>Fri, 01 Nov 2024 14:03:45 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/why_not_linux/</guid>
    <description><![CDATA[<h1 id="译文-为什么没有很多人使用-linux">译文: 为什么没有很多人使用 Linux</h1>
<hr>
<p>翻译自: <a href="https://world.hey.com/dhh/why-don-t-more-people-use-linux-33b75f53" target="_blank" rel="noopener noreffer ">https://world.hey.com/dhh/why-don-t-more-people-use-linux-33b75f53</a></p>
<p>今天偶然看到了这篇文章，感觉很有意思，所以翻译转发了一下，最后两段没有翻译过来，因为我认为和主题关系不是特别大</p>
<p>如果文章作者介意翻译转载，需要删除掉，可以选择以一些我能看到的方式（如评论）告知我</p>
<hr>
<p>几周前，我看到<a href="https://xcancel.com/yacineMTB/status/1825361755133952326" target="_blank" rel="noopener noreffer ">一条推文</a>问道：“如果 Linux 这么好，为什么没有很多人使用它？”这是一个很合理的问题！乍一听感觉是对的，不过还得仔细考虑一下。 Linux 甚至是自由软件，那么如果它实际上更好的话，是什么阻止了它的大规模采用呢？我的回应：</p>
<blockquote>
<p>如果锻炼如此健康，为什么没有更多的人去做呢？</p>
<p>如果阅读如此有教育意义，为什么没有更多的人这样做呢？</p>
<p>如果垃圾食品对你如此有害，为什么还有那么多人吃它？</p>
</blockquote>
<p>世界上充满无需付费即可提升自我的方式，但大多数人忽视了它们。粗略地说，在一个廉价、空热量的世界里，变得肥胖和无知比保持健康和见多识广更容易。很难抗拒付出最小努力的诱惑。</p>
<p>并且 Linux 并非易事。与微软和苹果的商业产品相比，这个操作系统对您的要求更高。因此，它可以作为更好地理解计算机的实验室。与不断要求的老师一起，你必须自己解决问题才能学习和掌握 Linux 上的操作。</p>
<p>现在我完全理解为什么大多数计算机用户对智力锻炼不感兴趣，因为他们只想浏览网页或使用应用程序。他们并不希望熟练掌握计算基础知识。</p>
<p>但程序员不一样。或者应该有所不同。他们就像消防员。健身不是消防的目的，而是前提。当你有耐力和力量将人们从燃烧的建筑物中扛出来时，你就是一个更好的消防员，而不是没有。因此，大多数消防员都会努力保持健康，以完成他们的任务。</p>
]]></description>
</item>
<item>
    <title>使用 Hyprland</title>
    <link>http://localhost:1313/posts/hyprland_tour/</link>
    <pubDate>Fri, 13 Sep 2024 10:50:42 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/hyprland_tour/</guid>
    <description><![CDATA[<h1 id="使用-hyprland">使用 Hyprland</h1>
<p>目前也用 Hyprland 几个月了，故而写了这篇面向准备使用 Hyprland 的人群。</p>
<p><a href="https://github.com/hyprwm/Hyprland" target="_blank" rel="noopener noreffer ">Hyprland</a> 是由 C++ 编写，少数不使用 <a href="https://gitlab.freedesktop.org/wlroots/wlroots" target="_blank" rel="noopener noreffer ">wlroots</a> 的平铺式窗口管理器。默认足够漂亮，并且也还好用。好用指的是实现了 text-input-v1，并且支持将 XWayland 的缩放设置为 0 而不是跟着全局的缩放走。实现了 text-input-v1 就可以让 Electron 的软件在跑在 Wayland 下也可以使用 fcitx 中文输入法。</p>
<p>Hyprland 是在 0.42 版本开始完全不依赖于 wlroots 的，<a href="https://github.com/hyprwm/Hyprland/releases/tag/v0.43.0" target="_blank" rel="noopener noreffer ">0.43</a> 就把编译所需的 C++ 标准提到 C++ 26 了，不过本身我 C++ 的水平不是很高，我本身对 C++ 26 也没有太多的关注，我又不是个语言律师，也不好评价这个决定。不得不说，这一定程度上把编译工具链的要求提高了一些。</p>
<p>Hyprland 的功耗比 sway 大一些。</p>
<h2 id="配置文件">配置文件</h2>
<p>Hyprland 安装自带的默认配置文件基本还可以，对一些基础的东西都做了设置。你需要设置的大多是环境变量的设置，窗口规则以及自动启动的软件。</p>
<p>我目前对窗口规则只设置了一点，也是遇到了需要设定的软件再添加。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">windowrulev2 = opacity 0.90, class:.*
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: brave-browser
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: firefox
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: Terraria.bin.x86_64
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: org.gnome.Epiphany
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: ^(Library)(.*)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: ^(wofi)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: ^(Library)(.*)$</span></span></code></pre></div></div>
<p>这里我只是将所有窗口都不透明度设置为 0.9，并且将一些额外需要设定的应用（比如浏览器和游戏）的不透明度还是拉满。</p>
<p>有些窗口我并不希望是全屏显示，所以我额外设置它们的 size。</p>
<p>对于环境变量，我只是额外设定了 fcitx5 的环境变量。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">env = LIBVA_DRIVER_NAME, nvidia
</span></span><span class="line"><span class="cl">env = NVD_BACKEND, direct
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORM, wayland
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORMTHEME, qt6ct
</span></span><span class="line"><span class="cl">env = XDG_CURRENT_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_TYPE, wayland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = EDITOR, /usr/bin/nvim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = LANG,zh_CN.UTF-8
</span></span><span class="line"><span class="cl">env = QT_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = XMODIFIERS, @im=fcitx
</span></span><span class="line"><span class="cl">env = SDL_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = INPUT_METHOD, fcitx
</span></span><span class="line"><span class="cl">env = GLFW_IM_MODULE, ibus</span></span></code></pre></div></div>
<p><code>LIBVA_DRIVER_NAME</code> 是配合 <a href="https://github.com/elFarto/nvidia-vaapi-driver" target="_blank" rel="noopener noreffer ">nvidia-vaapi-driver</a> 用的。<code>LANG</code> 是当前系统的语言，我通过这个设置系统语言为中文，但是我在 <strong>.bashrc</strong> 文件重新设置回英文了。</p>
<p>对于自动启动的应用，只需要这么写:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">exec-once = /usr/bin/wlsunset -t 2500 -T 3000
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/mako
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/fcitx5 -d
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/blueman-applet
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/swaybg -i &#34;/home/zuos/Pictures/magic_planet.png&#34; -m fill
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/waybar -c /home/zuos/.config/waybar/waybar.json
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/hyprctl setcursor &#34;Tela&#34; 24
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface icon-theme &#39;Papirus&#39;
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface font-name &#39;Noto Sans Mono CJK SC 12&#39;</span></span></code></pre></div></div>
<p><a href="https://sr.ht/~kennylevinsen/wlsunset/" target="_blank" rel="noopener noreffer ">wlsunset</a> 是一个设置屏幕色温的软件，我需要一个支持设置 night light 的软件，所以我选择了这位。</p>
<p><a href="https://github.com/emersion/mako" target="_blank" rel="noopener noreffer ">mako</a> 是一个通知组件，<a href="https://github.com/blueman-project/blueman" target="_blank" rel="noopener noreffer ">blueman</a> 是一个蓝牙连接相关的 GUI 软件，<code>blueman-applet</code> 可以启动它的系统托盘。</p>
<p><a href="https://github.com/swaywm/swaybg" target="_blank" rel="noopener noreffer ">swaybg</a> 用于设置壁纸，Hyprlan 存在一个 <a href="https://github.com/hyprwm/hyprpaper" target="_blank" rel="noopener noreffer ">hyprpaper</a> 设置壁纸的软件，但是其功能我不是很需要。</p>
<p><code>hyprctl</code> 是随安装 Hyprland 就带的，可以获取当前桌面窗口类等信息，并且可以设置鼠标主题和大小，我这里就是干这个用的。</p>
<p>后面两个 <code>gsettings</code> 就是设置图标主题和字体主题。</p>
<h2 id="需要额外用到的软件">需要额外用到的软件</h2>
<p>可以参考 <a href="https://wiki.hyprland.org/Useful-Utilities/" target="_blank" rel="noopener noreffer ">Hyprland wiki</a>。</p>
<p>类似 waybar, wofi, mako, hyprlock 这些的配置文件，可以参考我的 dotfiles: <a href="https://github.com/suoyuan666/dotfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/dotfiles</a></p>
<h2 id="tricks">tricks</h2>
<p>剪切板管理器可能不是谁都能用到，但是 <a href="https://github.com/bugaevc/wl-clipboard" target="_blank" rel="noopener noreffer ">wl-clpboadr</a> 是值得装的，毕竟 neovim 就认那几个剪切板工具。</p>
<p>设置系统为中文后，很有可能部分软件直接把下载路径直接设置为 <strong>$HOME/下载</strong>，但这还对我来说很难受，可以安装 <code>xdg-user-dirs</code>，之后在<code>LANG=en_US.UTF-8</code> 的环境下执行一编 <code>xdg-user-dirs-update</code>。</p>
<p>XWayland 的分数缩放还是很难搞，不过 Hyprland 可以直接将 XWayland 的缩放设置为 0，如果和我一样，是一个 electron 应用跑在 XWayland 下的话，可以选择附加 <code>--force-device-scale-factor=1.6</code>，这样就可以设置一个正常的缩放了。</p>
<p>没有默认安装一个可以设置打开方式的 GUI 软件，可以使用类似 <code>xdg-settings get default-web-browser</code> 的方式设置。</p>
]]></description>
</item>
<item>
    <title>Linux kernel 代码规范</title>
    <link>http://localhost:1313/posts/linux_code_style/</link>
    <pubDate>Sun, 11 Aug 2024 01:25:38 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/linux_code_style/</guid>
    <description><![CDATA[<p>尝试阅读 Linux kernel 文档中的代码规范</p>
<h1 id="linux-kernel-代码规范">Linux kernel 代码规范</h1>
<h2 id="背景">背景</h2>
<p>我也真是闲的😅。不过话说回来，我一直有听说 Linux kernel 的代码规范，比如缩进 8 空格（这是我唯一知道的 8 字符缩进的项目），一行代码不能超过 80 个字符。</p>
<p>所以我准备好好看一下 Linux kernel 的代码规范到底是什么。</p>
<p>有几个部分并不算是比较通用的代码规范，我就没有记。</p>
<h2 id="coding-style">coding style</h2>
<h3 id="缩进">缩进</h3>
<p>Tab 就是 8 字符，因此缩进就是 8 字符。一些异端试图将缩进设为 4 甚至是 2，这就像是将 Pi 的值设置为 3 一样。</p>
<p>理由: 缩进的意义在于明确一些代码块的起点和终点，当你连续面对屏幕工作 20 个小时的时候，较大的缩进会让你更好的工作。</p>
<p>现在有些人认为 8 个字符的缩进会让代码太往右移了，但是如果你的代码超过了 3 个缩进级别，那这段代码的逻辑就是很难绷的，你应该修改它。</p>
<p>简化 <code>switch</code> 中的多个缩进级别的首选方式是 把 <code>switch</code> 和 <code>case</code> 对齐。例如:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">switch</span> <span class="p">(</span><span class="n">suffix</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;G&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;g&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mem</span> <span class="o">&lt;&lt;=</span> <span class="mi">30</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;M&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;m&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mem</span> <span class="o">&lt;&lt;=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;K&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;k&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mem</span> <span class="o">&lt;&lt;=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">fallthrough</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>除非你有什么要隐藏的东西，否则不要在一行放多个语句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="n">do_this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">do_something_everytime</span><span class="p">;</span></span></span></code></pre></div></div>
<p>不要使用 <code>,</code> 而避免使用 <code>{}</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_this</span><span class="p">(),</span> <span class="nf">do_that</span><span class="p">();</span></span></span></code></pre></div></div>
<p>除了注释，文档和 Kconfig 之外，空格不会用于缩进。行尾不可留有空格。</p>
<h3 id="断开长字符串">断开长字符串</h3>
<p>单行长度限制为 80 字符。超过 80 字符的部分应该被分成合理的块，除非超过 80 字符具有很好的可读性且不会隐藏信息。</p>
<p>子语句比父语句的缩进级别更深，一个常见的风格就是函数体部分和函数的左括号对齐。</p>
<p>不能破坏用户可见的字符串(如<code>printf</code>)。这会让用户用 <code>grep</code> 的时候很难绷</p>
<h3 id="大括号与空格">大括号与空格</h3>
<p>C 代码风格中经常会出现的问题就是大括号的位置，这几乎不存在技术原因的选择。Kernighan 和 Ritchie 向我们展示了一种风格:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="n">is</span> <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">we</span> <span class="k">do</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这适用于所有非函数语句块，如:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">switch</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">KOBJ_ADD</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;add&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">KOBJ_REMOVE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;remove&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">KOBJ_CHANGE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;change&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>函数是一种特殊情况: 它的左大括号是另起一行:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">function</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">body</span> <span class="n">of</span> <span class="n">function</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>右大括号所在的那一行应该不会有其他语句，除非那个语句是上面这段语句的连续，如:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">body</span> <span class="n">of</span> <span class="k">do</span><span class="o">-</span><span class="n">loop</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">..</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">....</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>理由: K&amp;R</p>
<p>如无必要，单个语句即可完成的地方不用大括号:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_this</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_that</span><span class="p">();</span></span></span></code></pre></div></div>
<p>但像 <code>if-else</code> 只有一个分支是单个语句的话就应该都加大括号:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_this</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_that</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">otherwise</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>此外，当循环包含多个简单语句的时候使用大括号:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nf">do_something</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h4 id="空格">空格</h4>
<p>Linux kernel 使用空格的风格主要在于函数和关键字的使用。大多数关键字后面都加空格，除了 <code>sizeof</code>, <code>typedef</code>, <code>alignof</code> 和 <code> __attribute__</code>。</p>
<p>也就是 <code>if, switch, case, for, do, while</code> 这样的关键字后面跟空格，但是下面这段代码不会:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span><span class="p">);</span></span></span></code></pre></div></div>
<p>不要写成 <code>s = sizeof( struct file );</code> 这样很难绷。</p>
<p>当声明指针或者返回指针类型的函数时，<code>*</code> 首选的办法是和变量名或者函数名靠近，而不是和类型名靠近:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">linux_banner</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">memparse</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">retptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="nf">match_strdup</span><span class="p">(</span><span class="kt">substring_t</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span></span></span></code></pre></div></div>
<p>下面这些二元运算符左右两边都加空格:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">=</span>  <span class="o">+</span>  <span class="o">-</span>  <span class="o">&lt;</span>  <span class="o">&gt;</span>  <span class="o">*</span>  <span class="o">/</span>  <span class="o">%</span>  <span class="o">|</span>  <span class="o">&amp;</span>  <span class="o">^</span>  <span class="o">&lt;=</span>  <span class="o">&gt;=</span>  <span class="o">==</span>  <span class="o">!=</span>  <span class="o">?</span>  <span class="o">:</span></span></span></code></pre></div></div>
<p>但下面这些一元运算符后面没有空格:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">&amp;</span>  <span class="o">*</span>  <span class="o">+</span>  <span class="o">-</span>  <span class="o">~</span>  <span class="o">!</span>  <span class="k">sizeof</span>  <span class="n">typeof</span>  <span class="n">alignof</span>  <span class="n">__attribute__</span>  <span class="n">defined</span></span></span></code></pre></div></div>
<p><code>++  --</code> 运算符靠近变量那一侧没有空格（就是 <code>a++</code> 而不是 <code>a ++</code>）</p>
<p><code>.</code> 和 <code>-&gt;</code> 周围没有空格</p>
<p>不要在行尾留有空格</p>
<h3 id="命名">命名</h3>
<p>C 语言中不要使用诸如 <code>ThisVariableIsATemporaryCounter</code> 这样的变量命名，这应该写成 <code>tmp</code>。</p>
<p>虽然大小写混合的名称不受欢迎，但是全局的符号的名称要具有一定的用于描述的信息，比如统计当前活跃的用户数量的函数，可以命名为 <code>count_active_users</code>，但不要写成 <code>cntusr()</code>。</p>
<p>将函数类型编码到其名称中的行为（被称为 Hungarian notation，匈牙利表示法）是很难绷的，编译器无论如何都知道它的类型，这只会让开发者感到困惑。</p>
<p>本地变量命名要尽可能简短，比如一个循环计数器被命名为 <code>i</code>，为了不产生误解而命名成 <code>loop_counter</code> 是没有意义的行为，<code>tmp</code> 也可以用于临时存储任何类型的值。</p>
<p>如果你害怕混淆局部变量的名称，那么你就会遇到另一个问题—— function-growth-hormone-imbalance syndrome，参考 函数 那部分。</p>
<p>对于符号名称和文档，避免 <code>master / slave</code> 或 <code>blacklist / whitelist</code> 的用法。</p>
<p>对于 <code>master / slave</code>，推荐使用:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">‘{primary,main} / {secondary,replica,subordinate}’ ‘{initiator,requester} / {target,responder}’ ‘{controller,host} / {device,worker,proxy}’ ‘leader / follower’ ‘director / performer’</span></span></code></pre></div></div>
<p><code>blacklist / whitelist</code> 推荐使用:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">‘denylist / allowlist’ ‘blocklist / passlist’</span></span></code></pre></div></div>
<p>引入新用法的情况是维护用户空间的 ABI/API，或者更新代码以符合 2020 年前存在的硬件或协议规范（这些规范强制使用这些术语）。对于新规范，应尽可能将其翻译成现有的编码标准。</p>
<h3 id="typedefs">Typedefs</h3>
<p>不要对使用类似 <code>vps_t</code> 的东西，对结构体和指针使用 <code>typedef</code> 是很难绷的行为。当你看到下面这段代码时，你可能会有些困惑:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">vps_t</span> <span class="n">a</span><span class="p">;</span></span></span></code></pre></div></div>
<p>但如果换成下面这样就很清晰:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">virtual_container</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span></span></span></code></pre></div></div>
<p>有人认为 <code>typedef</code> 就会帮助提高可读性，但实际上未必，只有下面这些情况是有用的:</p>
<ul>
<li>完全不透明的地方，使用 <code>typedef</code> 主动隐藏对象是什么
<ul>
<li>例如 <code>pte_t</code> 等对象，你必须正确使用访问函数（accessor functions）去访问它们。</li>
<li>不透明和访问函数本身并不好，为 <code>pte_t</code> 等设计成这样的原因是可移植的信息基本为 0（貌似意思是说，不同架构的 <code>pte_t</code> 实际类型不一致）</li>
</ul>
</li>
<li>清晰整数类型，这种抽象有助于避免混淆，无论是 <code>int</code> 还是 <code>long</code>，<code>u8</code>, <code>u16</code>, <code>u64</code> 就是很好的类型定义。
<ul>
<li>某些时候可能会遇到不同架构使用不同的数据类型的情况，这时候可以使用 <code>typedef unsigned int myflags_t;</code> 将类型抽象出来。</li>
</ul>
</li>
<li>当你使用 sparse 来创建一个新的类型进行类型检查时
<ul>
<li><a href="https://lwn.net/Articles/689907/" target="_blank" rel="noopener noreffer ">sparse</a> 是一个语法检查工具。</li>
</ul>
</li>
<li>在一些特殊情况下，新类型和 C99 类型相同。
<ul>
<li>比如有些人不习惯 <code>uint32_t</code> 类型，因此，Linux 有 <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>。</li>
</ul>
</li>
<li>在用户空间安全的类型
<ul>
<li>在部分用户空间可见的结构中，不能要求 C99 的类型，也不能使用 <code>u32</code>，因此都使用 <code>__u32</code> 或类似的。</li>
</ul>
</li>
</ul>
<p>或许还有其他情况，但基本规则就这些了。</p>
<p>通常，指针和结构体等合理使用的元素，应该直接访问，而不是使用 <code>typedef</code></p>
<h3 id="函数">函数</h3>
<p>函数应该简短优雅，它们应该占用一两个屏幕的大小（众所周知，ISO/ANSI 屏幕尺寸 80x24）。</p>
<p>函数的最大长度与函数的复杂性和缩进级别成反比。如果你有一个概念上很简单的函数，它只是一个长（但简单）的 <code>case</code> 语句，你必须为许多不同的情况做很多小事情，那么一个更长的函数是可以接受的。</p>
<p>如果你有一个复杂的函数，并且你怀疑一个不太有天赋的初学者可能甚至无法理解这个函数是什么，你应该更加严格地遵守最大限制。使用具有描述性名称的辅助函数（如果你认为它对性能至关重要，可以让编译器内联它们，它可能会比你做得更好）。</p>
<p>函数的另一个衡量标准是局部变量的数量。它们不应超过 5-10，否则你就做错了。重新思考该功能，并将其分成更小的部分。人脑通常可以轻松地记住大约 7 种不同的事物，任何更多的事物都会变得混乱。您知道自己很聪明，但也许您想了解两周后自己做了什么。</p>
<p>在源文件中，用一个空行分隔函数。如果函数是导出的，则其 EXPORT 宏应紧跟在大括号所在行之后:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">system_is_up</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">system_state</span> <span class="o">==</span> <span class="n">SYSTEM_RUNNING</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">system_is_up</span><span class="p">);</span></span></span></code></pre></div></div>
<h4 id="函数原型">函数原型</h4>
<p>在函数原型中,将参数名称及其数据类型包括在内。尽管 C 语言并不要求，但在 Linux 中是首选 因为这是为读者添加有价值信息的简单方法。</p>
<p>不要在函数声明中使用 <code>extern</code> 关键字，因为这会使行更长，而且并不是绝对必要的。</p>
<p>函数原型应该遵循 <a href="https://lore.kernel.org/mm-commits/CAHk-=wiOCLRny5aifWNhr621kYrJwhfURsa0vFPeUEm8mF0ufg@mail.gmail.com/" target="_blank" rel="noopener noreffer ">元素顺序规则</a>:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__init</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">__must_check</span> <span class="nf">action</span><span class="p">(</span><span class="k">enum</span> <span class="n">magic</span> <span class="n">value</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">u8</span> <span class="n">count</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...)</span> <span class="nf">__printf</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="n">__malloc</span><span class="p">;</span></span></span></code></pre></div></div>
<ul>
<li>存储类（下面是 <code>static __always_inline</code>，注意 <code>__always_inline</code> 在技术上是一个属性，但被视为内联）</li>
<li>存储类属性（此处为 <code>__init</code>，即节声明，但也包括 <code>__cold</code> 之类的东西）</li>
<li>返回类型（此处为 <code>void *</code>）</li>
<li>返回类型属性（此处为 <code>__must_check</code>）</li>
<li>函数名称（此处为 <code>action</code>）</li>
<li>函数参数（这里，<code>(enum magic value，size_t size，u8 count，char *fmt，...)</code>，注意应始终包含参数名称）</li>
<li>函数参数属性（此处为 <code>__printf(4, 5)</code>）</li>
<li>函数行为属性（此处为 <code>__malloc</code>）</li>
</ul>
<p>对于函数定义（即实际的函数体），编译器不允许在函数参数之后添加函数参数属性。在这些情况下，它们应该遵循存储类属性（例如，与上面的声明示例相比，请注意下面 <code>__printf(4, 5)</code> 的位置更改）</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="n">__always_inline</span> <span class="n">__init</span> <span class="nf">__printf</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">__must_check</span> <span class="nf">action</span><span class="p">(</span><span class="k">enum</span> <span class="n">magic</span> <span class="n">value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">               <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">u8</span> <span class="n">count</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...)</span> <span class="n">__malloc</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="函数推出逻辑的集中">函数推出逻辑的集中</h3>
<p>当函数从多个位置退出并且必须完成一些常见工作（例如清理）时，<code>goto</code> 语句会派上用场。如果不需要清理则直接返回。</p>
<p>选择说明 <code>goto</code> 功能或 <code>goto</code> 存在原因的标签名称。 <code>out_free_buffer</code> 是一个好名字的例子：如果 <code>goto</code> 释放缓冲区。避免使用 <code>err1</code>: 和 <code>err2</code>: 等 GW-BASIC 名称，因为如果您添加或删除退出路径，则必须对它们重新编号，而且无论如何它们都会使正确性难以验证。</p>
<ul>
<li>无条件陈述更容易理解和遵循</li>
<li>嵌套减少</li>
<li>防止在进行修改时因不更新各个退出点而出现的错误</li>
<li>节省编译器优化冗余代码的工作</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">fun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">buffer</span> <span class="o">=</span> <span class="nf">kmalloc</span><span class="p">(</span><span class="n">SIZE</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">condition1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="p">(</span><span class="n">loop1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="p">...</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">goto</span> <span class="n">out_free_buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="nl">out_free_buffer</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">kfree</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="注释">注释</h3>
<p>注释是好的，但也存在过度注释的危险。永远不要试图在注释中解释你的代码是如何工作的：最好编写代码，以便其工作原理显而易见，并且解释写得不好的代码是浪费时间。</p>
<p>一般来说，您希望您的注释说明您的代码做了什么，而不是如何做。另外，尽量避免在函数体内添加注释：如果函数非常复杂，您需要单独注释其中的某些部分，那么您可能应该暂时返回到函数那部分的说明。您可以发表一些小注释来注意或警告某些特别聪明（或丑陋）的事情，但尽量避免过度。相反，将注释放在函数的开头，告诉人们它的作用，以及可能为什么这样做。</p>
<p>多行注释的首选格式是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * This is the preferred style for multi-line
</span></span></span><span class="line"><span class="cl"><span class="cm"> * comments in the Linux kernel source code.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Please use it consistently.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Description:  A column of asterisks on the left side,
</span></span></span><span class="line"><span class="cl"><span class="cm"> * with beginning and ending almost-blank lines.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span></span></span></code></pre></div></div>
<p>对于 net/, drivers/net/ 中的文件，推荐的多行注释格式是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* The preferred comment style for files in net/ and drivers/net
</span></span></span><span class="line"><span class="cl"><span class="cm"> * looks like this.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * It is nearly the same as the generally preferred comment style,
</span></span></span><span class="line"><span class="cl"><span class="cm"> * but there is no initial almost-blank line.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span></span></span></code></pre></div></div>
<p>对数据进行注释也很重要，无论它们是基本类型还是派生类型。为此，每行仅使用一个数据声明（多个数据声明不使用逗号）。这为您留下了对每个项目进行小评论的空间，解释其用途。</p>
<h3 id="宏枚举-和-rtl">宏，枚举 和 RTL</h3>
<p>宏和枚举中的常量都应该大写定义</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define CONSTANT 0x12345</span></span></span></code></pre></div></div>
<h3 id="内联">内联</h3>
<p>似乎有一种常见的误解，认为 gcc 有一个神奇的“让程序更快”加速选项，称为内联。虽然使用内联可能是合适的（例如作为替换宏的一种方法），但通常情况下并不合适。大量使用 inline 关键字会导致内核变得更大，这反过来又会减慢系统的整体速度，因为 CPU 的 icache 占用空间更大，而且可用于页面缓存的内存更少。想一想吧；页面缓存未命中会导致磁盘查找，这很容易花费 5 毫秒。有很多 CPU 周期可以进入这 5 毫秒。</p>
<p>一个合理的经验法则是不要在代码超过 3 行的函数中放置内联。此规则的一个例外是已知参数是编译时常量的情况，并且由于这种常量，您知道编译器将能够在编译时优化大部分函数。有关后一种情况的一个很好的示例，请参阅 <code>kmalloc()</code> 内联函数。</p>
<p>人们常常认为，向静态且仅使用一次的函数添加内联始终是一个胜利，因为没有空间权衡。虽然这在技术上是正确的，但 gcc 能够在没有帮助的情况下自动内联这些内容，并且当函数被多次使用时，需要移除inline关键字以避免潜在问题，这个维护问题可能超过了提示 gcc 做它本来会做的事情的好处。</p>
<h3 id="函数返回值和名称">函数返回值和名称</h3>
<p>函数可以返回多种不同类型的值，最常见的一种是指示函数是成功还是失败的值。这样的值可以表示为错误代码整数（-Exxx = 失败，0 = 成功）或成功的布尔值（零 = 失败，非零 = 成功）。</p>
<p>混合这两种表示形式是难以发现的错误的丰富来源。如果 C 语言对整数和布尔值进行了严格区分，那么编译器就会为我们发现这些错误……但事实并非如此。为了帮助防止此类错误，请始终遵循以下约定：</p>
<blockquote>
<p>If the name of a function is an action or an imperative command, the function should return an error-code integer. If the name is a predicate, the function should return a &ldquo;succeeded&rdquo; boolean.</p>
<p>如果函数的名称是动作或命令式命令，该函数应返回一个错误代码整数。 如果名字是一个 predicate，该函数应该返回一个“成功”布尔值。</p>
</blockquote>
<p>例如，add work 是一个命令，<code>add_work()</code> 函数返回 0 表示成功，或 -EBUSY 表示失败。同样，PCI 设备存在是一个 predicate，如果 <code>pci_dev_present()</code> 函数成功找到匹配设备，则返回 1，否则返回 0。</p>
<p>所有 EXPORT 函数都必须遵守此约定，所有公共函数也应如此。私有（静态）函数不需要，但建议这样做。</p>
<p>返回值是计算的实际结果而不是计算是否成功的指示的函数不受此规则的约束。通常，它们通过返回一些超出范围的结果来指示失败。典型的例子是返回指针的函数；他们使用 <code>NULL</code> 或 <code>ERR_PTR</code> 机制来报告失败。</p>
<h3 id="bool">bool</h3>
<p>Linux kernel 的 <code>bool</code> 类型是 C99 <code>_Bool</code> 类型的别名。 <code>bool</code> 值只能计算为 0 或 1，隐式或显式转换为 <code>bool</code> 会自动将该值转换为 true 或 false。当使用 <code>bool</code> 类型时 !!不需要构建，这消除了一类错误。</p>
<p><code>bool</code> 函数返回类型和堆栈变量总是可以在适当的时候使用。鼓励使用 <code>bool</code> 来提高可读性，并且通常是比 <code>int</code> 更好的选择来存储布尔值。</p>
<p>如果缓存行布局或值的大小很重要，请勿使用 <code>bool</code>，因为其大小和对齐方式根据编译的体系结构而变化。针对对齐和大小进行优化的结构不应使用 <code>bool</code>。</p>
<p>如果结构有许多 true/false 值，请考虑将它们合并到具有 1 位成员的位字段中，或使用适当的固定宽度类型，例如 u8。</p>
<p>类似地，对于函数参数，许多 true/false 可以合并到单个按位“标志”参数中，如果调用站点具有裸露的真/假常量，那么“标志”通常可以是更具可读性的替代方案。</p>
<p>否则，在结构和参数中限制使用 <code>bool</code> 可以提高可读性。</p>
<h3 id="内联汇编">内联汇编</h3>
<p>在架构特定代码中，你可能需要使用内联汇编来与 CPU 或平台功能进行接口。必要时不要犹豫使用内联汇编。但是，不要在 C 可以完成任务时滥用内联汇编。当可能时，你可以并且应该从 C 中访问硬件。</p>
<p>考虑编写简单的辅助函数来包装内联汇编的常见位，而不是重复编写稍有变化的函数。请记住，内联汇编可以使用 C 参数。</p>
<p>大型的、重要的汇编函数应该放在 .S 文件中，并在 C 头文件中定义相应的 C 原型。汇编函数的 C 原型应使用 <code>asmlinkage</code>。</p>
<hr>
<p>根据 <a href="https://kernelnewbies.org/FAQ/asmlinkage" target="_blank" rel="noopener noreffer ">kernel newbies</a>，<code>asmlinkage</code> 是一个宏，它告诉编译器该函数不应期望在寄存器中找到其任何参数（常见的优化），而只能在 CPU 的堆栈上找到。</p>
<hr>
<p>您可能需要将您的 asm 语句标记为 <code>volatile</code> ，以防止 GCC 在没有注意到任何副作用时删除它。不过，您并不总是需要这样做，而且不必要地这样做会限制优化。</p>
<h3 id="conditional-compilation">Conditional Compilation</h3>
<p>在可能的情况下，不要在 .c 文件中使用预处理器条件指令（如 <code>#if</code>, <code>#ifdef</code> 等），这样会使代码更难读懂，逻辑也更难跟踪。相反，应该在头文件中定义这些条件指令，用于定义在 .c 文件中使用的函数，并在 <code>#else</code> 情况下提供无操作的占位版本。然后，从 .c 文件中无条件调用这些函数。编译器会避免为占位调用生成任何代码，从而产生相同的结果，但逻辑仍然容易跟踪。</p>
<p>更倾向于编译出整个函数，而不是函数的一部分或表达式的一部分。不要在表达式中放置 <code>ifdef</code>，而是将表达式的一部分或全部提取到一个单独的辅助函数中，并将条件应用于该函数。</p>
<p>如果你有一个函数或变量在特定配置下可能不会被使用，并且编译器会警告其定义未使用，可以将其标记为 <code>__maybe_unused</code>，而不是将其包裹在预处理器条件指令中。（但是，如果一个函数或变量始终不会被使用，请删除它）。</p>]]></description>
</item>
<item>
    <title>在 Gentoo Linux 上尝试 musl libc &#43; llvm 环境</title>
    <link>http://localhost:1313/posts/gentoo_musl_llvm/</link>
    <pubDate>Mon, 05 Aug 2024 09:34:33 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentoo_musl_llvm/</guid>
    <description><![CDATA[<p>尝试使用选择了 musl/llvm 的 profile 的 Gentoo Linux 作为日常使用的桌面操作系统</p>
<h1 id="在-gentooo-linux-上尝试-musl-libc--llvm-环境">在 Gentooo Linux 上尝试 musl libc + llvm 环境</h1>
<h2 id="背景">背景</h2>
<p>以前就有听说过 musl libc 了，一个体积小，并且完全按照标准实现的 libc，但一直没想过使用这个 libc。前几天看到 Gentoo Linux 对于 musl libc 有很多 profile 可以使用（不过都是实验性的，而非 stable）。</p>
<p>一定程度上这完成了<a href="../gentooinstall_ng/" rel="">之前安装 Gentoo Linux 的文章</a>中的目标:</p>
<blockquote>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
</blockquote>
<p>之前那次我没有实现这些目标，只是使用了 openrc，这次我使用这个 profile 确实实现了这一点，因为 systemd 依赖于 glibc，所以我选择使用 openrc，默认编译工具链就是 clang/llvm，甚至 C++ 标准库使用的也是提供的 <a href="https://libcxx.llvm.org/" target="_blank" rel="noopener noreffer ">libc++</a>，因为默认用 clang/llvm 编译，所以我直接默认就开启了 thinlto。</p>
<h2 id="安装前">安装前</h2>
<p><a href="https://www.etalabs.net/compare_libcs.html" target="_blank" rel="noopener noreffer ">musl libc 的作者提供了一个 musl uClibc glibc dietlibc 之间的比较</a>，musl libc 体积上确实小，不过部分库函数的性能不如 glibc。并且由于 glibc 中存在 GNU 的一些扩展，导致 musl libc 和 glibc 不能完全兼容，一些依赖于 glibc 的闭源发行二进制软件包的程序可能无法运行在 musl libc 上，不过可以尝试使用flatpak 运行。</p>
<p>Chromium 浏览器无法使用 musl libc 编译，electorn 的也无法使用。一定程度上，这迫使一直用 Visual Studio Code 的我开始使用 neovim。</p>
<p>musl libc 支持的 locale 还不是很多：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">  [1]   C
</span></span><span class="line"><span class="cl">  [2]   C.UTF-8
</span></span><span class="line"><span class="cl">  [3]   sr_RS.UTF-8
</span></span><span class="line"><span class="cl">  [4]   cs_CZ.UTF-8
</span></span><span class="line"><span class="cl">  [5]   nb_NO.UTF-8
</span></span><span class="line"><span class="cl">  [6]   de_DE.UTF-8
</span></span><span class="line"><span class="cl">  [7]   sv_SE.UTF-8
</span></span><span class="line"><span class="cl">  [8]   nl_NL.UTF-8
</span></span><span class="line"><span class="cl">  [9]   fr_FR.UTF-8
</span></span><span class="line"><span class="cl">  [10]  fi_FI.UTF-8
</span></span><span class="line"><span class="cl">  [11]  en_GB.UTF-8
</span></span><span class="line"><span class="cl">  [12]  it_IT.UTF-8
</span></span><span class="line"><span class="cl">  [13]  pt_PT.UTF-8
</span></span><span class="line"><span class="cl">  [14]  en_US.UTF-8 *
</span></span><span class="line"><span class="cl">  [15]  de_CH.UTF-8
</span></span><span class="line"><span class="cl">  [16]  es_ES.UTF-8
</span></span><span class="line"><span class="cl">  [17]  pt_BR.UTF-8
</span></span><span class="line"><span class="cl">  [18]  ru_RU.UTF-8</span></span></code></pre></div></div>
<p>这里没有 zh_CN.UTF-8。</p>
<p>musl libc 设置时区的方式也会有所不同，需要在 <strong>/etc/env.d/00musl</strong> 文件中写好 <code>TZ</code> 环境变量。</p>
<p>以上关于 locale 和时区的设置，<a href="https://wiki.gentoo.org/wiki/Musl_usage_guide" target="_blank" rel="noopener noreffer ">Gentoo wiki</a> 都有说明。在 <a href="https://wiki.gentoo.org/wiki/Musl_porting_notes" target="_blank" rel="noopener noreffer ">Gentoo 的另一篇 wiki</a> 记录了一些常见的 musl libc 编译可能遇到的问题（即编译那些一定程度上依赖于 glibc 的软件）。</p>
<h2 id="安装时遇到的问题">安装时遇到的问题</h2>
<p>一开始装完后，进入 grub，进入 openrc 后就没后续了，之后重新装一编就没有遇到这个问题。不好评价这个问题的原因。</p>
<p>不知道是不是我这个内核版本的原因，我用 openrc 从来没有正常关机过，直接死在那里，后来我换到 stable 内核就没有这个问题了。</p>
<p>firefox-115 esr 版本无法正常编译，会报一些错误类似: <code>ld.lld: error: undefined hidden symbol</code>。详情可以参考 GitHub 上 <a href="https://github.com/llvm/llvm-project/issues/79027" target="_blank" rel="noopener noreffer ">LLVM 的 issue</a> 以及 <a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=276746" target="_blank" rel="noopener noreffer ">FreeBSD Bugzilla</a> 上的讨论。而且 <code>rust</code> 编译的部分也会出现问题。</p>
<p>我参考了 FreeBSD 上的解法，首先是 <code>rust</code> 那里，根据 FreeBSD Bugzilla 上的讨论，原因是:</p>
<blockquote>
<p>rust-bindgen uses some tricks to generate bindings for C++ components, but gets confused by some new constructs in libc++ 18 headers, causing it to generate faulty binding code.</p>
</blockquote>
<p>该问题已经被<a href="https://hg.mozilla.org/mozilla-central/rev/9e96d1447f6c" target="_blank" rel="noopener noreffer ">今年 1 月份的补丁</a> 解决，对此我选择不用 esr 版本，用 stable 的版本。</p>
<p>其次对于 undefined hidden symbol 的问题，则是为 firefox 的编译单独创建一个环境。在 <strong>/etc/portage/env/</strong> 目录下创建一个 <strong>compiler-clang-firefox</strong> 文件，文件内容是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">COMMON_FLAGS=&#34;-O2 -march=x86-64-v3 -pipe -fvisibility=hidden -fvisibility-inlines-hidden&#34;
</span></span><span class="line"><span class="cl">CLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CC=&#34;clang&#34;
</span></span><span class="line"><span class="cl">CXX=&#34;clang++&#34;
</span></span><span class="line"><span class="cl">CPP=&#34;clang-cpp&#34;
</span></span><span class="line"><span class="cl">AR=&#34;llvm-ar&#34;
</span></span><span class="line"><span class="cl">NM=&#34;llvm-nm&#34;
</span></span><span class="line"><span class="cl">RANLIB=&#34;
</span></span><span class="line"><span class="cl">llvm-ranlib&#34;</span></span></code></pre></div></div>
<p>也就是 CXXFLAGS 加上 <code>-fvisibility=hidden -fvisibility-inlines-hidden</code></p>
<p>新建 <strong>/etc/portage/package.env/</strong> 目录，在其中新建一个文件写入:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">www-client/firefox compiler-clang-firefox</span></span></code></pre></div></div>
<p>这样就可以使用指定的编译环境编译了。</p>
<p>对于 <a href="https://packages.gentoo.org/packages/dev-libs/darts" target="_blank" rel="noopener noreffer ">dev-libs/darts</a> 来说，由于 <strong>src/lexicon.h</strong> 中的 <code>std::random_shuffle</code> 在 <code>std</code> 中已经不存在，<a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" target="_blank" rel="noopener noreffer ">cppreference</a> 中也可以看到，该函数 从 C++ 17 开始就废除了。所以我给它写了个 patch。</p>
<p>在 <strong>/etc/portage/</strong> 目录下新建一个 <strong>patches</strong> 的文件夹，然后在 <strong>patches</strong> 里新建 <strong>dev-libs/darts</strong> 这两级文件夹，之后把补丁放进去，安装的时候会自动 patch。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl"><span class="gh">diff --git a/src/lexicon.h b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gh">index a2935f4..2a30d1b 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+// clang-format off
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #ifndef DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl"> #define DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">@@ -7,6 +8,7 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span> #include &lt;ctime&gt;
</span></span><span class="line"><span class="cl"> #include &lt;iostream&gt;
</span></span><span class="line"><span class="cl"> #include &lt;limits&gt;
</span></span><span class="line"><span class="cl"><span class="gi">+#include &lt;random&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;vector&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> #include &#34;./mersenne-twister.h&#34;
</span></span><span class="line"><span class="cl"><span class="gu">@@ -58,9 +60,9 @@ class Lexicon {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>   }
</span></span><span class="line"><span class="cl">   // randomize() shuffles keys. Values are not affected.
</span></span><span class="line"><span class="cl">   void randomize() {
</span></span><span class="line"><span class="cl"><span class="gd">-    Darts::MersenneTwister mt(
</span></span></span><span class="line"><span class="cl"><span class="gd">-        static_cast&lt;Darts::MersenneTwister::int_type&gt;(std::time(NULL)));
</span></span></span><span class="line"><span class="cl"><span class="gd">-    std::random_shuffle(keys_.begin(), keys_.end(), mt);
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    std::random_device rd;
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::mt19937 g(rd());
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::shuffle(keys_.begin(), keys_.end(), g);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   void split();
</span></span></code></pre></div></div>
<p>我开头有 <code>// clang-format off</code> 的原因是我的 neovim 会保存时候自动调用 clang-format 格式化。</p>
<p>如果遇到了 Hyprland 0.42 编译失败的情况，报错是 <code>copy_if</code> 等函数没有找到，可以使用我找到的这个 patch</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl">From eb42adc4c090918ad6be9fcb24066da8cdfd9bd0 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Serenity Braesch &lt;Serenity.Braesch@proton.me&gt;
</span></span><span class="line"><span class="cl">Date: Sat, 24 Aug 2024 01:53:08 -0600
</span></span><span class="line"><span class="cl">Subject: [PATCH] Fix missing include needed by clang
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">---
</span></span></span><span class="line"><span class="cl"><span class="gs"></span> src/managers/XCursorManager.cpp | 1 +
</span></span><span class="line"><span class="cl"> 1 file changed, 1 insertion(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">diff --git a/src/managers/XCursorManager.cpp b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gh">index 7fc21a28..1e7ca535 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+#include &lt;algorithm&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;cstring&gt;
</span></span><span class="line"><span class="cl"> #include &lt;dirent.h&gt;
</span></span><span class="line"><span class="cl"> #include &lt;filesystem&gt;
</span></span><span class="line"><span class="cl"><span class="gd">-- 
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>2.44.2
</span></span></code></pre></div></div>
<p>这已经被 <a href="https://github.com/hyprwm/Hyprland/pull/7490" target="_blank" rel="noopener noreffer ">合并到 Hyprland 主线</a> 里了，等下一个版本应该就没这个事情了。</p>
<h2 id="后记">后记</h2>
<p>我没有尝试什么桌面环境，本身我这台计算机的性能就没强到哪去，所以我安装了 sway，还算正常。后来还是用了 Hyprland，xdg-desktop-portal-hyprland 这个软件是 guru 仓库内的，好家伙。</p>]]></description>
</item>
<item>
    <title>NVIDIA 在 GNU/Linux 发行版上和 Wayland 一起工作的技巧</title>
    <link>http://localhost:1313/posts/nvidia_with_linux/</link>
    <pubDate>Fri, 19 Jul 2024 01:21:25 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/nvidia_with_linux/</guid>
    <description><![CDATA[<p>如何在 GNU/Linux 发行版使用 Wayland 的情况下中舒服的使用 NVIDIA 驱动</p>
<h1 id="nvidia-在-gnulinux-发行版上工作的技巧">NVIDIA 在 GNU/Linux 发行版上工作的技巧</h1>
<h2 id="wayland-下-正常启动">Wayland 下 正常启动</h2>
<p>根据 <a href="https://developer.nvidia.com/blog/nvidia-transitions-fully-towards-open-source-gpu-kernel-modules/" target="_blank" rel="noopener noreffer ">NVIDIA Transitions Fully Towards Open-Source GPU Kernel Modules</a> 这篇 NVIDIA 的博客，目前 NVDIIA 准备在后续的版本完全换到 NVIDIA 开源内核模块（对 Turing 更高的版本来说），所以我也跟着使用了 nvidia-open。</p>
<p>对于 Wayland 来说，NVIDIA 需要启用 DRM (<a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager" target="_blank" rel="noopener noreffer ">Direct Rendering Manager</a>) kernel mode setting，即在内核参数中附加 <code>nvidia_drm.modeset=1</code>，这个需要在 <strong>/etc/default/grub</strong> 文件中写明:</p>
<p>在下面这行中添加 <code>nvidia_drm.modeset=1</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;...&#34;</span></span></code></pre></div></div>
<p>之后运行 <code>grub-mkconfig -o /boot/grub/grub.cfg</code>，如果你的 boot 分区和我不一致就去找一下你那个 boot 分区在哪吧。</p>
<p>如果你使用的是 <code>systemd-boot</code>，我并不知道 <code>systemd-boot</code> 该如何附加内核参数，可以去找找相关 wiki。</p>
<p>我在使用 KDE Plasma 6.1.2 + nvidia-open 555.58.02，附加了这个参数仍然无法正常进入桌面，但可以进入 SDDM 登录管理器，后来在 <a href="https://bbs.archlinux.org/viewtopic.php?id=293741" target="_blank" rel="noopener noreffer ">Arch Linux 的论坛中的一个帖子</a>看到了一个解决办法——再多附加一个内核参数 <code>nvidia_drm.fbdev=1</code>。</p>
<p>所以我附加的内容就是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;nouveau.modeset=0 nvidia_drm.modeset=1 nvidia_drm.fbdev=1&#34;</span></span></code></pre></div></div>
<p>这里第一个是为了禁用 nouveau 驱动，我印象中装了 NVIDIA 官方驱动后，默认就是禁用状态，不过我习惯添加这个了。</p>
<p>实际上我还做了一步：之前我发现 NVIDIA 貌似会在窗口管理器启动之后加载，于是我尝试提前将 NVIDIA 启动，即在 <strong>/etc/mkinitcpio.conf</strong> 文件中新加一些模块，类似这样:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)</span></span></code></pre></div></div>
<p>之后执行 <code>mkinitcpio -P</code>，重新生成一遍 initramfs。</p>
<p>如果你是 Gentoo Linux，那么生成 initramfs 的方法可能不是这个，如果和我一样都是使用的 <code>dracut</code> 的话，可以参考 <a href="https://wiki.gentoo.org/wiki/NVIDIA/nvidia-drivers#Dracut_configuration_.28optional.29" target="_blank" rel="noopener noreffer ">Gentoo wiki 中的 nvidia-drivers 部分</a> 和 <a href="https://wiki.archlinux.org/title/Dracut" target="_blank" rel="noopener noreffer ">Arch wiki 中 dracut 条目</a>。</p>
<p>之后直接 <code>sudo dracut /path/to/initramfs</code></p>
<h2 id="正常休眠">正常休眠</h2>
<p>我发现休眠也不好使了，这让我很难受。我的问题是这样：休眠后启动需要花费很长时间，这段时间就是黑屏，终于不是黑屏了之后还不完全显示锁屏界面，我凭借着记忆解锁后，只有那些已打开的窗口能正常显示，连锁屏壁纸都不正常显示，<code>Ctrl + Alt + T</code> 倒还能正常启动终端，我用 <code>journalctl</code> 查看了下系统日志，去 <a href="https://wiki.archlinux.org/title/NVIDIA/Troubleshooting#Black_screen_returning_from_suspend" target="_blank" rel="noopener noreffer ">Arch Wiki 上</a>找到了我的问题，就是日志显示:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">archlinux kernel: NVRM: GPU at PCI:0000:08:00: GPU-926ecdb0-adb1-6ee9-2fad-52e7214c5011
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;</span></span></code></pre></div></div>
<p>这是 Arch Wiki 上提供的，正常这里的 <em>archlinux</em> 应该显示你的主机名，而 PCI 端口等信息也会不一致。</p>
<p>解决办法就是再搞个内核参数以保留 video memory。来源: <a href="https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend" target="_blank" rel="noopener noreffer ">https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend</a></p>
<p>我新建了一个 <strong>/etc/modprobe.d/nvidia-power-management.conf</strong> 文件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">options nvidia NVreg_PreserveVideoMemoryAllocations=1</span></span></code></pre></div></div>
<p><code>NVreg_PreserveVideoMemoryAllocations</code> 也可以作为内核启动时的参数，可以直接写在 <strong>/etc/default/grub</strong> 中，写在内核参数的话需要在前面加上 <code>nvidia</code>: <code>nvidia.NVreg_PreserveVideoMemoryAllocations=1</code>。</p>
<p>之后执行 <code>systemctl enable nvidia-resume.service nvidia-suspend.service nvidia-hibernate.service</code> 并重启即可。</p>
<p>根据 Arch wiki 所述，这个不能和 NVIDIA 早启动一起使用，但实际上我一起用了，感觉没什么问题。</p>
<h2 id="总结">总结</h2>
<p>用 Xorg 保心安，我当初用 Xorg 的时候还没这么些事。</p>]]></description>
</item>
<item>
    <title>为什么你应该(不)使用 GNU/Linux 作为日用操作系统</title>
    <link>http://localhost:1313/posts/whywinorlinux/</link>
    <pubDate>Sat, 13 Apr 2024 11:58:25 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/whywinorlinux/</guid>
    <description><![CDATA[<h1 id="为什么你应该不使用-gnulinux-作为日用操作系统">为什么你应该(不)使用 GNU/Linux 作为日用操作系统</h1>
<hr>
<blockquote>
<ul>
<li>2025 05 02 更新:
<ul>
<li>删除了一些不合适的评价，修改了一些语句不通顺的地方</li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<p>本章关于使用 GNU/Linux 作为个人日用桌面操作系统做了一些评价，主要是从是否应该使用两方面来评价。</p>
<h2 id="为什么不应该使用">为什么不应该使用</h2>
<h3 id="从应用软件的层面来看">从应用软件的层面来看</h3>
<p>直到 2023 年初，腾讯才正式推出 Linux 版本的 QQ，并且开发进度落后于 Windows 和 Mac 端，不过几乎所有发行版都可以使用，不过还会存在一些小 BUG。</p>
<p>直到 2024 年 3 月，腾讯才正式推出 Linux 版本的微信，大致上的该有的功能基本都有，但是原生只能安装在部分国产操作系统上。如果使用的是其他的 Linux 发行版，可以使用 bwrap 套一层绕过检测。</p>
<p>直到 2024 年 10 月，腾讯才推出可以在其他发行版上使用的微信。</p>
<p>网易云音乐已经不再分发官方的 Linux 版本的软件包了，如果需要使用可以选择安装其他的第三方网易云音乐客户端。</p>
<p>Microsoft office 365 没有 Linux 的版本，目前要么用 WPS。要么用 onlyoffice。很多 Linux 用户貌似会用 libreoffice？</p>
<p>只有部分游戏是提供了原生的 Linux 版本（其中有一部分大概是因为 Steam Deck，Steam Deck 上的操作系统 Steam OS 是一个 GNU/Linux 发行版）。不过 Valve 公司开发了 Proton 兼容层以运行只支持 Windows 的游戏。</p>
<p>很多专业的软件可能处于没有 Linux 版本的状态。我又不是任何领域的专业人士，这个还是需要自己去搜集。如果是计算机相关还是有很多平替的，可以参考网站 <a href="https://alternativeto.net/" target="_blank" rel="noopener noreffer ">AlternativeTo</a>，这个网站列出了一些软件的替代品可供参考。</p>
<h3 id="从硬件的层面来看">从硬件的层面来看</h3>
<p>芯片厂商对于 Linux 的支持总是落后于 Windows 的。</p>
<p>对于硬件视频加速来说，Firefox 的支持还可以，Chromium 只是实验性支持（不过貌似也可以用）。这里 Intel 和 AMD 都会使用 VAAPI，NVIDIA 开发了一套 VDPAU 和 NVDEC。不过貌似 VDPAU 的 driver 好久不开发了，NVIDIA 可以安装 nvidia-vaapi-driver，这样可以将 NVDEC 转成 VAAPI 供 Firefox 使用。虽然 nvidia-vaapi-driver 只支持解码，不支持编码，但视频播放器，录屏软件都支持 NVIDIA 原有的编解码格式，所以也还好。</p>
<h3 id="从安全的角度来看">从安全的角度来看</h3>
<p>这个其实不好说，从开源的角度来说，可以审查理论上下限不会太低，但是<a href="https://en.wikipedia.org/wiki/XZ_Utils_backdoor" target="_blank" rel="noopener noreffer ">xz 的投毒事件</a>也可以看出这个安全性也么那么绝对</p>
<blockquote>
<p>今天有人提到 Lasse Collin 对于 xz 项目早就疲惫不堪，Jia Tan 是极少数愿意真正贡献代码的“开发者”，这都是这场悲剧不可或缺的背景条件。</p>
<p>在无人关心的角落，Florian Westphal 最近辞去了内核 netfilter co-maintainer，所以现在 nf 只剩 Pablo Neira Ayuso 一人维护。这可是无数人每天使用的 netfilter。</p>
<p>在无人关心的角落，我最爱的工具之一 strace 依然只由一个捷克人 Dmitry V. Levin 默默维护。</p>
<p>在无人关心的角落，tcpdump/libpcap 在由 the-tcpdump-group 持续更新，其中一位 Denis Ovsienko 的自我介绍是 sometimes I work jobs for living, sometimes I contribute pro bono to free and open source software projects, often I do both，给人一种很孤独的感觉。</p>
<p>在无人关心的角落，bash group 只有三位 active members，其中一位 Bob Proulx 有个古典博客，里面有记录他和妻子的平静生活。</p>
<p>我以前赞美人月神话，但我现在更关心默默无闻的开发者们，就像 vim 作者 Bram Moolenaar 一生没有和任何人建立亲密关系，我只想问，你这一生过得开心吗？</p>
</blockquote>
<p>上面这段话转自<a href="https://www.zhihu.com/question/650826484/answer/3451699113" target="_blank" rel="noopener noreffer ">知乎的一个回答</a></p>
<p>基础开源软件组件有些是几个人的为爱发电。但基础组件一旦出现了安全问题，影响还是挺大的。</p>
<p>从安全角度来讲，</p>
<ul>
<li>你不应该使用原版的 linux-kernel，而是 <a href="https://github.com/anthraxx/linux-hardened" target="_blank" rel="noopener noreffer ">linux-hardened</a>
<ul>
<li>这样的 kernel 使用了基本内核加固补丁集和更多安全相关的编译时配置选项</li>
<li>还应该使用 sysctl 更加细粒度的调整一些安全相关的参数</li>
<li>或者至少应该自己编译内核，删除不必要的 module，选择更安全的内核编译选项。</li>
</ul>
</li>
<li>不应该使用 pulseaudio 这个音频服务，而是使用 pipewire
<ul>
<li>这一点还好，现在应该都在使用 pipewire</li>
</ul>
</li>
<li>应该使用 SELinux 或者 AppArmor 这样的软件更细致的管控文件权限</li>
<li>flatpak 安装的软件，应该使用 flatseal 用于管理软件的权限</li>
<li>使用 sudo 应该只允许用户执行部分软件而不是直接允许执行全部软件</li>
<li>硬盘/文件系统应该加密</li>
<li>grub 这个 bootloader 也应该加密，BIOS 也应该加密</li>
<li>一些文件目录挂载的时候可以禁用读写权限或者执行权限之类的</li>
<li>应该尝试使用 firejail 或者 bwrap 这样的沙盒程序
<ul>
<li>bwrap 貌似比 firejail 更好一些</li>
</ul>
</li>
<li>不应该使用 Xorg，应该使用 Wayland
<ul>
<li>这一点还好，现在大部分的桌面环境都带有 Wayland 的支持，最新版本的 KDE Plasma 和 GNOME 甚至默认就是 Wayland 会话</li>
</ul>
</li>
</ul>
<p>这里还存在一个问题是——是否要选择 <em>使用源码分发的包管理器</em> 的发行版。</p>
<p>这种发行版的软件分发的是其源代码，软件的编译工作是跑在用户的机器上这样的好处是可以控制软件的功能的选择，软件的体积减小，攻击面理论上也会少一些。并且由于编译是跑在用户自己的机器上，你可以开很多为了安全考虑的编译选项。甚至编译工具链也可以选择。</p>
<h2 id="为什么应该使用">为什么应该使用</h2>
<h3 id="从应用软件的角度来看">从应用软件的角度来看</h3>
<p>我认为，终端通过 shell 将系统的细节暴露给用户，使得用户可以做很多事情。尤其 Linux 更大限度的暴露细节。</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Stallman" target="_blank" rel="noopener noreffer ">Richard Stallman</a> 因为认为当时黑客文化式微，发起了 GNU 项目，组织了自由软件基金会并发起了自由软件运动。</p>
<p>我认为这一定程度上影响了一批人，导致开发者会用开源软件并回馈开源社区。</p>
<p>当然这样的大牛不止这一位，比如 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreffer ">Linus Torvalds</a> 技术很强，但是还没有 Richard Stallman 的观点那么偏激（这句话不代表我认为 Richard Stallman 的观点偏激，我只是用偏激作为对比的词汇），Linus Torvalds 也吸引了很多 hacker。</p>
<p>一定程度上，由于开发者目前使用的很多软件都是开源的，开源软件目前互相之间的配合还是可以的，所以作为同样是开源软件的 linux，它们之间的工作会更加顺畅。我认为这一定程度上也算是形成了一个圈子🤪。</p>
<h3 id="从安全的角度来讲">从安全的角度来讲</h3>
<p>单纯从批判商业公司闭源软件可能有自留后门的角度来说，开源软件这样的风险少一些（我并不是说开源软件一定不会有风险）。</p>
<p>我目前认为只有上述这个角度能说明使用 GNU/Linux 作为日用操作系统会比使用诸如 Windows 更加安全了，还有就是可能 Linux 会有一些更加强劲的安全权限控制软件。</p>
<h2 id="结论">结论</h2>
<p>目前应该还是更适合编程开发。</p>
<p>应用程序角度来看，目前 GNU/Linux 最友好的桌面环境应该是 KDE Plasma。目前国内软件大部分都可以在 Linux 找到官方分发的软件包，就算没有也有非官方的开源实现。部分软件没有 Linux 的版本，也许会有替代品，但效果可能会差一些。</p>
<p>硬件上来看，NVIDIA 显卡的支持目前还是不错，不过还是有些小毛病，其他的芯片我不太了解，应该都还好。</p>
<p>安全性还说，默认的还是不行，用户还是需要一定的自设定。我一直认为，如果真的追求安全性，应该装 QubesOS 这个操作系统。</p>
]]></description>
</item>
<item>
    <title>我的 NixOS 安装记录</title>
    <link>http://localhost:1313/posts/nixos_install_rec/</link>
    <pubDate>Sat, 06 Apr 2024 12:59:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/nixos_install_rec/</guid>
    <description><![CDATA[<p>我这次安装 NixOS 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用 WM 用的是 Hyprland</p>
<h1 id="我的-nixos-安装记录">我的 NixOS 安装记录</h1>
<h2 id="背景">背景</h2>
<p>在上个月，我还在使用着 Gentoo Linux，那时我还在想应该可以一直使用下去，结果后来有个组件需要用到 <code>systemd</code>，于是我准备从 <code>openrc</code> 换到 <code>systemd</code>，同时因为 <code>pipewire</code> 也很依赖 <code>systemd</code>，我用 <code>openrc</code> 的同时用 <code>pipewire</code> 总有一点不太得劲。但是我的环境也许有些独特了，或者是我自身实力不够，反正我无法以一种较为优雅的方式从 <code>openrc</code> 换到 <code>systemd</code>。</p>
<p>后来我就想到了 NixOS，曾经我被它那些新鲜的特性搞得不知道从何下手（虽然现在我也不太能下手）。</p>
<h2 id="关于-uefi">关于 UEFI</h2>
<p>我不好评价为什么我改成 <code>grub</code> 之后，<code>grub-install</code> 根本没有写入，我改回了 <code>systemd-boot</code> 就行了。后来我在搜相关问题的时候发现有人指出需要这个设置：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span></span></span></code></pre></div></div>
<p>由于我这个电脑现在是 Windows 11 + NixOS，所以我需要使用 <code>grub</code> 才可以</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">systemd-boot</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">grub</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">device</span> <span class="o">=</span> <span class="s2">&#34;nodev&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">efiSupport</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">useOSProber</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>Hyprland 默认就是 Wayland，但是对于一些尚未完全准备充分的（比如 Chromium 内核的软件）软件需要加 <code>environment.sessionVariables.NIXOS_OZONE_WL = &quot;1&quot;;</code>。但是对于老版本的 Electorn 应用来说，哪怕这个环境变量启用了也于事无补。</p>
<p>众所周知，Chromium 目前启用了 Wayland 之后就需要附加命令行参数的方式才能正常使用输入法。目前我只使用了 Brave 和 vscodium 需要这一点。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="err">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">brave</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-features=UseOzonePlatform&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># &#34;--use-gl=egl&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">overrideAttrs</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">old</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># inherit (pkgs.guangtao-sources.brave) src pname version;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">programs</span><span class="o">.</span><span class="n">vscode</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableExtensionUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">extensions</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">vscode-extensions</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">yzhang</span><span class="o">.</span><span class="n">markdown-all-in-one</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkief</span><span class="o">.</span><span class="n">material-icon-theme</span>
</span></span><span class="line"><span class="cl">    <span class="n">llvm-vs-code-extensions</span><span class="o">.</span><span class="n">vscode-clangd</span>
</span></span><span class="line"><span class="cl">    <span class="n">vadimcn</span><span class="o">.</span><span class="n">vscode-lldb</span>
</span></span><span class="line"><span class="cl">    <span class="n">usernamehw</span><span class="o">.</span><span class="n">errorlens</span>
</span></span><span class="line"><span class="cl">    <span class="n">astro-build</span><span class="o">.</span><span class="n">astro-vscode</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">userSettings</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;window.titleBarStyle&#34;</span> <span class="o">=</span> <span class="s2">&#34;custom&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontFamily&#34;</span> <span class="o">=</span> <span class="s2">&#34;Intel One Mono&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontSize&#34;</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;telemetry.telemetryLevel&#34;</span> <span class="o">=</span> <span class="s2">&#34;off&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.iconTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;material-icon-theme&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.colorTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;Quiet Light&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">package</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">vscodium</span><span class="o">.</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform-hint=auto&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这里可以看到使用的是 vscode，而不是 vscodium，因为 vscodium 还没有这些配置选项，所以就用 vscode，替换掉 vscode 的 package 这样用了。</p>
<p>我将我自己在使用 NixOS 时的 <em>configuration.nix</em> 等文件上传到了 GitHub 仓库中: <a href="https://github.com/suoyuan666/NixOS_configfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/NixOS_configfiles</a></p>]]></description>
</item>
<item>
    <title>我写的 Gentoo Linux 安装指南</title>
    <link>http://localhost:1313/posts/gentooinstall_ng/</link>
    <pubDate>Thu, 28 Mar 2024 20:05:47 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentooinstall_ng/</guid>
    <description><![CDATA[<p>我这次安装 Gentoo Linux 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用的 init 是 openrc，WM 用的是 Hyprland</p>
<h1 id="我写的-gentoo-linux-安装指南">我写的 Gentoo Linux 安装指南</h1>
<h2 id="背景">背景</h2>
<p>我这次安装主要因为 Gentoo Linux 在我看来真的很有趣，并且我想尝试一些新的东西试试，虽然我用 Arch Linux 应该不会遇到滚挂的问题，但我还是有些疑虑。</p>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
<h2 id="profile-选择">profile 选择</h2>
<p>根据 <a href="https://www.gentoo.org/support/news-items/2024-03-22-new-23-profiles.html" target="_blank" rel="noopener noreffer ">Gentoo Linux 在 24 年 3 月发布的 news</a>，profile 17.1 等版本已经过时了，最好应该更新到 23.0。如果你的 stage3 包下载的是 systemd 什么的，那就直接 enable 23.0 的 profile，如果你上来就选择了 openrc 相关的 profile，貌似还是 17.1 的。你需要更换到对应 23.0 中的那些 split-usr 的 profile。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ eselect profile list <span class="p">|</span> grep 23.0
</span></span><span class="line"><span class="cl">  <span class="o">[</span>21<span class="o">]</span>  default/linux/amd64/23.0 <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>22<span class="o">]</span>  default/linux/amd64/23.0/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>23<span class="o">]</span>  default/linux/amd64/23.0/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>24<span class="o">]</span>  default/linux/amd64/23.0/desktop/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>25<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>26<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>27<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>28<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>29<span class="o">]</span>  default/linux/amd64/23.0/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>30<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>31<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>32<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>33<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>34<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>35<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>36<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>37<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>38<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>39<span class="o">]</span>  default/linux/amd64/23.0/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>40<span class="o">]</span>  default/linux/amd64/23.0/llvm/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>41<span class="o">]</span>  default/linux/amd64/23.0/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>42<span class="o">]</span>  default/linux/amd64/23.0/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>43<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>44<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>45<span class="o">]</span>  default/linux/amd64/23.0/split-usr <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>46<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>47<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>48<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>49<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>50<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>51<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>52<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>53<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>54<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>55<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>56<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>57<span class="o">]</span>  default/linux/amd64/23.0/split-usr/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>58<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>59<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>62<span class="o">]</span>  default/linux/amd64/23.0/x32 <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>63<span class="o">]</span>  default/linux/amd64/23.0/x32/systemd <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>64<span class="o">]</span>  default/linux/amd64/23.0/split-usr/x32 <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>69<span class="o">]</span>  default/linux/amd64/23.0/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>70<span class="o">]</span>  default/linux/amd64/23.0/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>71<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>72<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>73<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>74<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>75<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>76<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span></span></span></code></pre></div></div>
<p>为什么这里说 <em>split-usr</em>，在 <a href="https://wiki.gentoo.org/wiki/Merge-usr" target="_blank" rel="noopener noreffer ">merge-usr</a> 这篇 wiki 中指出，merge-usr 对于&gt;=systemd 255 来说是必需的，对于其他 init 系统来说是可选的。23.0 的除了标明 <em>split-usr</em> 默认都是 <em>merge-usr</em> 的，所以如果我目前使用的是 openrc，文件的布局默认就是 <em>split-usr</em>，也就先不更改了。</p>
<p>对我来说，我除了要 enable desktop 的 profile 之外，我还想要 enable hardened 的 profile 以带来安全上的提升。可以在<a href="https://wiki.gentoo.org/wiki/Profile_%28Portage%29#Example_1:_Combining_multiple_profiles_from_the_Gentoo_ebuild_repository" target="_blank" rel="noopener noreffer ">Gentoo Wiki 上关于 profile 的介绍中</a>查看到如何将两个 profile 同时 enable</p>
<p>说起安全性，Gentoo Linux 目前跟的是 LTS 的内核，版本目前在 6.6，不过 6.7 在安全性貌似有很多改进（存疑），所以我选择跟进 stable 的脚步（</p>
<p><a href="https://wiki.gentoo.org/wiki/Project:Hardened" target="_blank" rel="noopener noreffer ">Project:Hardened</a> 这个项目主页介绍了 Gentoo Hardened profile 的一些细节，但是这篇文档质量貌似不是很好。</p>
<h2 id="wm-选择">WM 选择</h2>
<p>使用的是 openrc，但我网络方面依旧选择的是 networkmanager，主要因为习惯了，其他的像 iwd，或者 wpa_supplicant 这样的 WiFi 连接工具我用的都不是很习惯（主要我是要用桌面环境的，这俩我都不知道有 tui 或者 gui 组件）。音频服务方面选择的是 pipewire，我并不想用 pulseaudio，所以只能选择 pipewire 了。根据<a href="https://wiki.gentoo.org/wiki/PipeWire" target="_blank" rel="noopener noreffer ">Gentoo Wiki 关于 PipeWire 的描述</a>，可以看出这东西还有点依赖 systemd，难绷。虽然 wiki 中关于 openrc 也给了使用它的方法。</p>
<p>DE 方面，我本来是想用 GNOME 的，虽然 GNOME 依赖于 systemd，但是 Gentoo Linux 做了一些工作使得可以在 openrc 上使用 GNOME，但是 GNOME 需要编译好多软件，我真的受不了了。我基于 “我真的喜欢用 Wayland” 的心理，选择使用了 Hyprland，WM 向来要比 DE 默认少装很多软件。</p>
<p>关于 Hyprland 的启动，我还是推荐 <code>dbus-run-session Hyprland</code> 这样启动，而不是直接 <code>Hyprland</code>。状态栏我是用的是 waybar，通知组件用的是 mako，程序启动器使用的是 wofi，Terminal 使用的是 kitty。输入法使用的是 fcitx5。</p>
<p>在 GNOME 中，使用 chromium 内核的软件以 Wayland 启动的话就无法使用中文输入法，需要附加 <code>--gtk-version=4</code> 这个 flag 才能使用，但是 Electron 的应用目前还不支持 gtk4 导致附加了 flag 也不好使。</p>
<p>但是在 Hyprland 中就没有这个问题，就像是 KDE Plasma 中也不会存在这个问题一样。只需要附加 <code>--enable-wayland-ime</code> 这个 flag 就可以了。</p>
<p>Chromium 内核的软件以 Wayland 启动的话会很模糊，附加 <code>--use-gl=egl</code> 就好了。</p>
<p>Hyprland 没有太好的主题设置软件，我选择的是使用 <code>gsettings</code> 这个软件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface font-name
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Noto Sans Mono 11&#39;</span>
</span></span><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface icon-theme
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Tela&#39;</span></span></span></code></pre></div></div>
<p>如果把 <code>get</code> 改成 <code>set</code> 就是设置字体和主题了。</p>]]></description>
</item>
<item>
    <title>常用软件记录</title>
    <link>http://localhost:1313/posts/dailytools/</link>
    <pubDate>Fri, 01 Mar 2024 03:42:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/dailytools/</guid>
    <description><![CDATA[<p>自己常用软件的记录及点评</p>
<h1 id="常用软件记录">常用软件记录</h1>
<p>这里会记录尝试用的软件以便于后续使用，平台上会分为 Windows，GNU/Linux和 Android，Windows 用的不多，因为和 GNU/Linux 重了的话我会在GNU/Linux 体现出来。</p>
<h2 id="windows">Windows</h2>
<p><a href="https://www.nvidia.com/en-us/geforce/broadcasting/broadcast-app/" target="_blank" rel="noopener noreffer ">NVIDIA Broadcast</a> 这个软件仅在 Windows 上可用，虽然我会给相机和麦克风开一些功能，不过目前也不太能用到说实话。</p>
<p><a href="https://www.vmware.com/" target="_blank" rel="noopener noreffer ">VMware</a> 分为 <a href="https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html" target="_blank" rel="noopener noreffer ">VMware Workstation Player</a> 和 <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener noreffer ">VMware Workstation Pro</a>。前者免费使用，<del>后者需要付费，虽然也可以知道体验一会的方法就是了</del> VMware Workstation Pro 现在已经免费分发了。这是一个体验不错的虚拟机平台，提供了 Windows 版本和 Linux 版本，但是我也只是在 Windows 中使用它了。</p>
<p><a href="https://visualstudio.microsoft.com/" target="_blank" rel="noopener noreffer ">Visual Studio</a> 是 Windows 上体验还不错的 IDE，就是对我来说功能有些繁杂了🫠。不过我在 Windows 上目前还不太习惯用这个 IDE，还是用 vscode 连 WSL 上的 Linux 虚拟机。</p>
<p><a href="https://github.com/marticliment/WingetUI" target="_blank" rel="noopener noreffer ">WingetUI</a> 是一个图形化的 winegt 管理软件，不过它还支持 pip，npm 什么的。不过我主要用来更新 winget 的包。</p>
<p><a href="https://www.voidtools.com/" target="_blank" rel="noopener noreffer ">Everything</a> 是一个高效地文件搜集工具，支持很多高级搜集的玩法，不过我一般都输入文件名来搜（逃</p>
<p><a href="https://geekuninstaller.com/" target="_blank" rel="noopener noreffer ">Geek Uninstaller</a> 是一个更有效的卸载软件的解决方案，可以在卸载后检索是否有残留的文件或注册表。</p>
<p><a href="https://github.com/localsend/localsend" target="_blank" rel="noopener noreffer ">LocalSend</a> 是用于局域网内互相传文件的，支持 Windows，macOS，Linux，Android 和 iOS。我没有 iOS 和 macOS的设备，所以很多时候我的需求都是 Windows 和 Android，或者是 Linux 和 Android 之间传文件，实际上这种情景可以用 <a href="https://developer.android.com/tools/adb" target="_blank" rel="noopener noreffer ">adb</a> 来传文件，我曾经使用 Arch Linux 的时候，还是习惯于使用 <code>adb</code> 传文件的，但是在 Windows 下，我总是不习惯使用终端操作，所以会使用这个软件来传文件。</p>
<h2 id="gnulinux">GNU/Linux</h2>
<h3 id="browser">Browser</h3>
<p><a href="https://www.mozilla.org/en-US/firefox/browsers/" target="_blank" rel="noopener noreffer ">FireFox</a> 应该大多数人用的发行版的软件库中都会有自己构建的版本，也不用从这里下载了。我一般是搭配 <a href="https://github.com/arkenfox/user.js" target="_blank" rel="noopener noreffer ">Arkenfox</a> 项目和一些插件（如<a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/" target="_blank" rel="noopener noreffer ">Ublock Origin</a>）使用。作为一个难得非 Chromium 内核的项目，FireFox 到现在总有一种落日余晖的样子，<a href="https://www.mozilla.org/zh-CN/about/manifesto/" target="_blank" rel="noopener noreffer ">Mozilla 宣言</a>还是说的很好的，上次看到类似的还是<a href="https://en.wikipedia.org/wiki/A_Declaration_of_the_Independence_of_Cyberspace" target="_blank" rel="noopener noreffer ">网络独立宣言</a>。不过 FireFox 在安全性方面倒貌似一直在被吐槽的样子：比如这个关于 FireFox 和 Chromium 对比的文章：<a href="https://madaidans-insecurities.github.io/firefox-chromium.html" target="_blank" rel="noopener noreffer ">Firefox and Chromium</a>；和 GrapheneOS 中对自己在浏览器选择的叙述：<a href="https://grapheneos.org/usage#web-browsing" target="_blank" rel="noopener noreffer ">Usage guide | GrapheneOS: Web browsing</a>。不过在 GNU/Linux 中，Firefox 在 Wayland 桌面协议下的运行还基本正常，基于 Chromium 内核的浏览器现在默认还不是 Wayland。不过貌似 Mozilla 的工作重心已经不再是 Firefox 了？</p>
<p><a href="https://github.com/brave/brave-browser" target="_blank" rel="noopener noreffer ">Brave</a> 是基于 Chromium 内核做的浏览器，内置 Brave 自己做的 <a href="https://github.com/brave/adblock-rust" target="_blank" rel="noopener noreffer ">adblock-rust</a>，并且还做了很多其他对增强隐私方面的改动。在<a href="https://privacytests.org/" target="_blank" rel="noopener noreffer ">一个浏览器默认情况下的隐私保护比较</a>中可以发现 Brave 的隐私保护做的比其他浏览器要好一些。不过 Brave 也被吐槽过（比如把网站显示的别人家的广告替换成自家的，虽然这是它盈利的手段）。<a href="https://news.ycombinator.com/item?id=26332183" target="_blank" rel="noopener noreffer ">Hacker News的讨论中</a>中有提到一些。还有就是所有基于 Chromium 内核的软件在 Wayland 上都会存在一点点问题，比如默认没有使用 Wayland，使用了的话可能窗口缩放不太对并且 Fcitx5 使用不了等。</p>
<h3 id="develop-tools">Develop Tools</h3>
<p><a href="https://github.com/VSCodium/vscodium" target="_blank" rel="noopener noreffer ">vscodium</a> 去除了 Microsoft 加入的遥测跟踪等在他们看来不 FOSS 的东西，因此它的插件商店下载不到微软官方出的一些插件（比如 Remote-ssh 等），微软官方的 C/C++ 这个插件虽然无法从插件商店下载到，但可以手动从 <a href="https://github.com/microsoft/vscode-cpptools" target="_blank" rel="noopener noreffer ">GitHub 上下载插件</a>，然后导入到 vscodium 中正常使用。但是 Remote-ssh 导入后是无法使用的。我使用的 <a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd" target="_blank" rel="noopener noreffer ">clangd</a> 替代微软官方的 cpptools，结果本地的 <code>clangd</code> 所在目录不被 vscodium 检测，我还得在设置里手动指定是 <em>/usr/lib/llvm/17/bin/clangd</em>。不过 cpptools 在我认知中还是有东西的，比如对 GDB 的支持 😇，所以如果用 <code>clangd</code> 的话可以尝试全面拥抱 clang/llvm，用 <code>lldb</code>（逃。而且 cpptools 还支持对 Doxygen 注释格式的解析，clangd 还不支持这个功能。</p>
<p><a href="https://github.com/rizsotto/Bear" target="_blank" rel="noopener noreffer ">Bear</a> 可以生成一个 <code>clang</code> 工具链解析的编译记录文件。用来让 vscode 的 <code>clangd</code> 解析并理清项目的编译依赖关系。</p>
<p><a href="https://github.com/strace/strace" target="_blank" rel="noopener noreffer ">strace</a> 可以 trace 系统调用，虽然我其实用的不多，不过偶尔还是有些用处的（比如我曾经好奇 <code>neofetch</code> 是从哪里 fetch 到这些信息的，但是我又懒得去看源代码，于是就 trace 了一下 neofetch 的系统调用，看看它 open 了哪些文件）。相应的还有 <code>ltrace</code>，<code>ftrace</code> 什么的，前者可以 trace 动态链接库函数的调用，后者 trace 的是内核函数好像。不过这俩个我就完全没用过了。</p>
<p><a href="https://www.qemu.org/" target="_blank" rel="noopener noreffer ">QEMU</a> 基本大多数使用的发行版的软件包仓库都会自带。通常会搭配 <a href="https://libvirt.org/" target="_blank" rel="noopener noreffer ">libvirt</a> 和 <a href="https://virt-manager.org/" target="_blank" rel="noopener noreffer ">virt-manager</a> 来使用，libvirt 可以更好的管理 QEMU，而 virt-manager 则作为libvirt 的前端供用户使用。</p>
<h3 id="video--music">Video &amp; Music</h3>
<p><a href="https://www.smplayer.info/" target="_blank" rel="noopener noreffer ">SMPlayer</a> 是 <code>mpv</code> 的前端，界面不好看，不过我播放视频的时候都全屏播放了，也就太没在意这个。</p>
<p><a href="https://github.com/qier222/YesPlayMusic" target="_blank" rel="noopener noreffer ">YesPlayMusic</a> 是一个很漂亮的网易云第三方客户端，去除了一些社区相关的功能。它集成了一些第三方音乐源，可以播放其他源的音乐。不过它使用了 Electorn，如果介意的话，可以选择使用其他的软件。</p>
<p><a href="https://github.com/listen1/listen1_desktop" target="_blank" rel="noopener noreffer ">listen1_desktop</a> 是一个那种全网综合的音乐播放器，就是界面我感觉不咋好看。</p>
<h3 id="input-method">Input Method</h3>
<p><a href="https://github.com/fcitx/fcitx5" target="_blank" rel="noopener noreffer ">fcitx5</a> 是一个输入法框架。都什么年代了还在用 fcitx4，都来用 fcitx5（bushi）。fcitx5 我会搭配 <a href="https://github.com/fcitx/fcitx5-rime" target="_blank" rel="noopener noreffer ">fcitx5-rime</a> 使用，因为我倾向于用<a href="https://github.com/iDvel/rime-ice" target="_blank" rel="noopener noreffer ">雾凇拼音</a>。不过很多人喜欢使用 fcitx + 搜狗输入法，但是搜狗仍不支持 fcitx5。</p>
<p><a href="https://github.com/ibus/ibus" target="_blank" rel="noopener noreffer ">ibus</a> 是 GNOME 默认使用的输入法框架，目前我使用 GNOME 这个桌面环境的时候就会用 ibus，一般也是搭配 <a href="https://github.com/rime/ibus-rime" target="_blank" rel="noopener noreffer ">ibus-rime</a> 使用，理由同上。</p>
<h3 id="misc">Misc</h3>
<p><a href="https://keepassxc.org/" target="_blank" rel="noopener noreffer ">KeePassXC</a> 是一个本地存储的密码管理器，我升级到 KDE Plasma 6 之后居然是无法正常以 Wayland 协议运行这个它，不过好像附加了 <code>QT_WAYLAND_FORCE_DPI=physical</code> 环境变量就可以？</p>
<p><a href="https://www.flatpak.org" target="_blank" rel="noopener noreffer ">flatpak</a> 是个好东西，我有一些软件就是从 flathub 上搜索有没有，然后用 flatpak 下载的（比如wemeet，linuxqq）。使用的话最好可以再下载 <a href="https://flathub.org/apps/com.github.tchx84.Flatseal" target="_blank" rel="noopener noreffer ">Flatseal</a>，可以对 flatpak 上下载软件进行更加精细的权限控制。</p>
<p><a href="https://github.com/intel/intel-one-mono" target="_blank" rel="noopener noreffer ">IntelOne Mono</a> 是一个在我看来很酷的字体🤗，它用它鲜明的形体在我心中占据了很大的位置，很长一段时间，我看其他字体没有那样鲜明的花括号总感觉不是很得劲。</p>
<p><a href="https://gitlab.gnome.org/GNOME/gnome-tweaks" target="_blank" rel="noopener noreffer ">gnome-tweaks</a> 对于使用 GNOME 的我来说，真的是个好软件🥹。GNOME 自带的设置（<code>gnome-control-center</code>）并不可以分数缩放，我只能使用 <code>gnome-tweaks</code>，大多数发行版都是 <code>gnome-tweaks</code> 这个软件包名，不过有的可能前面带个 <code>gnome3-</code>。</p>
<p><a href="https://github.com/lsd-rs/lsd" target="_blank" rel="noopener noreffer ">lsd</a> 是更加 modern 的 ls 的实现，使用的 Rust 编写，在 list 的同时还可以显示图标，而且还是彩色输出，而且文件大小还会带单位输出。</p>
<h3 id="gnome-extensions">GNOME extensions</h3>
<p><a href="https://extensions.gnome.org/extension/615/appindicator-support/" target="_blank" rel="noopener noreffer ">AppIndicator and KStatusNotifierItem Support</a> 实现了 GNOME 上的应用托盘，应用托盘还是有点必要的（目前在我看来是这样）。</p>
<p><a href="https://extensions.gnome.org/extension/3193/blur-my-shell/" target="_blank" rel="noopener noreffer ">Blur my Shell</a> 可以让 gnome-shell 启用模糊效果，还是有些意思的。</p>
<p><a href="https://extensions.gnome.org/extension/517/caffeine/" target="_blank" rel="noopener noreffer ">Caffeine</a> 可以让你 ban 掉你的屏保一段时间，生活中总会偶尔遇到希望长时间不要休眠，但是自身还不想老操作该电脑以防止休眠这样的情况，我自认为就是在这时候会用到。</p>
<p><a href="https://extensions.gnome.org/extension/3088/extension-list/" target="_blank" rel="noopener noreffer ">Extension List</a> 可以让你直接在屏幕右上角启用插件，或者进入插件的设置等等。</p>
<p><a href="https://extensions.gnome.org/extension/1319/gsconnect/" target="_blank" rel="noopener noreffer ">GSConnect</a> 是 GNOME 上的 KDE connect 的完全实现。</p>
<p><a href="https://extensions.gnome.org/extension/261/kimpanel/" target="_blank" rel="noopener noreffer ">Input Method Panel</a>实现了一套输入法面板，如果你和我一样在 Wayland 下的GNOME中使用着 Fcitx5 的话就可以用到这个了，而且这个装完之后，托盘的图标也跟着改了，挺不错的。</p>
<h2 id="android">Android</h2>
<h3 id="browser-1">Browser</h3>
<p><a href="https://f-droid.org/packages/us.spotco.fennec_dos/" target="_blank" rel="noopener noreffer ">Mull</a> 这个浏览器基于 FireFox，不过内置了 <a href="https://github.com/arkenfox/user.js" target="_blank" rel="noopener noreffer ">Arkenfox</a> 项目，加强了 Firefox 的隐私保护功能，搭配 <a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/" target="_blank" rel="noopener noreffer ">Ublock Origin</a> 更好一些。</p>
<p><a href="https://brave.com/" target="_blank" rel="noopener noreffer ">Brave</a> 是基于 Chromium 内核做的浏览器，内置 Adblock 还是什么拦截广告的插件，效果还不错。有些评价参见 GNU/Linux 中对 Brave 的描述。</p>
<p><a href="https://github.com/bromite/bromite" target="_blank" rel="noopener noreffer ">Bromite</a> 是基于 Chromium 内核做的，集成了广告拦截和对隐私保护做了一些改动，具体可以看这个项目的 README。</p>
<h3 id="2fa">2FA</h3>
<p><a href="https://github.com/beemdevelopment/Aegis" target="_blank" rel="noopener noreffer ">Aegis</a> 是一个 2FA 客户端，不过我也不常用双因素验证。</p>
<h3 id="rootxposed">Root/Xposed</h3>
<p><a href="https://github.com/topjohnwu/Magisk" target="_blank" rel="noopener noreffer ">Magisk</a> 很出名了，也就不过多介绍了。</p>
<p><a href="https://github.com/tiann/KernelSU" target="_blank" rel="noopener noreffer ">KernelSU</a> 的优点在于使用GKI2内核的手机基本可以从 GitHub Release 页面上下载打好 patch 的 boot 镜像从而直接刷入，不同于 Magisk 的是，ksu 运行在内核态，貌似可以更好的隐藏自身，并且不像 Magisk 那样不打 hide 就暴露 su 给对方，ksu 是选择给特定应用权限，并且可以通过 <a href="https://kernelsu.org/zh_CN/guide/app-profile.html" target="_blank" rel="noopener noreffer ">App Profile</a> 更加细致化权限的授予。不过 Magisk 有集成的 Zygisk 和 system-hosts，而 ksu 需要模块才能拥有对应的功能：<a href="https://github.com/Dr-TSNG/ZygiskNext" target="_blank" rel="noopener noreffer ">ZygiskNext</a> 和 <a href="https://github.com/symbuzzer/systemless-hosts-KernelSU-module" target="_blank" rel="noopener noreffer ">Ownersystemless-hosts-KernelSU-module </a>。ksu 还自带一个救砖功能：<a href="https://kernelsu.org/zh_CN/guide/rescue-from-bootloop.html" target="_blank" rel="noopener noreffer ">救砖</a>。<del>不过可惜的是 ZygiskNext 项目已经停更了。</del>（ZygiskNext 目前是发行闭源二进制包）</p>
<p><a href="https://github.com/LSPosed/LSPosed" target="_blank" rel="noopener noreffer ">LSPosed</a> 是一个现代化的 xposed 框架，lsp 本身也很出名了，可惜停更了。</p>
<h3 id="im">IM</h3>
<p><a href="https://weixin.qq.com/" target="_blank" rel="noopener noreffer ">微信</a>这个B软件我是真不想用，但又不得不用。</p>
<p><a href="https://im.qq.com/index/" target="_blank" rel="noopener noreffer ">QQ</a> 这个B软件同样也不想用，但是也还是得用。</p>
<p><a href="https://github.com/Telegram-FOSS-Team/Telegram-FOSS" target="_blank" rel="noopener noreffer ">Telegram-FOSS</a> 采用了更加 FOSS 的组件构建了一个 Telegram 的客户端。这个软件可以当一个云盘用还是可以的，虽然这个B软件也很扯淡。我倒希望能用一个和个人信息无关的IM，可惜没什么人用啊，虽然可能很多人用了之后就应该会变成个人信息相关了。</p>
<h3 id="anti-ad">Anti-Ad</h3>
<p><a href="https://github.com/AdAway/AdAway" target="_blank" rel="noopener noreffer ">AdAway</a> 是一个可以使用 root 权限下替换 hosts 文件来做到拦截广告的目的的软件，它同样有个 VPN 模式，不过我没用过，说起 VPN 模式，<a href="https://github.com/celzero/rethink-app" target="_blank" rel="noopener noreffer ">RethinkDNS</a> 就是 VPN 模式的，看起来蛮不错，可惜我的 VPN 模式已经有软件了。adaway 的功能主要就是替换 hosts 文件，不过 hosts 文件必须写死了 URL，无法做到匹配子域名等功能，对于 anti-ad 这样的软件来说，还是很难绷的。</p>
<p><a href="https://github.com/lihenggui/blocker" target="_blank" rel="noopener noreffer ">blocker</a> 是一款操作 Android 应用程序四大组件的程序，比如一些广告，分析的服务直接可以禁掉。感觉 <a href="https://github.com/MuntashirAkon/AppManager" target="_blank" rel="noopener noreffer ">Appmanager</a> 也能做到这一点，但是不像这位提供了规则仓库用于直接统一杀掉。</p>
<h3 id="app-store">App store</h3>
<p><a href="https://github.com/NeoApplications/Neo-Store" target="_blank" rel="noopener noreffer ">Neo-Store</a> 是一个第三方的 F-Droid 客户端，它颜值上要更加好看，并且还支持后台安装。</p>
<p><a href="https://f-droid.org/packages/com.aurora.store/" target="_blank" rel="noopener noreffer ">Aurora Store</a> 是一个第三方的 Google Play 客户端，支持匿名浏览。</p>
<p><a href="https://github.com/ImranR98/Obtainium" target="_blank" rel="noopener noreffer ">Obtainium</a> 是一个使用类似 RSS 订阅的方式管理各种不同软件来源的软件。比如 GitHub，GitLab，Codeberg 等上面的 Android 软件仓库都可以跟踪管理。Neo-Store 上的软件有的和 GitHub Release 上发布新版本会隔一段时间，所以我倾向于使用 Obtainium 去跟踪开源软件的更新，除非它只能在 F-Droid 上下载。</p>
<h3 id="video">Video</h3>
<p><a href="https://github.com/InfinityLoop1308/PipePipe" target="_blank" rel="noopener noreffer ">PipePipe</a> 可以匿名播放 Youtube/BiliBili 等网站的视频，也可以关注那些 up主，可以将 Youtube 和 BiliBili 上的视频收藏到一个收藏夹里，可以的。但无法看到动态，这导致了我不怎么太使用这个软件。</p>
<p><a href="https://github.com/mpv-android/mpv-android" target="_blank" rel="noopener noreffer ">mpv-android</a> 是使用 <code>libmpv</code> 的视频播放器，由于我在使用 GNU/Linux 发行版的时候基本都会选择使用 <code>mpv</code> 作为视频播放器的后端，所以手机 Android 上也如此了。</p>
<h3 id="misc-1">Misc</h3>
<p><a href="https://sr.rikka.app/zh-hans/download/" target="_blank" rel="noopener noreffer ">StorageRedirect</a>。存储空间隔离就应该被 Android 实现成为自带的功能。貌似 <a href="https://grapheneos.org/" target="_blank" rel="noopener noreffer ">GrapheneOS</a> 的 <a href="https://grapheneos.org/usage#storage-scopes" target="_blank" rel="noopener noreffer ">storage-scopes</a> 实现了类似的功能，可惜GrapheneOS 是给 Google Pixel 构建的，我目前还没用过 Google Pixel。</p>
<p><a href="https://appops.rikka.app/zh-hans/download/" target="_blank" rel="noopener noreffer ">App Ops</a> 是一个很精细的权限控制软件，系统软件或是用户软件的权限都可以被调控，希望也可以成为默认的隐私控制面板。</p>
<p><a href="https://kdeconnect.kde.org/" target="_blank" rel="noopener noreffer ">KDE Connect</a> 是一个手机和电脑联动的软件，从名字也能看出，这是 KDE Plasma 的东西。GNOME有个插件 <a href="https://extensions.gnome.org/extension/1319/gsconnect/" target="_blank" rel="noopener noreffer ">GSConnect</a> 旨在实现一个 GNOME 上的 KDE connect。</p>
<h3 id="input-method-1">Input Method</h3>
<p><a href="https://github.com/fcitx5-android/fcitx5-android" target="_blank" rel="noopener noreffer ">fcitx5-android</a> 是 Fcitx5 在 Android 上的移植。我要用的话一般搭配 RIME 插件，然后使用<a href="https://github.com/iDvel/rime-ice" target="_blank" rel="noopener noreffer ">雾凇拼音</a>，不过这样的体验不如 PC 端的。</p>]]></description>
</item>
</channel>
</rss>
