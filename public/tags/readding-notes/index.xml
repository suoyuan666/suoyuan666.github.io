<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Readding Notes - Tag - 索元的博客</title>
        <link>http://localhost:1313/tags/readding-notes/</link>
        <description>Readding Notes - Tag - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Sun, 30 Oct 2022 03:42:51 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/readding-notes/" rel="self" type="application/rss+xml" /><item>
    <title>程序员的自我修养：静态链接</title>
    <link>http://localhost:1313/posts/op_power-static-link/</link>
    <pubDate>Sun, 30 Oct 2022 03:42:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/op_power-static-link/</guid>
    <description><![CDATA[<p>程序员的自我修养：链接、装载与库这本书的读书笔记</p>
<h1 id="编译和链接">编译和链接</h1>
<h2 id="被隐藏的过程">被隐藏的过程</h2>
<p>编译器利用源代码输出与之对应的可执行文件可以被分解为四个步骤：预处理、汇编、编译和链接。</p>
<h3 id="预处理">预处理</h3>
<p>预处理阶段处理那些预处理指令（以#开头的那些）。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ gcc -E hello.c -o hello.i</span></span></code></pre></div></div>
<p>处理规则如下：</p>
<ul>
<li>将所有的#define删除，展开所有的宏定义。</li>
<li>处理所有的条件预处理指令，如#if、#ifdef、#elif、#else、#endif</li>
<li>处理#include预处理指令，将包含的文件插入该预编译指令的位置。</li>
<li>删除所有的注释</li>
<li>添加行号和文件名标识，以便编译时产生调试用的行号信息和用于报错</li>
<li>保留所有的#program指令</li>
</ul>
<h3 id="编译">编译</h3>
<p>编译就是将处理完的文件进行一系列的词法分析、语法分析及优化后生成对应的汇编代码文件</p>
<h3 id="汇编">汇编</h3>
<p>汇编就是将汇编代码转化成机器代码</p>
<h3 id="链接">链接</h3>
<p>链接就是将引入的头文件链接到一起</p>
<h2 id="编译器的作为">编译器的作为</h2>
<p>假设源代码里有一句：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">array</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">6</span><span class="p">);</span></span></span></code></pre></div></div>
<h3 id="词法分析">词法分析</h3>
<p>源代码被输入到扫描器，运用一种类似于有限状态机的算法将源代码的字符序列分割成一系列的记号。</p>
<p>词法分析产生的记号一般可以被分为如下几类：关键字、标识符、字面量（数字、字符串等）和特殊符号（如加号、等号）。识别的同时，扫描器也完成了其他工作。比如说将标识符存入符号表，数字、字符串常量存放到文字表等，以备后续步骤使用。</p>
<p>上述语句被分析后产生16个记号：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">记号</th>
          <th style="text-align: center">类型</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">array</td>
          <td style="text-align: center">标识符</td>
      </tr>
      <tr>
          <td style="text-align: center">[</td>
          <td style="text-align: center">左方括号</td>
      </tr>
      <tr>
          <td style="text-align: center">index</td>
          <td style="text-align: center">标识符</td>
      </tr>
      <tr>
          <td style="text-align: center">]</td>
          <td style="text-align: center">右方括号</td>
      </tr>
      <tr>
          <td style="text-align: center">=</td>
          <td style="text-align: center">赋值</td>
      </tr>
      <tr>
          <td style="text-align: center">(</td>
          <td style="text-align: center">左圆括号</td>
      </tr>
      <tr>
          <td style="text-align: center">index</td>
          <td style="text-align: center">标识符</td>
      </tr>
      <tr>
          <td style="text-align: center">+</td>
          <td style="text-align: center">加号</td>
      </tr>
      <tr>
          <td style="text-align: center">4</td>
          <td style="text-align: center">数字</td>
      </tr>
      <tr>
          <td style="text-align: center">)</td>
          <td style="text-align: center">右圆括号</td>
      </tr>
      <tr>
          <td style="text-align: center">*</td>
          <td style="text-align: center">乘号</td>
      </tr>
      <tr>
          <td style="text-align: center">(</td>
          <td style="text-align: center">左圆括号</td>
      </tr>
      <tr>
          <td style="text-align: center">2</td>
          <td style="text-align: center">数字</td>
      </tr>
      <tr>
          <td style="text-align: center">+</td>
          <td style="text-align: center">加好</td>
      </tr>
      <tr>
          <td style="text-align: center">6</td>
          <td style="text-align: center">数字</td>
      </tr>
      <tr>
          <td style="text-align: center">)</td>
          <td style="text-align: center">右圆括号</td>
      </tr>
  </tbody>
</table>
<h3 id="语法分析">语法分析</h3>
<p>语法分析将对扫描器产生的记号进行语法分析，从而产生语法树。整个过程采用上下文无关语法的分析手段。</p>
<p>语法分析器生成的语法数就是以表达式为节点的树：</p>
<p></p>
<p>在这个阶段，运算符的优先级也就确认下来了，如果表达式不合法，编译器会报告语法分析阶段的错误。</p>
<h3 id="语义分析">语义分析</h3>
<p>编译器能分析的是静态语义，即能够在编译阶段确定的语义。经过语义分析阶段后，整个语法树的表达式都被标识了类型，如果有些类型需要做隐式转换，语义分析程序就会在语法树上插入相应的转换节点。</p>
<h3 id="中间代码生成">中间代码生成</h3>
<p>源代码级别优化器往往会将整个语法树转换成中间代码。常见的中间代码有三地址码、P代码</p>
<p>这个时候上述表达式的2+6就可以直接被优化成8</p>
<h3 id="目标代码生成与优化">目标代码生成与优化</h3>
<p>对于下边这个例子：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">movl</span>	<span class="no">index</span><span class="p">,</span> <span class="nv">%ecx</span>
</span></span><span class="line"><span class="cl"><span class="nf">addl</span>	<span class="no">$4</span><span class="p">,</span> <span class="nv">%ecx</span>
</span></span><span class="line"><span class="cl"><span class="nf">mull</span>	<span class="no">$8</span><span class="p">,</span> <span class="nv">%ecx</span>
</span></span><span class="line"><span class="cl"><span class="nf">movl</span>	<span class="no">index</span><span class="p">,</span> <span class="nv">%eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">movl</span>	<span class="nv">%ecx</span><span class="p">,</span> <span class="no">array</span><span class="p">(,</span> <span class="nv">%eax</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span></span></span></code></pre></div></div>
<p>最终可以被优化为：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">movl</span>	<span class="no">index</span><span class="p">,</span> <span class="nv">%edx</span>
</span></span><span class="line"><span class="cl"><span class="nf">leal</span>	<span class="mi">32</span><span class="p">(,</span> <span class="nv">%edx</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="nv">%eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">movl</span>	<span class="nv">%eax</span><span class="p">,</span> <span class="no">array</span><span class="p">(,</span> <span class="nv">%edx</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span></span></span></code></pre></div></div>
<h2 id="静态链接">静态链接</h2>
<p>链接的过程包括地址和空间分配、符号决议和重定位这些步骤。符号决议有时也叫地址绑定等。静态链接的基本过程就是把编译器编译成的目标文件（扩展名一般为.o或.obj）和库一起链接形成最后的可执行文件。</p>
<p>链接器要对源文件未定义的变量、函数的地址加以修正。编译器会把它们的地址先设为0，等待链接器链接的时候修正地址，这个过程就是重定向。</p>
<h1 id="目标文件">目标文件</h1>
<h2 id="目标文件的格式">目标文件的格式</h2>
<p>Windows是PE，Linux是ELF。PE/ELF都是COFF格式的变种</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">ELF文件类型</th>
          <th style="text-align: left">说明</th>
          <th style="text-align: center">示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">可重定位文件 (Relocatable File)</td>
          <td style="text-align: left">这类文件包含了代码和数据，可以被用来链接成可执行文件或共享目标文件。静态链接库也归为这一类</td>
          <td style="text-align: center">Linux 的<code>.o</code>，Windows的<code>.obj</code></td>
      </tr>
      <tr>
          <td style="text-align: left">可执行文件 (Executable File)</td>
          <td style="text-align: left">这类文件包含了可以直接执行的程序</td>
          <td style="text-align: center">Windows下的<code>.exe</code>，Linux下<code>/bin/bash</code>文件</td>
      </tr>
      <tr>
          <td style="text-align: left">共享目标文件 (Shared Object File)</td>
          <td style="text-align: left">这类文件包含了代码和数据，可以在两种情况下使用。一种是链接器可以使用这种文件跟其他可重定位文件和共享目标文件链接，产生新的目标文件。第二种是动态链接器可以将几个这种共享目标文件与可执行文件结合，作为进程映像的一部分来允许</td>
          <td style="text-align: center">Linux的<code>.so</code>比如/usr/lib/libc.so，Windows下的DLL</td>
      </tr>
      <tr>
          <td style="text-align: left">核心转储文件 (Core Dump File)</td>
          <td style="text-align: left">当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件</td>
          <td style="text-align: center">linux下的core dump</td>
      </tr>
  </tbody>
</table>
<p>Linux下使用<code>file</code>命令可以查看相应的文件格式</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ file &lt;filename&gt;</span></span></code></pre></div></div>
<h2 id="目标文件的内容">目标文件的内容</h2>
<p>目标文件按照包含信息的不同属性，以节的形式存储，有时候也叫段。一般情况下它们都表示一个定长的区域不做区别，唯一的区别就是在ELF的链接视图和装载视图的时候。</p>
<p>程序源代码编译后的机器指令被放在代码段里，代码段的名字有<code>.code</code>和<code>.text</code>，已初始化的全局变量和局部静态变量放在数据段<code>.data</code>中，未初始化的全局变量和局部静态变量或者初始化却为0的放在BSS段<code>.bss</code></p>
<h2 id="浅析目标文件">浅析目标文件</h2>
<p>使用objdump工具可以查看目标文件的内部结构</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -h &lt;filename&gt;</span></span></code></pre></div></div>
<p>参数-h是把ELF各个段的基本信息打印出来，可以使用-x打印更多的信息。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -s -d &lt;filename&gt;</span></span></code></pre></div></div>
<p><code>-s</code>是将所有段的内容以十六进制的方式打印出来，<code>-d</code>可以将包含指令的段反汇编。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//Hello.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">fun1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">gloabl_init_var</span> <span class="o">=</span> <span class="mi">666</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">global_uninit_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">static_init_var</span> <span class="o">=</span> <span class="mi">999</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">static_uninit_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fun1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fun1</span><span class="p">(){}</span></span></span></code></pre></div></div>
<p>使用gcc编译但不链接</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -c Hello.c</span></span></code></pre></div></div>
<p>使用objdump查看object内部结构</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -h Hello.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hello.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sections:
</span></span><span class="line"><span class="cl">Idx Name          Size      VMA               LMA               File off  Algn
</span></span><span class="line"><span class="cl">  <span class="m">0</span> .text         <span class="m">00000036</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000040</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
</span></span><span class="line"><span class="cl">  <span class="m">1</span> .data         <span class="m">00000008</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000078</span>  2**2
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, DATA
</span></span><span class="line"><span class="cl">  <span class="m">2</span> .bss          <span class="m">00000008</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000080</span>  2**2
</span></span><span class="line"><span class="cl">                  ALLOC
</span></span><span class="line"><span class="cl">  <span class="m">3</span> .rodata       <span class="m">00000006</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000080</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">4</span> .comment      0000001c  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000086</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">5</span> .note.GNU-stack <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000a2  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">6</span> .note.gnu.property <span class="m">00000030</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000a8  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">7</span> .eh_frame     <span class="m">00000058</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000d8  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA</span></span></code></pre></div></div>
<p><code>-h</code>是把ELF文件各个段的基本信息打印出来，<code>-x</code>可以打印出更多的信息。</p>
<p>除了代码段、数据段和BSS段之外，还有只读数据段(.rodata)、注释信息段(.comment)和堆栈提示段(.note.GNU-stack)。</p>
<p>这里的<code>Size</code>就是段的长度，<code>File off</code>(offset)是段所在的位置。每个段的第二行中<code>CONTENTS</code>、<code>ALLOC</code>等表示段的属性，前者表示该段在文件中存在。可以看到BSS段并不是<code>CONTENTS</code>，表示其实际上在ELF文件中不存在内容。</p>
<h3 id="代码段">代码段</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">$objdump</span> -s -d Hello.o
</span></span><span class="line"><span class="cl">Hello.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Contents of section .text:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> 554889e5 4883ec10 c745fc01 <span class="m">00000048</span>  UH..H....E.....H
</span></span><span class="line"><span class="cl"> <span class="m">0010</span> 8d050000 <span class="m">00004889</span> c7e80000 0000b800  ......H.........
</span></span><span class="line"><span class="cl"> <span class="m">0020</span> 000000e8 <span class="m">00000000</span> b8000000 00c9c355  ...............U
</span></span><span class="line"><span class="cl"> <span class="m">0030</span> 4889e590 5dc3                        H...<span class="o">]</span>.          
</span></span><span class="line"><span class="cl">Contents of section .data:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> 9a020000 e7030000                    ........        
</span></span><span class="line"><span class="cl">Contents of section .rodata:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> 48656c6c 6f00                        Hello.          
</span></span><span class="line"><span class="cl">Contents of section .comment:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> <span class="m">00474343</span> 3a202847 4e552920 31322e32  .GCC: <span class="o">(</span>GNU<span class="o">)</span> 12.2
</span></span><span class="line"><span class="cl"> <span class="m">0010</span> 2e312032 <span class="m">30323330</span> <span class="m">31313100</span>           .1 20230111.    
</span></span><span class="line"><span class="cl">Contents of section .note.gnu.property:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> <span class="m">04000000</span> <span class="m">20000000</span> <span class="m">05000000</span> 474e5500  .... .......GNU.
</span></span><span class="line"><span class="cl"> <span class="m">0010</span> 020001c0 <span class="m">04000000</span> <span class="m">00000000</span> <span class="m">00000000</span>  ................
</span></span><span class="line"><span class="cl"> <span class="m">0020</span> 010001c0 <span class="m">04000000</span> <span class="m">01000000</span> <span class="m">00000000</span>  ................
</span></span><span class="line"><span class="cl">Contents of section .eh_frame:
</span></span><span class="line"><span class="cl"> <span class="m">0000</span> <span class="m">14000000</span> <span class="m">00000000</span> 017a5200 <span class="m">01781001</span>  .........zR..x..
</span></span><span class="line"><span class="cl"> <span class="m">0010</span> 1b0c0708 <span class="m">90010000</span> 1c000000 1c000000  ................
</span></span><span class="line"><span class="cl"> <span class="m">0020</span> <span class="m">00000000</span> 2f000000 00410e10 8602430d  ..../....A....C.
</span></span><span class="line"><span class="cl"> <span class="m">0030</span> 066a0c07 <span class="m">08000000</span> 1c000000 3c000000  .j..........&lt;...
</span></span><span class="line"><span class="cl"> <span class="m">0040</span> <span class="m">00000000</span> <span class="m">07000000</span> 00410e10 8602430d  .........A....C.
</span></span><span class="line"><span class="cl"> <span class="m">0050</span> 06420c07 <span class="m">08000000</span>                    .B......        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;main&gt;:
</span></span><span class="line"><span class="cl">   0:   <span class="m">55</span>                      push   %rbp
</span></span><span class="line"><span class="cl">   1:   <span class="m">48</span> <span class="m">89</span> e5                mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">   4:   <span class="m">48</span> <span class="m">83</span> ec <span class="m">10</span>             sub    <span class="nv">$0</span>x10,%rsp
</span></span><span class="line"><span class="cl">   8:   c7 <span class="m">45</span> <span class="nb">fc</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    movl   <span class="nv">$0</span>x1,-0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span></span><span class="line"><span class="cl">   f:   <span class="m">48</span> 8d <span class="m">05</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    lea    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rax        <span class="c1"># 16 &lt;main+0x16&gt;</span>
</span></span><span class="line"><span class="cl">  16:   <span class="m">48</span> <span class="m">89</span> c7                mov    %rax,%rdi
</span></span><span class="line"><span class="cl">  19:   e8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          call   1e &lt;main+0x1e&gt;
</span></span><span class="line"><span class="cl">  1e:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  23:   e8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          call   <span class="m">28</span> &lt;main+0x28&gt;
</span></span><span class="line"><span class="cl">  28:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  2d:   c9                      leave
</span></span><span class="line"><span class="cl">  2e:   c3                      ret
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">000000000000002f &lt;fun1&gt;:
</span></span><span class="line"><span class="cl">  2f:   <span class="m">55</span>                      push   %rbp
</span></span><span class="line"><span class="cl">  30:   <span class="m">48</span> <span class="m">89</span> e5                mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">  33:   <span class="m">90</span>                      nop
</span></span><span class="line"><span class="cl">  34:   5d                      pop    %rbp
</span></span><span class="line"><span class="cl">  35:   c3                      ret</span></span></code></pre></div></div>
<p>&ldquo;Contents of setion .text&quot;是将.text的数据以十六进制方式打印出来的内容,总共0x2b字节，和之前用objdump打印的<code>.text</code>段的长度一致。最左边的是偏移量，中间四列是十六进制内容，最右边是.text段的ASCII码形式。</p>
<h3 id="数据段和只读数据段">数据段和只读数据段</h3>
<p>.data保存了已经初始化的全局变量和局部静态变量。Hello.c文件中有两个这样的变量（global_init_var和static_init_var），每个变量4字节，所以<code>.data</code>段大小8字节。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Contents of section .data:
</span></span><span class="line"><span class="cl"> 0000 9a020000 e7030000                    ........  </span></span></code></pre></div></div>
<p>上面关于<code>.data</code>段的内容中，前四个字节分别是0x9a、0x02、0x00、0x00。这个值对应gloabl_init_var，即十进制的666，但其存放的顺序是倒序的，而不是正常666的十六进制表示0x029a。这涉及到字节序的问题。</p>
<p>.rodata存放只读数据，一般是程序的只读变量(const修饰)和字符串常量。Hello.c中<code> printf(&quot;Hello\n&quot;);</code>用到了字符串常量Hello\n，这只是一种只读数据，所以被放在了<code>.rodata</code>段。</p>
<p>有时候编译器会把字符串常量放在<code>.data</code>段。</p>
<h3 id="bss段">BSS段</h3>
<p>.bss段存放未初始化的全局变量和局部静态变量，准确的说法是.bss段为它们预留了空间。</p>
<p>通过符号表可以看到未初始化的全局变量和局部静态变量都不全部放在了.bss段，这和不同的语言和编译器的实现有关，有的编译器会将全局未初始化变量存放在.bss段，有的不会，只会预留一个未定义的全局变量符号，等最后链接成可执行文件的时候再加上.bss段分配空间。</p>
<p>一个变量被初始化为0也会被放在<code>.bss</code>段，这是优化的结果。</p>
<h3 id="其他段">其他段</h3>
<p>除了<code>.text .data .bss</code>三个最常用的段之外，ELF文件可能包含其他的段用来保存和程序相关的信息。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">常用的段名</th>
          <th style="text-align: left">说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">.rodatal</td>
          <td style="text-align: left">Read Only Data，存储只读数据，比如字符串常量、全局const变量，和.rodata段一样</td>
      </tr>
      <tr>
          <td style="text-align: left">.comment</td>
          <td style="text-align: left">存放了编译器的版本信息</td>
      </tr>
      <tr>
          <td style="text-align: left">.debug</td>
          <td style="text-align: left">调试信息</td>
      </tr>
      <tr>
          <td style="text-align: left">.dynamic</td>
          <td style="text-align: left">动态链接信息</td>
      </tr>
      <tr>
          <td style="text-align: left">.hash</td>
          <td style="text-align: left">符号哈希表</td>
      </tr>
      <tr>
          <td style="text-align: left">.line</td>
          <td style="text-align: left">调试用到的行号表，即源代码行号和编译后的指令的对应表</td>
      </tr>
      <tr>
          <td style="text-align: left">.note</td>
          <td style="text-align: left">额外的编译信息，比如程序的公司名，版本号</td>
      </tr>
      <tr>
          <td style="text-align: left">.strtab</td>
          <td style="text-align: left">String Tab，字符串表，存储ELF文件中用到的各种字符串</td>
      </tr>
      <tr>
          <td style="text-align: left">.symtab</td>
          <td style="text-align: left">Symbol Tab，符号表</td>
      </tr>
      <tr>
          <td style="text-align: left">.shstrtab</td>
          <td style="text-align: left">Section String Tbale，段名表</td>
      </tr>
      <tr>
          <td style="text-align: left">.plt / .got</td>
          <td style="text-align: left">动态链接的跳转表和 全局入口表</td>
      </tr>
      <tr>
          <td style="text-align: left">.init / .fini</td>
          <td style="text-align: left">程序的初始化和终结代码段</td>
      </tr>
  </tbody>
</table>
<p>这些段的名字都有<code>.</code>作前缀，表明这些表的名字是系统保留的，应用程序可以使用一些非系统保留的名字作为段名，但不可以<code>.</code>作为前缀。ELF允许有多个重复名字的段。还有一些段的名字是因为ELF的历史遗留问题造成，如</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.sdata .tdesc .sbcc .lit4 .lit8 .reginfo .gptab .liblist .conflict</span></span></code></pre></div></div>
<p>上述段名已经被遗弃了。</p>
<h3 id="自定义段">自定义段</h3>
<p>GCC提供了一种扩展机制可以让开发者指定变量所处的段</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="nf">__attribute__</span><span class="p">((</span><span class="nf">section</span><span class="p">(</span><span class="s">&#34;&lt;name&gt;&#34;</span><span class="p">)))</span> 
</span></span></code></pre></div></div>
<p>上述语句后面接一个函数或变量定义的语句即可，就可以指定保存的段名，如：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="nf">__attribute__</span><span class="p">((</span><span class="nf">section</span><span class="p">(</span><span class="s">&#34;FOO&#34;</span><span class="p">)))</span> <span class="kt">int</span> <span class="n">global</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span></span></span></code></pre></div></div>
<h2 id="elf文件结构描述">ELF文件结构描述</h2>
<p>ELF目标文件格式最前部的是ELF文件头（ELF Header），它包含了描述整个文件的基本属性。紧接着是ELF文件各个段，与段有关的重要结构就是段表（Section Header Table），它描述了ELF文件包含的段的信息。</p>
<h3 id="文件头">文件头</h3>
<p>使用readelf可以详细查看ELF文件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">readelf -h Hello.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ELF Header:
</span></span><span class="line"><span class="cl">  Magic:   7f <span class="m">45</span> 4c <span class="m">46</span> <span class="m">02</span> <span class="m">01</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 
</span></span><span class="line"><span class="cl">  Class:                             ELF64
</span></span><span class="line"><span class="cl">  Data:                              2<span class="err">&#39;</span>s complement, little endian
</span></span><span class="line"><span class="cl">  Version:                           <span class="m">1</span> <span class="o">(</span>current<span class="o">)</span>
</span></span><span class="line"><span class="cl">  OS/ABI:                            UNIX - System V
</span></span><span class="line"><span class="cl">  ABI Version:                       <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Type:                              REL <span class="o">(</span>Relocatable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Machine:                           Advanced Micro Devices X86-64
</span></span><span class="line"><span class="cl">  Version:                           0x1
</span></span><span class="line"><span class="cl">  Entry point address:               0x0
</span></span><span class="line"><span class="cl">  Start of program headers:          <span class="m">0</span> <span class="o">(</span>bytes into file<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Start of section headers:          <span class="m">904</span> <span class="o">(</span>bytes into file<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Flags:                             0x0
</span></span><span class="line"><span class="cl">  Size of this header:               <span class="m">64</span> <span class="o">(</span>bytes<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Size of program headers:           <span class="m">0</span> <span class="o">(</span>bytes<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Number of program headers:         <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Size of section headers:           <span class="m">64</span> <span class="o">(</span>bytes<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Number of section headers:         <span class="m">14</span>
</span></span><span class="line"><span class="cl">  Section header string table index: <span class="m">13</span></span></span></code></pre></div></div>
<p>ELF文件结构及其相关常数定义在<code>/usr/include/elf.h</code>里，ELF有32位和64位两个版本，自然对应<code>Elf32_Ehdr</code>和<code>Elf64_Ehdr</code>两个结构。elf.h使用typedef定义了一套自己的变量体系。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* Type for a 16-bit quantity.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">Elf32_Half</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">Elf64_Half</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Types for signed and unsigned 32-bit quantities.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Word</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>	<span class="kt">int32_t</span>  <span class="n">Elf32_Sword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf64_Word</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>	<span class="kt">int32_t</span>  <span class="n">Elf64_Sword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Types for signed and unsigned 64-bit quantities.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint64_t</span> <span class="n">Elf32_Xword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>	<span class="kt">int64_t</span>  <span class="n">Elf32_Sxword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint64_t</span> <span class="n">Elf64_Xword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>	<span class="kt">int64_t</span>  <span class="n">Elf64_Sxword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Type of addresses.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint64_t</span> <span class="n">Elf64_Addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Type of file offsets.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint32_t</span> <span class="n">Elf32_Off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint64_t</span> <span class="n">Elf64_Off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Type for section indices, which are 16-bit quantities.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">Elf32_Section</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">uint16_t</span> <span class="n">Elf64_Section</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Type for version symbol information.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="n">Elf32_Half</span> <span class="n">Elf32_Versym</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="n">Elf64_Half</span> <span class="n">Elf64_Versym</span><span class="p">;</span></span></span></code></pre></div></div>
<p>以Elf64_Ehdr为例：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#define EI_NIDENT (16)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">e_ident</span><span class="p">[</span><span class="n">EI_NIDENT</span><span class="p">];</span>	<span class="cm">/* Magic number and other info */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_type</span><span class="p">;</span>			<span class="cm">/* Object file type */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_machine</span><span class="p">;</span>		<span class="cm">/* Architecture */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">e_version</span><span class="p">;</span>		<span class="cm">/* Object file version */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">e_entry</span><span class="p">;</span>		<span class="cm">/* Entry point virtual address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>	<span class="n">e_phoff</span><span class="p">;</span>		<span class="cm">/* Program header table file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>	<span class="n">e_shoff</span><span class="p">;</span>		<span class="cm">/* Section header table file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">e_flags</span><span class="p">;</span>		<span class="cm">/* Processor-specific flags */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_ehsize</span><span class="p">;</span>		<span class="cm">/* ELF header size in bytes */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_phentsize</span><span class="p">;</span>		<span class="cm">/* Program header table entry size */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_phnum</span><span class="p">;</span>		<span class="cm">/* Program header table entry count */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_shentsize</span><span class="p">;</span>		<span class="cm">/* Section header table entry size */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_shnum</span><span class="p">;</span>		<span class="cm">/* Section header table entry count */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>	<span class="n">e_shstrndx</span><span class="p">;</span>		<span class="cm">/* Section header string table index */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Ehdr</span><span class="p">;</span></span></span></code></pre></div></div>
<p>ELF文件头结构成员含义</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">成员</th>
          <th style="text-align: left">readelf输出结果和含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">e_ident</td>
          <td style="text-align: left">Magic、Class、Data、Version、OS/ABI、ABI Version</td>
      </tr>
      <tr>
          <td style="text-align: center">e_type</td>
          <td style="text-align: left">Type，ELF文件类型</td>
      </tr>
      <tr>
          <td style="text-align: center">e_machine</td>
          <td style="text-align: left">ELF文件件的CPU平台属性</td>
      </tr>
      <tr>
          <td style="text-align: center">e_version</td>
          <td style="text-align: left">ELF版本号，一般为1</td>
      </tr>
      <tr>
          <td style="text-align: center">e_entry</td>
          <td style="text-align: left">Entry point address，入口地址，可重定位文件一般没有入口地址，则这个值为0</td>
      </tr>
      <tr>
          <td style="text-align: center">e_phoff</td>
          <td style="text-align: left">Start of program headers</td>
      </tr>
      <tr>
          <td style="text-align: center">e_shoff</td>
          <td style="text-align: left">Start of section headers，段表在文件中的偏移</td>
      </tr>
      <tr>
          <td style="text-align: center">e_word</td>
          <td style="text-align: left">Flags，ELF标志位，标识一些ELF文件平台相关的属性</td>
      </tr>
      <tr>
          <td style="text-align: center">e_ehsize</td>
          <td style="text-align: left">Size of this header，ELF文件头本身大小</td>
      </tr>
      <tr>
          <td style="text-align: center">e_phentsize</td>
          <td style="text-align: left">Size of program headers</td>
      </tr>
      <tr>
          <td style="text-align: center">e_phnum</td>
          <td style="text-align: left">Number of program headers</td>
      </tr>
      <tr>
          <td style="text-align: center">e_shentsize</td>
          <td style="text-align: left">Size of section headers，段表描述符的大小</td>
      </tr>
      <tr>
          <td style="text-align: center">e_shnum</td>
          <td style="text-align: left">Number of Section headers，段表描述符数量，等于该ELF文件中段的数量</td>
      </tr>
      <tr>
          <td style="text-align: center">e_shstrndx</td>
          <td style="text-align: left">Section header string table index，段表字符串表所在的段在段表中的下标</td>
      </tr>
  </tbody>
</table>
<h4 id="elfmagic-number">ELFmagic number</h4>
<p>使用readelf最前面打印的Magic被ELF标准规定标识ELF平台的属性。</p>
<p>最开始的4字节是所有ELF文件都相同的标识码：0x7f、0x45、0x4c、0x46，第一个对应ASCII的del控制符。侯三字节对应elf三个字母的ASCII码。几乎所有可执行文件格式的最开始几个字节都是magic number，a.out是0x01、0x07，PE/COFF是0x4d、0x5a。Magic number可以用来确认文件的类型，操作系统加载可执行文件时检查magic number是否正确以决定是否记载。</p>
<p>接下来的一个字节用来表示ELF文件类的，0x01是32位、0x02是64位。</p>
<p>第6个字节是字节序，规定ELF文件时大端还是小端的。</p>
<p>第七个规定ELF文件的主版本号。</p>
<p>后9个无特别要求，有的平台将其作为扩展标志。</p>
<h4 id="文件类型">文件类型</h4>
<p>e_type表示ELF文件类型</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">常量</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">ET_REL</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">可重定位文件，后缀.o</td>
      </tr>
      <tr>
          <td style="text-align: left">ET_EXEC</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">可执行文件</td>
      </tr>
      <tr>
          <td style="text-align: left">ET_DYN</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">共享目标文件，后缀.so</td>
      </tr>
  </tbody>
</table>
<h4 id="机器类型">机器类型</h4>
<p>e_machine表示ELF文件的平台属性</p>
<p>ELF文件格式被设计在多个平台使用。这不表示同一个文件在不同的平台上都能使用，而是表示不同的平台遵循同一个标准。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">常量</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">EM_M32</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">AT&amp;T WE 32100</td>
      </tr>
      <tr>
          <td style="text-align: left">EM_SPARC</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">SPARC</td>
      </tr>
      <tr>
          <td style="text-align: left">EM_386</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">Intel x86</td>
      </tr>
      <tr>
          <td style="text-align: left">EM_68K</td>
          <td style="text-align: center">4</td>
          <td style="text-align: left">Motorola 68000</td>
      </tr>
      <tr>
          <td style="text-align: left">EM_88K</td>
          <td style="text-align: center">5</td>
          <td style="text-align: left">Motorola 88000</td>
      </tr>
      <tr>
          <td style="text-align: left">EM_860</td>
          <td style="text-align: center">6</td>
          <td style="text-align: left">Intel 80860</td>
      </tr>
  </tbody>
</table>
<h3 id="段表">段表</h3>
<p><code>objdump -h</code>只会列出关键的段，readelf还能看到辅助性的段</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ readelf -S Hello.o
</span></span><span class="line"><span class="cl">There are <span class="m">14</span> section headers, starting at offset 0x388:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Section Headers:
</span></span><span class="line"><span class="cl">  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset  
</span></span><span class="line"><span class="cl">       Size              EntSize          Flags  Link  Info  Align
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 0<span class="o">]</span>                   NULL             <span class="m">0000000000000000</span>  <span class="m">00000000</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">0</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 1<span class="o">]</span> .text             PROGBITS         <span class="m">0000000000000000</span>  <span class="m">00000040</span> 
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000036</span>  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 2<span class="o">]</span> .rela.text        RELA             <span class="m">0000000000000000</span>  <span class="m">00000298</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000048</span>  <span class="m">0000000000000018</span>   I      <span class="m">11</span>     <span class="m">1</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 3<span class="o">]</span> .data             PROGBITS         <span class="m">0000000000000000</span>  <span class="m">00000078</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000008</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 4<span class="o">]</span> .bss              NOBITS           <span class="m">0000000000000000</span>  <span class="m">00000080</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000008</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 5<span class="o">]</span> .rodata           PROGBITS         <span class="m">0000000000000000</span>  <span class="m">00000080</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000006</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 6<span class="o">]</span> .comment          PROGBITS         <span class="m">0000000000000000</span>  <span class="m">00000086</span>
</span></span><span class="line"><span class="cl">       000000000000001c  <span class="m">0000000000000001</span>  MS       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 7<span class="o">]</span> .note.GNU-stack   PROGBITS         <span class="m">0000000000000000</span>  000000a2
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 8<span class="o">]</span> .note.gnu.pr<span class="o">[</span>...<span class="o">]</span> NOTE             <span class="m">0000000000000000</span>  000000a8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000030</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 9<span class="o">]</span> .eh_frame         PROGBITS         <span class="m">0000000000000000</span>  000000d8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000058</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>10<span class="o">]</span> .rela.eh_frame    RELA             <span class="m">0000000000000000</span>  000002e0
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000030</span>  <span class="m">0000000000000018</span>   I      <span class="m">11</span>     <span class="m">9</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>11<span class="o">]</span> .symtab           SYMTAB           <span class="m">0000000000000000</span>  <span class="m">00000130</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000108</span>  <span class="m">0000000000000018</span>          <span class="m">12</span>     <span class="m">6</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>12<span class="o">]</span> .strtab           STRTAB           <span class="m">0000000000000000</span>  <span class="m">00000238</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000060</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>13<span class="o">]</span> .shstrtab         STRTAB           <span class="m">0000000000000000</span>  <span class="m">00000310</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000074</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">Key to Flags:
</span></span><span class="line"><span class="cl">  W <span class="o">(</span>write<span class="o">)</span>, A <span class="o">(</span>alloc<span class="o">)</span>, X <span class="o">(</span>execute<span class="o">)</span>, M <span class="o">(</span>merge<span class="o">)</span>, S <span class="o">(</span>strings<span class="o">)</span>, I <span class="o">(</span>info<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  L <span class="o">(</span>link order<span class="o">)</span>, O <span class="o">(</span>extra OS processing required<span class="o">)</span>, G <span class="o">(</span>group<span class="o">)</span>, T <span class="o">(</span>TLS<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  C <span class="o">(</span>compressed<span class="o">)</span>, x <span class="o">(</span>unknown<span class="o">)</span>, o <span class="o">(</span>OS specific<span class="o">)</span>, E <span class="o">(</span>exclude<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  D <span class="o">(</span>mbind<span class="o">)</span>, l <span class="o">(</span>large<span class="o">)</span>, p <span class="o">(</span>processor specific<span class="o">)</span></span></span></code></pre></div></div>
<p>查看其输出发现段表是一个以Elf64_Shdr结构体为元素的数组，数组元素的个数即段的个数，Elf64_Shdr也被称为段描述符（Section Descriptor）。
Elf64_Shdr被定义在<code>/usr/include/elf.h</code>，</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">sh_name</span><span class="p">;</span>		<span class="cm">/* Section name (string tbl index) */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">sh_type</span><span class="p">;</span>		<span class="cm">/* Section type */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">sh_flags</span><span class="p">;</span>		<span class="cm">/* Section flags */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">sh_addr</span><span class="p">;</span>		<span class="cm">/* Section virtual addr at execution */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>	<span class="n">sh_offset</span><span class="p">;</span>		<span class="cm">/* Section file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">sh_size</span><span class="p">;</span>		<span class="cm">/* Section size in bytes */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">sh_link</span><span class="p">;</span>		<span class="cm">/* Link to another section */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">sh_info</span><span class="p">;</span>		<span class="cm">/* Additional section information */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">sh_addralign</span><span class="p">;</span>		<span class="cm">/* Section alignment */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">sh_entsize</span><span class="p">;</span>		<span class="cm">/* Entry size if section holds table */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Shdr</span><span class="p">;</span></span></span></code></pre></div></div>
<p>其成员含义如下：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">变量</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">sh_name</td>
          <td style="text-align: left">段名</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_type</td>
          <td style="text-align: left">段的类型</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_flags</td>
          <td style="text-align: left">段的标志位</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_addr</td>
          <td style="text-align: left">段虚拟地址</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_offset</td>
          <td style="text-align: left">段偏移</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_size</td>
          <td style="text-align: left">段的长度</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_link和sh_info</td>
          <td style="text-align: left">段的链接信息</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_addralign</td>
          <td style="text-align: left">有些段对段地址有对齐要求，它表示的就是地址对齐数量中的指数，如果值为3就表明对齐是$2^3$=8倍，如果为0或1则表明没有这种需求</td>
      </tr>
      <tr>
          <td style="text-align: left">sh_entsize</td>
          <td style="text-align: left">项的长度</td>
      </tr>
  </tbody>
</table>
<p>段名是个字符串，它位于一个叫做<code>.shstrtab</code>的字符串表。<code>sh_name</code>是段名字符串在这个表中的偏移。</p>
<p>段的名字对编译器和链接器来说是有意义的，但对操作系统来说没啥意义。对操作系统来说，一个段如何处理取决于其属性和权限。</p>
<h4 id="段的类型">段的类型</h4>
<p>对于编译器和链接器来说，主要决定段的属性的是段的类型（sh_type)和段的标志位（sh_flags)。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">常量</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">SHT_NULL</td>
          <td style="text-align: center">0</td>
          <td style="text-align: left">无效段</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_PROGBITS</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">程序段、代码段、数据段皆是此类型</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_SYMTAB</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">表示该段的内容为符号表</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_STRTAB</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">表示该段的内容是字符串表</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_RELA</td>
          <td style="text-align: center">4</td>
          <td style="text-align: left">重定位表</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_HASH</td>
          <td style="text-align: center">5</td>
          <td style="text-align: left">符号表的哈希表</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_DYNAMIC</td>
          <td style="text-align: center">6</td>
          <td style="text-align: left">动态链接信息</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_NOTE</td>
          <td style="text-align: center">7</td>
          <td style="text-align: left">提示性信息</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_NOBITS</td>
          <td style="text-align: center">8</td>
          <td style="text-align: left">表示该段在文件中无内容，如.bss段</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_REL</td>
          <td style="text-align: center">9</td>
          <td style="text-align: left">该段包含可重定位信息</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_SHLIB</td>
          <td style="text-align: center">10</td>
          <td style="text-align: left">保留</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_DNYSYM</td>
          <td style="text-align: center">11</td>
          <td style="text-align: left">动态链接的符号表</td>
      </tr>
  </tbody>
</table>
<h4 id="段的标志位">段的标志位</h4>
<p>段的标志位表示该段在虚拟地址空间中的属性。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">常量</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">SHT_WRITE</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">可写</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_ALLOC</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">表示该段需要在进程空间分配空间，有些含有指示或控制信息的段不需要在进程空间中分配空间，就不会有这个标志。代码段数据段会有这个标志</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_EXECINSTR</td>
          <td style="text-align: center">4</td>
          <td style="text-align: left">可执行</td>
      </tr>
  </tbody>
</table>
<h4 id="段的链接信息">段的链接信息</h4>
<p>如果段的类型和链接相关，sh_link和sh_info两个成员所包含的意义如下，对于其他类型的段，二者无意义。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">sh_type</th>
          <th style="text-align: center">sh_link</th>
          <th style="text-align: center">sh_info</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">SHT_DYNAMIC</td>
          <td style="text-align: center">该段使用的字符串表在段表中的下标</td>
          <td style="text-align: center">0</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_HASH</td>
          <td style="text-align: center">该段使用的符号表在段表中的下标</td>
          <td style="text-align: center">0</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_REL</td>
          <td style="text-align: center">该段使用的相应符号表在段表中的下标</td>
          <td style="text-align: center">该重定位表所作用的段在段表中的下标</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_RELA</td>
          <td style="text-align: center">同上</td>
          <td style="text-align: center">同上</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_SYMTAB</td>
          <td style="text-align: center">操作系统相关</td>
          <td style="text-align: center">操作系统相关</td>
      </tr>
      <tr>
          <td style="text-align: center">SHT_DYNAYM</td>
          <td style="text-align: center">同上</td>
          <td style="text-align: center">同上</td>
      </tr>
      <tr>
          <td style="text-align: center">other</td>
          <td style="text-align: center">SHN_UNDEF</td>
          <td style="text-align: center">0</td>
      </tr>
  </tbody>
</table>
<h3 id="重定位表">重定位表</h3>
<p>Hello.o有一个叫做<code>.rel.text</code>的段，它的类型是<code>RELA</code>，即它是一个重定位表。</p>
<p>对于每个需要重定位的代码段和数据段，都会有一个相应的重定位表。比如Hello.o中就存在对<code>printf()</code>函数的调用。</p>
<p>重定位表同时也是ELF文件的一个段，段的类型(sh_type)就是<code>SHT_RELA</code>，<code>sh_link</code>表示该符号的下标，<code>sh_info</code>表示其作用在哪个段。比如<code>.rel.text</code>作用于<code>.text</code>段，<code>.text</code>段的下表是 1 ，那么<code>.rel.text</code>的<code>.sh_info</code>就为1。</p>
<h3 id="字符串表">字符串表</h3>
<p>ELF文件中的字符串长度并不固定（段名、变量名等），无法用固定的结构表示它们，故而把字符串集中存放到一个表，然后使用字符串在表中的偏移引用字符串。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">偏移</th>
          <th style="text-align: center">+0</th>
          <th style="text-align: center">+1</th>
          <th style="text-align: center">+2</th>
          <th style="text-align: center">+3</th>
          <th style="text-align: center">+4</th>
          <th style="text-align: center">+5</th>
          <th style="text-align: center">+6</th>
          <th style="text-align: center">+7</th>
          <th style="text-align: center">+8</th>
          <th style="text-align: center">+9</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">+0</td>
          <td style="text-align: center">\0</td>
          <td style="text-align: center">h</td>
          <td style="text-align: center">e</td>
          <td style="text-align: center">l</td>
          <td style="text-align: center">l</td>
          <td style="text-align: center">o</td>
          <td style="text-align: center">w</td>
          <td style="text-align: center">o</td>
          <td style="text-align: center">r</td>
          <td style="text-align: center">l</td>
      </tr>
      <tr>
          <td style="text-align: center">+10</td>
          <td style="text-align: center">d</td>
          <td style="text-align: center">\0</td>
          <td style="text-align: center">M</td>
          <td style="text-align: center">y</td>
          <td style="text-align: center">v</td>
          <td style="text-align: center">a</td>
          <td style="text-align: center">r</td>
          <td style="text-align: center">i</td>
          <td style="text-align: center">a</td>
          <td style="text-align: center">b</td>
      </tr>
      <tr>
          <td style="text-align: center">+20</td>
          <td style="text-align: center">l</td>
          <td style="text-align: center">e</td>
          <td style="text-align: center">\0</td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
      </tr>
  </tbody>
</table>
<p>它的偏移与之对应的字符串如下表</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">偏移</th>
          <th style="text-align: left">字符串</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">0</td>
          <td style="text-align: left">空字符串</td>
      </tr>
      <tr>
          <td style="text-align: center">1</td>
          <td style="text-align: left">helloworld</td>
      </tr>
      <tr>
          <td style="text-align: center">6</td>
          <td style="text-align: left">world</td>
      </tr>
      <tr>
          <td style="text-align: center">12</td>
          <td style="text-align: left">Myvariable</td>
      </tr>
  </tbody>
</table>
<p>一般字符串表以段的形式保存，<code>.strtab</code>是字符串表，<code>.shstrtab</code>是段表字符串表。顾名思义，字符串表保存普通的字符串，段表字符串表保存段表中用到的字符串，比如段名。</p>
<p>之前<code>readelf -h</code>中得到了<code>e_shstrndx</code>的值为13，而<code>readelf -S</code>可以看到，<code>shstrtab</code>这个段正好位于段表中下标13的位置。</p>
<h2 id="符号">符号</h2>
<p>链接中，函数和变量被称为符号，函数名和变量名被称为符号名</p>
<p>每一个目标文件都会有一个相应的符号表，每个定义的符号都会有一个对应的值（符号值），对于函数和变量来说，这个值就是它们的地址。
符号总共分为以下几类：</p>
<ul>
<li>定义在本目标文件的全局符号，可以被其他目标文件引用
<ul>
<li>比如Hello.o中的main、fun1()和global_init_var</li>
</ul>
</li>
<li>在本目标文件引用却未定义的全局符号，一般叫外部符号
<ul>
<li>比如Hello.o中的printf</li>
</ul>
</li>
<li>段名，这种符号由编译器产生，值就是段的起始地址
<ul>
<li>比如Hello.o中的.text、.data等</li>
</ul>
</li>
<li>局部符号，编译单元内部可见。调试器使用这些符号分析程序或崩溃时的核心转储文件。于链接无用，被链接器忽视</li>
<li>行号信息，目标文件指令和源代码行的对应关系，可选</li>
</ul>
<p>查看ELF的符号表有很多工具，readelf、objdump、nm等，以nm为例：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ nm Hello.o
</span></span><span class="line"><span class="cl">000000000000002f T fun1
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> D gloabl_init_var
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> B global_uninit_var
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> T main
</span></span><span class="line"><span class="cl">                 U puts
</span></span><span class="line"><span class="cl"><span class="m">0000000000000004</span> d static_init_var.0
</span></span><span class="line"><span class="cl"><span class="m">0000000000000004</span> b static_uninit_var.1</span></span></code></pre></div></div>
<h3 id="elf符号表结构">ELF符号表结构</h3>
<p>符号表往往是文件中的一个段，名字叫.symtab，符号表结构是Elf64_Sym结构的数组，每个Elf64_Sym结构对应一个符号</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">st_name</span><span class="p">;</span>		<span class="cm">/* Symbol name (string tbl index) */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">st_info</span><span class="p">;</span>		<span class="cm">/* Symbol type and binding */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">st_other</span><span class="p">;</span>		<span class="cm">/* Symbol visibility */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Section</span>	<span class="n">st_shndx</span><span class="p">;</span>		<span class="cm">/* Section index */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">st_value</span><span class="p">;</span>		<span class="cm">/* Symbol value */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">st_size</span><span class="p">;</span>		<span class="cm">/* Symbol size */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Sym</span><span class="p">;</span></span></span></code></pre></div></div>
<table>
  <thead>
      <tr>
          <th style="text-align: center">成员</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">st_name</td>
          <td style="text-align: left">符号名，该成员包含该符号名在字符串表的下标</td>
      </tr>
      <tr>
          <td style="text-align: center">st_value</td>
          <td style="text-align: left">符号对应的值。值与符号有关，可能是绝对值，也可能是个地址</td>
      </tr>
      <tr>
          <td style="text-align: center">st_size</td>
          <td style="text-align: left">符号大小。对于包含数据的符号来说，值是该数据类型的大小，比如double的符号就是8。如果值是0，则表示该符号大小为0或未知</td>
      </tr>
      <tr>
          <td style="text-align: center">st_info</td>
          <td style="text-align: left">符号类型和绑定信息</td>
      </tr>
      <tr>
          <td style="text-align: center">st_other</td>
          <td style="text-align: left">符号的可见性</td>
      </tr>
      <tr>
          <td style="text-align: center">st_shndx</td>
          <td style="text-align: left">符号所在的段</td>
      </tr>
  </tbody>
</table>
<h4 id="符号类型和绑定信息">符号类型和绑定信息</h4>
<p>低4位表示符号类型，高28位表示符号绑定信息</p>
<p>符号绑定信息：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">宏定义名</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">STB_LOCAL</td>
          <td style="text-align: center">0</td>
          <td style="text-align: left">局部符号，低目标文件外部不可见</td>
      </tr>
      <tr>
          <td style="text-align: center">STB_GLOBAL</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">全局符号，外部可见</td>
      </tr>
      <tr>
          <td style="text-align: center">STB_WEAK</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">弱引用</td>
      </tr>
  </tbody>
</table>
<p>符号类型：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">宏定义名</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">STT_NOTYPE</td>
          <td style="text-align: center">0</td>
          <td style="text-align: left">未知类型符号</td>
      </tr>
      <tr>
          <td style="text-align: center">STT_OBJECT</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">数据对象，如变量、数组</td>
      </tr>
      <tr>
          <td style="text-align: center">STT_FUNC</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">函数或其他可执行代码</td>
      </tr>
      <tr>
          <td style="text-align: center">STT_SECTION</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">段，这个符号必须是STB_LOCAL的</td>
      </tr>
      <tr>
          <td style="text-align: center">STT_FILE</td>
          <td style="text-align: center">4</td>
          <td style="text-align: left">文件名，一般指的是该目标文件所对应的源文件名，它一定是STB_LOCAL的，st_shndx一定是SHN_ABS</td>
      </tr>
  </tbody>
</table>
<h4 id="符号所在段">符号所在段</h4>
<p><code>st_shndx</code>，如果符号定义在本目标文件中，该成员的表示符号所在的表在段表中的下标，如果不在或者对于一些特殊符号，其值也会特殊些，具体如下：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">宏定义名</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">SHN_ABS</td>
          <td style="text-align: center">0xfff1</td>
          <td style="text-align: left">该符号包含一个绝对的值</td>
      </tr>
      <tr>
          <td style="text-align: center">SHN_COMMON</td>
          <td style="text-align: center">0xfff2</td>
          <td style="text-align: left">该符号是一个COMMON类型的符号，一般来说未初始化的全局符号定义就是这是类型</td>
      </tr>
      <tr>
          <td style="text-align: center">SHN_UNDEF</td>
          <td style="text-align: center">0</td>
          <td style="text-align: left">该符号未定义，即引用未定义</td>
      </tr>
  </tbody>
</table>
<h4 id="符号值">符号值</h4>
<ul>
<li>在目标文件中，如果是该符号的定义并且该符号不是COMMON块类型的，则st_value表示该符号在段中的偏移。
<ul>
<li>即符号所对应的函数或变量位于由<code>st_shndx</code>指定的段，偏移<code>st_value</code>的位置。</li>
</ul>
</li>
<li>在目标文件中，如果符号是COMMON块类型，st_value表示该符号的对齐属性</li>
<li>在可执行文件中，st_value表示该符号的虚拟地址</li>
</ul>
<h4 id="以helloo为例">以Hello.o为例</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ readelf -s Hello.o 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Symbol table <span class="s1">&#39;.symtab&#39;</span> contains <span class="m">11</span> entries:
</span></span><span class="line"><span class="cl">   Num:    Value          Size Type    Bind   Vis      Ndx Name
</span></span><span class="line"><span class="cl">     0: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  LOCAL  DEFAULT  UND 
</span></span><span class="line"><span class="cl">     1: <span class="m">0000000000000000</span>     <span class="m">0</span> FILE    LOCAL  DEFAULT  ABS Hello.c
</span></span><span class="line"><span class="cl">     2: <span class="m">0000000000000000</span>     <span class="m">0</span> SECTION LOCAL  DEFAULT    <span class="m">1</span> .text
</span></span><span class="line"><span class="cl">     3: <span class="m">0000000000000000</span>     <span class="m">0</span> SECTION LOCAL  DEFAULT    <span class="m">5</span> .rodata
</span></span><span class="line"><span class="cl">     4: <span class="m">0000000000000004</span>     <span class="m">4</span> OBJECT  LOCAL  DEFAULT    <span class="m">4</span> static_uninit_var.1
</span></span><span class="line"><span class="cl">     5: <span class="m">0000000000000004</span>     <span class="m">4</span> OBJECT  LOCAL  DEFAULT    <span class="m">3</span> static_init_var.0
</span></span><span class="line"><span class="cl">     6: <span class="m">0000000000000000</span>     <span class="m">4</span> OBJECT  GLOBAL DEFAULT    <span class="m">3</span> gloabl_init_var
</span></span><span class="line"><span class="cl">     7: <span class="m">0000000000000000</span>     <span class="m">4</span> OBJECT  GLOBAL DEFAULT    <span class="m">4</span> global_uninit_var
</span></span><span class="line"><span class="cl">     8: <span class="m">0000000000000000</span>    <span class="m">47</span> FUNC    GLOBAL DEFAULT    <span class="m">1</span> main
</span></span><span class="line"><span class="cl">     9: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT  UND puts
</span></span><span class="line"><span class="cl">    10: 000000000000002f     <span class="m">7</span> FUNC    GLOBAL DEFAULT    <span class="m">1</span> fun1</span></span></code></pre></div></div>
<p>readelf输出和Elf64_Sym的各个成员几乎一一对应。</p>
<p>第一列Num表示符号表数组的下标，第二列Value就是符号值，第三列Size表示符号大小，第四列和第五列表示符号类型和绑定信息，第六列表示其可见性，第七列Ndx表示符号所属的段，最后一列是符号名称。</p>
<ul>
<li><code>fun1()</code>和<code>main()</code>函数都是定义在Hello.c里的，它们都处于代码段，所以<code>Ndx</code>值是1，即Hello.o中，<code>.text</code>段的下标是1。它俩是函数，所以类型是FUNC，它们是全局可见，所以是GLOBAL，Size表示函数指令所占的字节数，Value表示函数相对于代码段起始位置的偏移量</li>
<li><code>prindf()</code>函数在Hello.c中被引用无定义，所以Ndx是UND</li>
<li>global_init_var是已初始化的全局变量，被定义在<code>.bss</code>段，即下标为3</li>
<li>static前缀的两个局部变量的绑定属性是LOCAL，即编译单元内部可见。Name不是源文件中的名称在符号修饰中可以解释</li>
</ul>
<h3 id="特殊符号">特殊符号</h3>
<p>使用ld作为链接器来链接生产可执行文件时，它会定义很多特殊符号，这些符号没有在程序中定义却可以直接声明并引用它，这就是特殊符号。只有使用ld链接器生成最终可执行文件的时候这些文件才存在。下面列举几个有代表性的特殊符号：</p>
<ul>
<li>__executable_start，程序起始地址，这不是入口地址，是程序最开始的地址</li>
<li>__etext或_etext或etext，代码段结束地址</li>
<li>_edata或edata，数据段结束地址</li>
<li>_end或end，程序结束地址</li>
</ul>
<p>以上地址都是程序被装载时的虚拟地址。</p>
<p>在程序中可以直接使用这些符号。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">char</span> <span class="n">__executable__start</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">char</span> <span class="n">etext</span><span class="p">[],</span> <span class="n">_etext</span><span class="p">[],</span> <span class="n">__etext</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">char</span> <span class="n">edata</span><span class="p">[],</span> <span class="n">_edata</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">char</span> <span class="n">end</span><span class="p">[],</span> <span class="n">_end</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Executable Start %X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>  <span class="n">__executable__start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Text End %X %X %X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">etext</span><span class="p">,</span> <span class="n">_etext</span><span class="p">,</span> <span class="n">__etext</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Data End %X %X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">edata</span><span class="p">,</span> <span class="n">_edata</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Executable End %X %X</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">_end</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="符号修饰和函数签名">符号修饰和函数签名</h3>
<p>早期符号和与之对应的函数名或变量名是一致的，就容易造成符号冲突问题，Unix下C语言规定全局的变量和函数经过编译后，相对应的符号名前加<code>_</code>暂缓这个问题，后来像C++这样的语言有命名空间这样的方法解决这个问题。</p>
<p>Linux下的GCC编译器已经默认不加<code>_</code>了，Windows平台下的依然保留。</p>
<p>为了支持C++函数重载、名称空间这样的机制，使得编译器和链接器能够区分重载的函数，就有了符号修饰或符号改编。例如下面的例子：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">func</span><span class="p">(</span><span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">C</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">class</span> <span class="nc">C2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">N</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">class</span> <span class="nc">C</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>上述函数有6个同名函数，不过返回类型和参数以及所在的类和名称空间有所不同。</p>
<p>这就靠函数签名，函数签名包含了一个函数的信息（函数名、参数类型、所在的类和名称空间等）。编译器和链接器处理符号的时候，它们使用名称修饰的方法使得每个函数签名对应一个修饰后名称。上述6个函数签名在GCC编译器下产生的修饰后名称如下：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">函数签名</th>
          <th style="text-align: center">修饰后名称（符号名）</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">int func(int)</td>
          <td style="text-align: center">_Z4funci</td>
      </tr>
      <tr>
          <td style="text-align: center">float func(float)</td>
          <td style="text-align: center">_Z4funcf</td>
      </tr>
      <tr>
          <td style="text-align: center">int C::func(int)</td>
          <td style="text-align: center">_ZN1C4funcEi</td>
      </tr>
      <tr>
          <td style="text-align: center">int C::C2::fun(int)</td>
          <td style="text-align: center">_ZN1C2C24funcEi</td>
      </tr>
      <tr>
          <td style="text-align: center">int N::func(int)</td>
          <td style="text-align: center">_AN1N4funcEi</td>
      </tr>
      <tr>
          <td style="text-align: center">int N::C::func(int)</td>
          <td style="text-align: center">_ZN1N1C4funcEi</td>
      </tr>
  </tbody>
</table>
<p>GCC的基本C++名称修饰方法如下：</p>
<p>所有的符号以<code>_Z</code>开头，对于嵌套的名字（名称空间或类）后面紧跟<code>N</code>，然后是名称空间和类的名字，名字前面的是名字字符串长度，以<code>E</code>为结尾，对于函数来说，参数列表紧跟在<code>E</code>后面。</p>
<p>c++filt可以解析被修饰过的名称：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ c++filt _ZN1N1C4funcEi
</span></span><span class="line"><span class="cl">N::C::func<span class="o">(</span>int<span class="o">)</span></span></span></code></pre></div></div>
<p>全局变量和局部静态变量依旧有签名和名称修饰的机制，不过变量的类型没有加入修饰后名称中。</p>
<p>不同的编译器采用不同的名称修饰的方法，这是不同的编译器之间难以相互操作的主要原因之一。</p>
<h3 id="extern-c">extern &ldquo;C&rdquo;</h3>
<p>C++提供了extern关键字用来声明或定义一个C语言的符号：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="s">&#34;C&#34;</span> <span class="kt">int</span> <span class="n">suc</span><span class="p">;</span></span></span></code></pre></div></div>
<p>上述声明和定义的函数和变量就不会受到C++名称修饰的作用。</p>
<p>C++无法链接C语言的库函数，因为C++对函数进行了名称修饰，但C语言没有。使用C++宏<code>__cplusplus</code>可以解决这个问题</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#enddef
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">funcation</span> <span class="n">detail</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef __cplusplus
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#enddef</span></span></span></code></pre></div></div>
<p>如果当前编译单元是C++代码，函数会在<code>extern &quot;C&quot;</code>里面被声明，如果C代码则是直接声明。</p>
<h3 id="弱符号和强符号">弱符号和强符号</h3>
<p>C/C++中，编译器默认函数和初始化的全局变量为强符号，未初始化的全局变量为弱符号，也可以通过GCC的<code>__attribute__((weak))</code>定义任何一个强符号为弱符号。
针对强弱符号，链接器按以下规则处理：</p>
<ol>
<li>不允许强符号被多次定义，不同的目标文件不能有同名的强符号。</li>
<li>如果一个符号在一个目标文件中是强符号，在其他文件中都是弱符号，那么就选择强符号</li>
<li>如果一个符号在所有目标文件中都是弱符号，那么选择占用空间最大的一个，比如A中定义了int的a，B中有个long的a，那么链接后符号a就是占8字节了</li>
</ol>
<h4 id="强引用和弱引用">强引用和弱引用</h4>
<p>对外部目标文件的符号引用在目标屋内按最终链接成可执行文件时，他们就要被正确决议，如果没找到符号的定义，链接器就要报错。</p>
<p>上述过程导致报错的情况就是强引用导致的，弱引用就算未定义也不会报错。链接器默认其为0或是一个特殊的值</p>
<p>GCC中，可以通过<code>attribute((weakref))</code>这个扩展关键字声明一个外部函数的引用为弱引用。</p>
<p>弱符号和弱引用对于库来说有用，库中定义的弱符号可以被用户定义的强符号所覆盖，比如程序的某些扩展功能是弱引用，就算去掉了扩展功能也可以正常链接，只是缺少了相应的功能。</p>
<h2 id="调试信息">调试信息</h2>
<p>GCC编译时加上<code>-g</code>参数就可以在产生的文件中加上调试信息，使用readelf等工具可以看到多了个<code>.debug</code>相关的段</p>
<p>Linux下，使用<code>strip</code>命令可以去掉ELF文件中的调试信息</p>
<h1 id="静态链接-1">静态链接</h1>
<p>以下面两个源文件进行举例说明：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* a.c */</span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">int</span> <span class="n">shared</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">shared</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* b.c */</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">shared</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="n">a</span> <span class="o">^=</span> <span class="o">*</span><span class="n">b</span> <span class="o">^=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>使用GCC编译器可以将<code>a.c</code>和<code>b.c</code>分别编译成目标文件<code>a.o</code>和<code>b.o</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -c a.c b.c</span></span></code></pre></div></div>
<h2 id="地址和空间分配">地址和空间分配</h2>
<h3 id="按序叠加">按序叠加</h3>
<p>将输入的目标文件按照次序叠加起来，但是规模稍大的程序有很多目标文件，每个目标文件都有代码段和数据段，如果只是简单地按次序堆叠就会浪费空间，因为它们有对齐要求。</p>
<h3 id="相似段合并">相似段合并</h3>
<p>将相同性质的段合并。</p>
<p><code>.bss</code>段在目标文件和可执行文件中并不占用空间，但它在装载的时候占用空间，所以链接器合并各个段的时候也会合并<code>.bss</code>段并且分配虚拟空间。</p>
<p>链接器为目标文件分配地址和空间的<strong>地址和空间</strong>有两个含义：一是输出的可执行文件中的空间，二是装载后的虚拟地址中的虚拟地址空间。对于<code>.bss</code>这样的段来说，分配空间的意义仅局限于虚拟地址空间，因为它们在文件中无内容。这里只谈虚拟地址空间的分配，因为它关系到链接器后面关于地址计算的步骤，可执行文件本身的空间分配和链接过程关系不大。</p>
<p>目前链接器的空间分配策略都采用相似段合并。</p>
<h3 id="两步连接">两步连接</h3>
<p>这是链接器采取的方法</p>
<h4 id="空间与地址分配">空间与地址分配</h4>
<p>扫描所有的目标文件，获得它们段的长度、属性和位置，将目标文件中的符号表内的符号定义和符号引用收集起来放入全局符号表。</p>
<p>这一步中，链接器获得所有目标文件的段长度并将它们合并，计算输出文件中各个段合并后的长度和位置，建立映射关系。</p>
<h4 id="符号解析和重定位">符号解析和重定位</h4>
<p>使用上一步收集的信息，读取输入文件中段的数据、重定位信息，进行符号解析和重定位，调整代码位置。</p>
<h4 id="使用ld进行链接">使用ld进行链接</h4>
<p>使用ld将两个文件链接起来</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ld a.o b.o -c main -o ab --fno-stack-protector</span></span></code></pre></div></div>
<p>-c指定入口函数，默认为_start，这里应为main</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -h a.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sections:
</span></span><span class="line"><span class="cl">Idx Name          Size      VMA               LMA               File off  Algn
</span></span><span class="line"><span class="cl">  <span class="m">0</span> .text         <span class="m">00000031</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000040</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
</span></span><span class="line"><span class="cl">  <span class="m">1</span> .data         <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000071</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, DATA
</span></span><span class="line"><span class="cl">  <span class="m">2</span> .bss          <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000071</span>  2**0
</span></span><span class="line"><span class="cl">                  ALLOC
</span></span><span class="line"><span class="cl">  <span class="m">3</span> .comment      0000001c  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000071</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">4</span> .note.GNU-stack <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  0000008d  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">5</span> .note.gnu.property <span class="m">00000030</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000090</span>  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">6</span> .eh_frame     <span class="m">00000038</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000c0  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ objdump -h b.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">b.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sections:
</span></span><span class="line"><span class="cl">Idx Name          Size      VMA               LMA               File off  Algn
</span></span><span class="line"><span class="cl">  <span class="m">0</span> .text         0000004b  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000040</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, CODE
</span></span><span class="line"><span class="cl">  <span class="m">1</span> .data         <span class="m">00000004</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  0000008c  2**2
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, DATA
</span></span><span class="line"><span class="cl">  <span class="m">2</span> .bss          <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000090</span>  2**0
</span></span><span class="line"><span class="cl">                  ALLOC
</span></span><span class="line"><span class="cl">  <span class="m">3</span> .comment      0000001c  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00000090</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">4</span> .note.GNU-stack <span class="m">00000000</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000ac  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY
</span></span><span class="line"><span class="cl">  <span class="m">5</span> .note.gnu.property <span class="m">00000030</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000b0  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">6</span> .eh_frame     <span class="m">00000038</span>  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  000000e0  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ objdump -h ab
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ab:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sections:
</span></span><span class="line"><span class="cl">Idx Name          Size      VMA               LMA               File off  Algn
</span></span><span class="line"><span class="cl">  <span class="m">0</span> .note.gnu.property <span class="m">00000030</span>  00000000004001c8  00000000004001c8  000001c8  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">1</span> .text         0000007c  <span class="m">0000000000401000</span>  <span class="m">0000000000401000</span>  <span class="m">00001000</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, CODE
</span></span><span class="line"><span class="cl">  <span class="m">2</span> .eh_frame     <span class="m">00000058</span>  <span class="m">0000000000402000</span>  <span class="m">0000000000402000</span>  <span class="m">00002000</span>  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</span></span><span class="line"><span class="cl">  <span class="m">3</span> .data         <span class="m">00000004</span>  <span class="m">0000000000403000</span>  <span class="m">0000000000403000</span>  <span class="m">00003000</span>  2**2
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, DATA
</span></span><span class="line"><span class="cl">  <span class="m">4</span> .comment      0000001b  <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>  <span class="m">00003004</span>  2**0
</span></span><span class="line"><span class="cl">                  CONTENTS, READONLY</span></span></code></pre></div></div>
<p>VMA表示虚拟地址，LMA表示加载地址。</p>
<p>链接前虚拟地址VMA为0，链接后各个段都分配了虚拟地址。</p>
<h3 id="符号地址的确定">符号地址的确定</h3>
<p>链接器分配好空间地址之后，各个段链接后的虚拟地址已经确定。</p>
<p>上一步完成之后，链接器开始计算各个符号的虚拟地址，因为符号在段内的相对位置是确定的，所以只需要<code>虚拟地址+偏移量</code>即可。</p>
<h2 id="重定位与符号解析">重定位与符号解析</h2>
<h3 id="重定位">重定位</h3>
<p>空间和地址的分配之后，链接器就进入了符号解析与重定位的步骤</p>
<p>在链接器对外部引用进行地址修正之前，编译器对这些符号的地址设置被<code>0x00000000</code>和<code>0xFFFFFFFC</code>代替</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -d a.o
</span></span><span class="line"><span class="cl">a.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;main&gt;:
</span></span><span class="line"><span class="cl">   0:   <span class="m">55</span>                      push   %rbp
</span></span><span class="line"><span class="cl">   1:   <span class="m">48</span> <span class="m">89</span> e5                mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">   4:   <span class="m">48</span> <span class="m">83</span> ec <span class="m">10</span>             sub    <span class="nv">$0</span>x10,%rsp
</span></span><span class="line"><span class="cl">   8:   c7 <span class="m">45</span> <span class="nb">fc</span> <span class="m">64</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    movl   <span class="nv">$0</span>x64,-0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span></span><span class="line"><span class="cl">   f:   <span class="m">48</span> 8d <span class="m">45</span> <span class="nb">fc</span>             lea    -0x4<span class="o">(</span>%rbp<span class="o">)</span>,%rax
</span></span><span class="line"><span class="cl">  13:   <span class="m">48</span> 8d <span class="m">15</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    lea    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rdx        <span class="c1"># 1a &lt;main+0x1a&gt;</span>
</span></span><span class="line"><span class="cl">  1a:   <span class="m">48</span> <span class="m">89</span> d6                mov    %rdx,%rsi
</span></span><span class="line"><span class="cl">  1d:   <span class="m">48</span> <span class="m">89</span> c7                mov    %rax,%rdi
</span></span><span class="line"><span class="cl">  20:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  25:   e8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          call   2a &lt;main+0x2a&gt;
</span></span><span class="line"><span class="cl">  2a:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  2f:   c9                      leave
</span></span><span class="line"><span class="cl">  30:   c3                      ret</span></span></code></pre></div></div>
<h3 id="重定位表-1">重定位表</h3>
<p>重定位表往往就是ELF文件中的一个段，每个需要重定位的段都存在对应的重定位表，比如代码段的重定位表就是<code>.rel.text</code>，<code>.data</code>段则为<code>.rel.data</code>。用objdump可以查看重定位表</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -r a.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RELOCATION RECORDS FOR <span class="o">[</span>.text<span class="o">]</span>:
</span></span><span class="line"><span class="cl">OFFSET           TYPE              VALUE
</span></span><span class="line"><span class="cl"><span class="m">0000000000000016</span> R_X86_64_PC32     shared-0x0000000000000004
</span></span><span class="line"><span class="cl"><span class="m">0000000000000026</span> R_X86_64_PLT32    swap-0x0000000000000004
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RELOCATION RECORDS FOR <span class="o">[</span>.eh_frame<span class="o">]</span>:
</span></span><span class="line"><span class="cl">OFFSET           TYPE              VALUE
</span></span><span class="line"><span class="cl"><span class="m">0000000000000020</span> R_X86_64_PC32     .text</span></span></code></pre></div></div>
<p>每个被重定位的地方叫一个重定位入口。<code>OFFSET</code>表示该入口在被重定位的段中的位置，<code>RELOCATION RECORDS FOR[.text]</code>表示这个重定位表是代码段的重定位表。</p>
<p>重定位表的定义如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">r_offset</span><span class="p">;</span>		<span class="cm">/* Address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">r_info</span><span class="p">;</span>	     <span class="cm">/* Relocation type and symbol index */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Rel</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* I have seen two different definitions of the Elf64_Rel and
</span></span></span><span class="line"><span class="cl"><span class="cm">   Elf64_Rela structures, so we&#39;ll leave them out until Novell (or
</span></span></span><span class="line"><span class="cl"><span class="cm">   whoever) gets their act together.  */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Relocation table entry with addend (in section of type SHT_RELA).  */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">r_offset</span><span class="p">;</span>		<span class="cm">/* Address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">r_info</span><span class="p">;</span>	     <span class="cm">/* Relocation type and symbol index */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Sxword</span>	<span class="n">r_addend</span><span class="p">;</span>		<span class="cm">/* Addend */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Rela</span><span class="p">;</span></span></span></code></pre></div></div>
<ul>
<li>r_offset，重定位入口的偏移。对于可重定位文件来说，其值是该重定位入口所要修正的位置的第一个字节相对于段起始的偏移；对于可执行文件或共享目标文件来说，其值为该重定位入口所要修正位置的第一个字节的虚拟地址。</li>
<li>r_info，重定位入口的类型和符号，该成员低8位表示重定位入口的类型，高24位表示重定位入口的符号在符号表中的下标（64位中被分成了两个32位）。由于不同的处理器的指令格式有所不同，所以重定位所要修正 的指令地址格式也不一样。对于可执行文件和共享目标文件来说，它们的重定位入口是动态链接类型的。</li>
<li>r_addend，用于计算重定位地址时的加数</li>
</ul>
<p>根据Oracle的文档描述，Rel有个隐式的加数</p>
<blockquote>
<p>Rela entries contain an explicit addend. Entries of type Rel store an implicit addend in the location to be modified.</p>
</blockquote>
<p><a href="https://docs.oracle.com/cd/E19683-01/816-1386/6m7qcoblj/index.html#chapter6-54839" target="_blank" rel="noopener noreffer ">File Format</a></p>
<h3 id="符号解析">符号解析</h3>
<p>重定位的过程伴随着符号的解析过程。重定位的过程中，每个重定位的入口都是对一个符号的引用，当链接器对某个符号的引用进行重定位时，它就要确定这个符号的目标地址。这时候链接器会去查找所有输入目标文件的符号表组成的全局符号表，找到相应的符号进行重定位。</p>
<h3 id="指令修正方式">指令修正方式</h3>
<p>重定位方式指令修正方式区别在于绝对寻址和相对寻址</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">宏定义</th>
          <th style="text-align: center">值</th>
          <th style="text-align: left">重定义修正方法</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">R_386_32</td>
          <td style="text-align: center">1</td>
          <td style="text-align: left">绝对寻址修正 符号的实际位置+保存在被修证位置的值</td>
      </tr>
      <tr>
          <td style="text-align: center">R_386_PC32</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">相对寻址修正 符号的实际位置+保存在被修正位置的值-被修正的位置（相对于段来说的偏移量或虚拟地址）</td>
      </tr>
  </tbody>
</table>
<p>假设a.o和b.o链接成最终可执行文件后，main函数的虚拟地址是0x1000，swap函数是0x2000，shared变量虚拟地址是0x3000，shared变量编译器未链接时填充为0x00000000，swap填充0xFFFFFFFC</p>
<p>shared的修正方式是R_386_32，即绝对地址修正。对于这个重定位入口，修正的结果应该是0x30000+0x00000000=0x3000</p>
<p>swap的休整方式R_386_PC32，相对寻址修正，结果是0x2000+(-4)-(0x1000+0x27)=0xFD5，常量-4是0xFFFFFFFC的补码形式，这条call指令是偏移为0x26的。</p>
<p>call指令的下一条指令的起始地址加上call指令后面接的偏移量，就是swap函数的地址。</p>
<p>上述关于指令修正方式的解释是书中所述。</p>
<p>之前objdump -r读到的类型是R_X86_64_PC32和R_X86_64_PLT32。前者和上面介绍的相对寻址修正差不多，后者和前者差不多（关于后者可以看下<a href="https://stackoverflow.com/questions/64424692/how-does-the-address-of-r-x86-64-plt32-computed" target="_blank" rel="noopener noreffer ">How does the address of R_X86_64_PLT32 computed?</a>）。</p>
<h2 id="common块">COMMON块</h2>
<p>弱符号机制允许同一个符号定义存在多个文件之中。如果一个弱符号定义在多个目标文件中而类型不同，链接器又不支持符号的类型该如何处理。这里有三种情况：</p>
<ol>
<li>两个或两个以上的强符号类型不一致</li>
<li>有一个强符号，其他都是弱符号，符号不一致</li>
<li>两个或两个以上弱符号不一致</li>
</ol>
<p>对于第一种情况，链接器会报符号多重定义错误，链接器所要应对的是后两种情况</p>
<p>链接器处理弱符号时采用的是COMMON（Common Block）块机制，即如果多个弱符号，以占用空间最大的符号为准。</p>
<p>如果一个符号是强符号，最终的输出结果和强符号相同，链接过程如果弱符号大于强符号，ld链接器就会打印一条警告信息。</p>
<p>这里也知道了为什么未初始化的全局变量不会像未初始化的局部静态变量一样被编译器放在<code>.bss</code>段里，因为编译器无法确定这个弱符号最终的大小，只能由链接器读取所有的目标文件之后确定大小。这时候未初始化的全局变量就会在BSS段分配空间了。总体来看，它俩是都存储在BSS段的。</p>
<p>GCC的<code>-fno-common</code>允许为所有未初始化的全局变量不以COMMON块的形式处理，或者使用<code>__attribute__</code>扩展</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">global</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">nocommon</span><span class="p">));</span></span></span></code></pre></div></div>
<p>一旦一个未初始化的全局变量不是以COMMON块的形式存在，那么它就相当于一个强符号，如果其他目标文件也有这个强符号，就会发生符号重复的错误。</p>
<h2 id="c相关的问题">C++相关的问题</h2>
<h3 id="重复代码消除">重复代码消除</h3>
<p>C++编译器可能产生很多重复的代码，比如模板、外部内联函数和虚函数表。一个模板在多个编译单元被实例化成为相同类型的时候就会产生重复的代码。</p>
<p>主流方法是将每个模板的实例代码都单独放在一个段里。比如有一个模板函数<code>add&lt;T&gt;()</code>一个编译单元以int和float，编译单元的亩薄啊文件就包含了连个该模板实例的段，假设分别为<code>.temp.add&lt;int&gt;</code>和<code>.temp.int&lt;float&gt;</code>，别的编译单元也以int和float实例化该模板函数时，也会产生相同的名字，这样最终链接的时候可以区分这些相同的模板实例段，将它们合并到代码段。</p>
<p>GCC和Visual C++都是如此，GCC最终链接合并的段叫做Link Once，段被命名为<code>.gnu.linkonce.name</code>，<code>name</code>是模板函数实例的修饰后名称。Visual C++做法稍有不同，它把这种类型的段叫做<code>COMDAT</code>这种段的属性字段都有<code>IMAGE_SCN_LNK_COMDAT</code>(0x00001000)标记，链接器看到这个标志就会认为这个段是<code>COMDAT</code>类型，链接时丢弃重复段。</p>
<p>上述方法说的是模板，对于外部内联函数和虚函数表来说是类似的。</p>
<h4 id="函数级别链接">函数级别链接</h4>
<p>VISUAL C++提供了函数级别链接选项这个选项让所有的函数能像前面介绍的模板函数一样单独保存在一个段里面，当链接器需要使用某个目标文件的函数的时候就会将它合并到输出文件中，抛弃目标文件中其他无用的函数。</p>
<p>这样的链接比起往常会把无用的函数一起链接进来的整个地址链接减少了空间浪费。但这个优化会减慢编译和链接过程，链接器会计算函数之间的依赖关系并把其放在独立的段中，目标文件随着段数目的增加会变得相对较大，重定位过程因为段的数目的增加变得复杂，目标函数的段的数量也有所增加</p>
<p>GCC提供了类似的机制，它有两个选择分别是<code>-ffunction-sections</code>和<code>-fdata-sections</code>，区别在于是将函数保存单独段还是变量保存单独段。</p>
<h3 id="全局构造与析构">全局构造与析构</h3>
<p>Linux系统一般程序入口是<code>_start</code>，这是Linux系统库（Glibc）的一部分。程序与和Glibc库链接在一起形成最终可执行文件之后，这个函数就是程序的初始化部分的入口，程序初始化完成部分完成一系列初始化过程之后会调用main函数，main函数结束之后返回到初始化部分，它会进行一些清理工作然后结束进程。</p>
<p>ELF定义了两个特殊的段——<code>.init</code>和<code>.fini</code>前者存放Glibc初始化部分安排执行的代码，后者存放main函数正常退出时Glibc执行的代码。</p>
<p>全局构造在main函数执行前执行，它的析构在main函数结束了再执行也是因此了。</p>
<h3 id="c与abi">C++与ABI</h3>
<p>编译器编译出的目标文件能够相互链接它们必须满足下列的条件</p>
<ul>
<li>采用同样的目标文件格式</li>
<li>拥有相同的符号修饰标准</li>
<li>变量的内存分布方式相同、函数调用方式相同</li>
<li>&hellip;&hellip;</li>
</ul>
<p>上述和可执行二进制兼容性相关的内容称为ABI（Application Binary Interfeace）</p>
<p>ABI和API的区别在于前者针对二进制层面，后者针对源代码层面。ABI的兼容程度要比API更为严格。比如POSIX这个API标准规定<code>printf()</code>这个函数的原型，保证了函数定义在所有遵循POSIX标准的系统之间都是一样的，但是它无法保证这个函数实际执行的时候，参数是按照什么顺序压栈，参数在堆栈上如何分布，调用指令是否相同（x86是call，MIPS是jal）。</p>
<p>C++让人诟病的就是二进制兼容不好，比起C语言来说更为不易。不仅不同编译器编译的二进制代码之间无法兼容，同一个编译器也有可能出现这个情况。</p>
<h2 id="静态库链接">静态库链接</h2>
<p>一种语言的开发环境往往附带语言库。这些库通常是对操作系统的API的包装。比如<code>printf()</code>函数会对字符串进行一些必要的处理后，最后调用操作系统提供的API。各个操作系统下在终端输出字符串的API都不一样，linux下是<code>write</code>系统调用，Windows下则是<code>WriteConsole</code>系统API。</p>
<p>库里面还会有一些很常用的函数，比如用于获取字符串长度的<code>strlen()</code>，该函数遍历整个字符串后返回字符串的长度，这个函数没有调用任何操作系统的API。</p>
<p>一个静态库可以简单地看作一组目标文件的集合，即多个目标文件压缩打包后形成的文件。比如linux中最常用的C语言静态库libc位于/usr/lib/libc.a，它属于Glibc项目的一部分。可以使用ar工具查看该文件包含了哪些目标文件。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ar -t /usr/lib/libc.a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">init-first.o
</span></span><span class="line"><span class="cl">libc-start.o
</span></span><span class="line"><span class="cl">sysdep.o
</span></span><span class="line"><span class="cl">version.o
</span></span><span class="line"><span class="cl">check_fds.o
</span></span><span class="line"><span class="cl">libc-tls.o
</span></span><span class="line"><span class="cl">dso_handle.o
</span></span><span class="line"><span class="cl">errno.o
</span></span><span class="line"><span class="cl">errno-loc.o
</span></span><span class="line"><span class="cl">iconv_open.o
</span></span><span class="line"><span class="cl">iconv.o
</span></span><span class="line"><span class="cl">iconv_close.o
</span></span><span class="line"><span class="cl">gconv_open.o
</span></span><span class="line"><span class="cl">gconv.o
</span></span><span class="line"><span class="cl">gconv_close.o
</span></span><span class="line"><span class="cl">gconv_db.o
</span></span><span class="line"><span class="cl">gconv_conf.o
</span></span><span class="line"><span class="cl">gconv_builtin.o
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>这些目标文件也会相互依赖，使用GCC编译器的<code>-verbose</code>选项可以把编译过程的中间步骤打印出来，<code>--fno-builtin</code>保证GCC不会开启内置函数的优化选项，可以从此一窥Hello.c的中间步骤</p>
<p>这里的Hello.c不是上面的，只是简单打印一个Hello</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$  gcc -static --verbose -fno-builtin Hello.c 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Using built-in specs.
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_GCC</span><span class="o">=</span>gcc
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_LTO_WRAPPER</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/lto-wrapper
</span></span><span class="line"><span class="cl">Target: x86_64-pc-linux-gnu
</span></span><span class="line"><span class="cl">Configured with: /build/gcc/src/gcc/configure --enable-languages<span class="o">=</span>c,c++,ada,fortran,go,lto,objc,obj-c++,d --enable-bootstrap --prefix<span class="o">=</span>/usr --libdir<span class="o">=</span>/usr/lib --libexecdir<span class="o">=</span>/usr/lib --mandir<span class="o">=</span>/usr/share/man --infodir<span class="o">=</span>/usr/share/info --with-bugurl<span class="o">=</span>https://bugs.archlinux.org/ --with-build-config<span class="o">=</span>bootstrap-lto --with-linker-hash-style<span class="o">=</span>gnu --with-system-zlib --enable-__cxa_atexit --enable-cet<span class="o">=</span>auto --enable-checking<span class="o">=</span>release --enable-clocale<span class="o">=</span>gnu --enable-default-pie --enable-default-ssp --enable-gnu-indirect-function --enable-gnu-unique-object --enable-libstdcxx-backtrace --enable-link-serialization<span class="o">=</span><span class="m">1</span> --enable-linker-build-id --enable-lto --enable-multilib --enable-plugin --enable-shared --enable-threads<span class="o">=</span>posix --disable-libssp --disable-libstdcxx-pch --disable-werror
</span></span><span class="line"><span class="cl">Thread model: posix
</span></span><span class="line"><span class="cl">Supported LTO compression algorithms: zlib zstd
</span></span><span class="line"><span class="cl">gcc version 12.2.1 <span class="m">20230111</span> <span class="o">(</span>GCC<span class="o">)</span> 
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">&#39;-static&#39;</span> <span class="s1">&#39;-v&#39;</span> <span class="s1">&#39;-fno-builtin&#39;</span> <span class="s1">&#39;-mtune=generic&#39;</span> <span class="s1">&#39;-march=x86-64&#39;</span> <span class="s1">&#39;-dumpdir&#39;</span> <span class="s1">&#39;a-&#39;</span>
</span></span><span class="line"><span class="cl"> /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/cc1 -quiet -v Hello.c -quiet -dumpdir a- -dumpbase Hello.c -dumpbase-ext .c -mtune<span class="o">=</span>generic -march<span class="o">=</span>x86-64 -version -fno-builtin -o /tmp/cc0STAo1.s
</span></span><span class="line"><span class="cl">GNU C17 <span class="o">(</span>GCC<span class="o">)</span> version 12.2.1 <span class="m">20230111</span> <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span>
</span></span><span class="line"><span class="cl">        compiled by GNU C version 12.2.1 20230111, GMP version 6.2.1, MPFR version 4.2.0, MPC version 1.3.1, isl version isl-0.25-GMP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GGC heuristics: --param ggc-min-expand<span class="o">=</span><span class="m">100</span> --param ggc-min-heapsize<span class="o">=</span><span class="m">131072</span>
</span></span><span class="line"><span class="cl">ignoring nonexistent directory <span class="s2">&#34;/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../x86_64-pc-linux-gnu/include&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#include &#34;...&#34; search starts here:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#include &lt;...&gt; search starts here:</span>
</span></span><span class="line"><span class="cl"> /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include
</span></span><span class="line"><span class="cl"> /usr/local/include
</span></span><span class="line"><span class="cl"> /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include-fixed
</span></span><span class="line"><span class="cl"> /usr/include
</span></span><span class="line"><span class="cl">End of search list.
</span></span><span class="line"><span class="cl">GNU C17 <span class="o">(</span>GCC<span class="o">)</span> version 12.2.1 <span class="m">20230111</span> <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span>
</span></span><span class="line"><span class="cl">        compiled by GNU C version 12.2.1 20230111, GMP version 6.2.1, MPFR version 4.2.0, MPC version 1.3.1, isl version isl-0.25-GMP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GGC heuristics: --param ggc-min-expand<span class="o">=</span><span class="m">100</span> --param ggc-min-heapsize<span class="o">=</span><span class="m">131072</span>
</span></span><span class="line"><span class="cl">Compiler executable checksum: c5620313e3defc07ff561cb90de48ddc
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">&#39;-static&#39;</span> <span class="s1">&#39;-v&#39;</span> <span class="s1">&#39;-fno-builtin&#39;</span> <span class="s1">&#39;-mtune=generic&#39;</span> <span class="s1">&#39;-march=x86-64&#39;</span> <span class="s1">&#39;-dumpdir&#39;</span> <span class="s1">&#39;a-&#39;</span>
</span></span><span class="line"><span class="cl"> as -v --64 -o /tmp/cc1DGmYx.o /tmp/cc0STAo1.s
</span></span><span class="line"><span class="cl">GNU assembler version 2.40 <span class="o">(</span>x86_64-pc-linux-gnu<span class="o">)</span> using BFD version <span class="o">(</span>GNU Binutils<span class="o">)</span> 2.40
</span></span><span class="line"><span class="cl"><span class="nv">COMPILER_PATH</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/:/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/
</span></span><span class="line"><span class="cl"><span class="nv">LIBRARY_PATH</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../lib/:/lib/../lib/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../:/lib/:/usr/lib/
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">&#39;-static&#39;</span> <span class="s1">&#39;-v&#39;</span> <span class="s1">&#39;-fno-builtin&#39;</span> <span class="s1">&#39;-mtune=generic&#39;</span> <span class="s1">&#39;-march=x86-64&#39;</span> <span class="s1">&#39;-dumpdir&#39;</span> <span class="s1">&#39;a.&#39;</span>
</span></span><span class="line"><span class="cl"> /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/collect2 -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/liblto_plugin.so -plugin-opt<span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/lto-wrapper -plugin-opt<span class="o">=</span>-fresolution<span class="o">=</span>/tmp/cc5qtzYs.res -plugin-opt<span class="o">=</span>-pass-through<span class="o">=</span>-lgcc -plugin-opt<span class="o">=</span>-pass-through<span class="o">=</span>-lgcc_eh -plugin-opt<span class="o">=</span>-pass-through<span class="o">=</span>-lc --build-id --hash-style<span class="o">=</span>gnu -m elf_x86_64 -static /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../lib/crt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/crtbeginT.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1 -L/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../.. /tmp/cc1DGmYx.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/crtend.o /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/../../../../lib/crtn.o
</span></span><span class="line"><span class="cl"><span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">&#39;-static&#39;</span> <span class="s1">&#39;-v&#39;</span> <span class="s1">&#39;-fno-builtin&#39;</span> <span class="s1">&#39;-mtune=generic&#39;</span> <span class="s1">&#39;-march=x86-64&#39;</span> <span class="s1">&#39;-dumpdir&#39;</span> <span class="s1">&#39;a.&#39;</span></span></span></code></pre></div></div>
<p>其中关键的三个步骤分别在第12行、31行和36行</p>
<ol>
<li>调用cc1程序，这个程序实际上就是GCC的C语言编译器，它将Hello.c编译成一个临时汇编文件/tmp/cc0STAo1.s</li>
<li>调用as程序（GNU的汇编器），它将/tmp/cc0STAo1.s会变成临时目标文件/tmp/cc1DGmYx.o</li>
<li>调用collect2程序完成最后的链接，而不是ld程序。</li>
</ol>
<p>collect2可以看作是ld链接器的包装，它会调用ld链接器完成对目标文件的链接，再对链接结果进行一些处理。</p>
<h2 id="链接过程控制">链接过程控制</h2>
<p>在大多数情况下，链接器默认链接规则没有问题，但对一些有特殊要求的程序，比如操作系统内核、BIOS和一些没有操作系统的情况下运行的程序（Boot Loader或嵌入式系统的程序），以及一些需要特殊的链接过程的程序等，它们往往受限于一些特殊条件，如需要指定输出文件的各个段的虚拟地址、段的名称、段存放的顺序等，因为这些特殊的环境，特别是某些硬件调价的限制，往往对程序的各个段的地址有特殊的要求。</p>
<h3 id="链接控制脚本">链接控制脚本</h3>
<ul>
<li>使用命令行给链接器指定参数，比如<code>ld -e</code>这样的</li>
<li>将链接指定存放在目标文件里，编译器经常通过这种方法想链接器传递指令。</li>
<li>使用链接控制脚本</li>
</ul>
<p>由于各个链接平台的链接过程不同，这里只说明ld链接器。</p>
<p>ld在用户没有指定链接脚本的时候会使用默认脚本，可以使用下面的命令查看ld默认的链接脚本</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ld -verbose</span></span></code></pre></div></div>
<p>默认ld链接脚本存放在/usr/lib/ldscripts/下，不同的机器平台和输出文件格式都有对于的脚本</p>
<p>为了精准控制链接过程，也可以使用自己的链接脚本，使用-T参数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ld -T link.script</span></span></code></pre></div></div>
<h3 id="最小的程序">最“小”的程序</h3>
<p>为了演示链接的控制过程，下面将做一个最“小”的程序。也就是打印一个Hello。但不能像上面演示gcc编译过程时使用的那样，理由如下</p>
<ul>
<li>其使用了<code>printf()</code>函数，该函数时系统C语言库的一部分。为了使用该函数，连接时就需要将C语言库和目标文件链接产生最终可执行文件。这里希望它能脱离C语言库。</li>
<li>由于使用了库，就需要main函数。程序入口是库的_start，由库负责初始化后调用main函数来执行程序的主体部分。这里为了加以区分，会使用nomain作为程序的入口。</li>
<li>这里希望把所有段都合并到一个叫tinytext的段，这是由链接脚本控制链接过程生成的。</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq $1, %rax     </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq $1, %rdi     </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq (str), %rsi  </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq $6, %rdx     </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;syscall           </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">exit</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq $60, %rax </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;movq $42, %rdi </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;syscall        </span><span class="se">\n\t</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">nomain</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">print</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">exit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>与本书不同的是，我尽量采用64位的，所以程序源码已经被我修改了。</p>
<p>这是使用C语言，如果使用汇编，还会进一步压缩文件的大小[doge]，下面是我更改蒋炎岩老师在网站上放的一段代码，下面的下载链接就是蒋炎岩老师所写代码的下载链接</p>
<p><a href="http://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer ">下载链接</a></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="na">.globl</span> <span class="no">nomain</span>
</span></span><span class="line"><span class="cl"><span class="nl">nomain:</span>
</span></span><span class="line"><span class="cl">  <span class="nf">movq</span> <span class="no">$1</span><span class="p">,</span> <span class="nv">%rax</span>
</span></span><span class="line"><span class="cl">  <span class="nf">movq</span> <span class="no">$1</span><span class="p">,</span> <span class="nv">%rdi</span>
</span></span><span class="line"><span class="cl">  <span class="nf">movq</span> <span class="no">$mes</span><span class="p">,</span> <span class="nv">%rsi</span>
</span></span><span class="line"><span class="cl">  <span class="nf">movq</span> <span class="no">$6</span><span class="p">,</span> <span class="nv">%rdx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">syscall</span> 
</span></span><span class="line"><span class="cl">  <span class="no">movq</span> <span class="no">$60</span><span class="p">,</span>  <span class="nv">%rax</span>
</span></span><span class="line"><span class="cl">  <span class="nf">movq</span> <span class="no">$42</span><span class="p">,</span>  <span class="nv">%rdi</span>
</span></span><span class="line"><span class="cl">  <span class="nf">syscall</span>  
</span></span><span class="line"><span class="cl"><span class="no">mes</span><span class="p">:</span> <span class="no">.ascii</span> <span class="err">&#34;</span><span class="no">Hello</span><span class="err">\</span><span class="no">n</span><span class="err">&#34;</span></span></span></code></pre></div></div>
<p>这里没有使用库函数，而是直接使用了linux的系统调用完成了在终端打印hello并退出，下面是他俩的函数声明：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">ssize_t</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="n">buf</span><span class="p">[.</span><span class="n">count</span><span class="p">],</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">_exit</span><span class="p">(</span><span class="kt">int</span> <span class="n">status</span><span class="p">)</span></span></span></code></pre></div></div>
<p>关于<code>write</code>的介绍，可以在man-pages中找到，同理，<code>exit</code>也可以</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ man <span class="m">2</span> write</span></span></code></pre></div></div>
<blockquote>
<p>write() writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.</p>
</blockquote>
<p><a href="https://man7.org/linux/man-pages/man2/write.2.html" target="_blank" rel="noopener noreffer ">write(2) — Linux manual page</a></p>
<p>在bash shell中，可以通过<code>echo $?</code>查看退出码42，如果是fish shell，默认直接显示，而且不能通过<code>echo $?</code>打印。</p>
<p>先看一个简单的链接脚本test.lds（一般链接脚本的后缀名都是lds,ld script）的例子</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ENTRY(nomain)
</span></span><span class="line"><span class="cl">SECTIONS
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">     . = 0x00400000 + SIZEOF_HEADERS;
</span></span><span class="line"><span class="cl">     tinytext : { *(.text) * (.data) * (.rodata) }
</span></span><span class="line"><span class="cl">     /DISCARD/ : { *(.comment) }
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div></div>
<p>第一行指定了程序的入口为<code>nomain()</code>函数，后面的<code>SECTIONS</code>命令一般是链接脚本的主体，这个命令指定了各种输入端到输出段的交换。这里面有三个语句，第一个是赋值语句，剩下两个是段转换规则，其含义基本如下：</p>
<ul>
<li>. = 0x00400000 + SIZEOF_HEADERS;
<ul>
<li>第一条赋值语句的意思是将当前虚拟地址空间设置成 0x00400000 + SIZEOF_HEADERS，<code>SIZEOF_HEADERS</code>为输出文件的文件头大小。<code>.</code>表示当前虚拟地址，因为后面紧跟着输出段<code>tinytext</code>，所以这个段的起始地址就是 0x00400000 + SIZEOF_HEADERS。</li>
</ul>
</li>
<li>tinytext : { *(.text) * (.data) * (.rodata) }
<ul>
<li>所有输入文件名字为<code>.text</code>、<code>.data</code>和<code>.rodata</code>的段依次合并到输出文件的<code>.tinytext</code></li>
</ul>
</li>
<li>/DISCARD/ : { *(.comment) }
<ul>
<li>将所有输入文件中名字为<code>.commit</code>的段丢弃，不保存在输出文件中</li>
</ul>
</li>
</ul>
<p>最后我的打印Hello程序的链接脚本是：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ENTRY(nomain)
</span></span><span class="line"><span class="cl">SECTIONS
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">     . = 0x00400000 + SIZEOF_HEADERS;
</span></span><span class="line"><span class="cl">     tinytext : { *(.text) * (.data) * (.rodata) *(.data.rel.local) }
</span></span><span class="line"><span class="cl">     /DISCARD/ : { *(.comment) *(.note.gnu.property) *(.eh_frame )  }
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -c -fno-builtin hello.c
</span></span><span class="line"><span class="cl">$ ld -static -T test.lds -o hello hello.o
</span></span><span class="line"><span class="cl">ld: warning: hello has a LOAD segment with RWX permissions</span></span></code></pre></div></div>
<p>使用objdump可以发现只有tinytext一个段了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -h hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hello:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sections:
</span></span><span class="line"><span class="cl">Idx Name          Size      VMA               LMA               File off  Algn
</span></span><span class="line"><span class="cl">  <span class="m">0</span> tinytext      <span class="m">00000068</span>  00000000004000e8  00000000004000e8  000000e8  2**3
</span></span><span class="line"><span class="cl">                  CONTENTS, ALLOC, LOAD, CODE</span></span></code></pre></div></div>
<p>但使用readelf可以发现事实并非如此</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$  readelf -S hello
</span></span><span class="line"><span class="cl">There are <span class="m">5</span> section headers, starting at offset 0x228:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Section Headers:
</span></span><span class="line"><span class="cl">  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
</span></span><span class="line"><span class="cl">       Size              EntSize          Flags  Link  Info  Align
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 0<span class="o">]</span>                   NULL             <span class="m">0000000000000000</span>  <span class="m">00000000</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">0</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 1<span class="o">]</span> tinytext          PROGBITS         00000000004000e8  000000e8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000068</span>  <span class="m">0000000000000000</span> WAX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 2<span class="o">]</span> .symtab           SYMTAB           <span class="m">0000000000000000</span>  <span class="m">00000150</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000090</span>  <span class="m">0000000000000018</span>           <span class="m">3</span>     <span class="m">2</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 3<span class="o">]</span> .strtab           STRTAB           <span class="m">0000000000000000</span>  000001e0
</span></span><span class="line"><span class="cl">       000000000000001e  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 4<span class="o">]</span> .shstrtab         STRTAB           <span class="m">0000000000000000</span>  000001fe
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000024</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">Key to Flags:
</span></span><span class="line"><span class="cl">  W <span class="o">(</span>write<span class="o">)</span>, A <span class="o">(</span>alloc<span class="o">)</span>, X <span class="o">(</span>execute<span class="o">)</span>, M <span class="o">(</span>merge<span class="o">)</span>, S <span class="o">(</span>strings<span class="o">)</span>, I <span class="o">(</span>info<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  L <span class="o">(</span>link order<span class="o">)</span>, O <span class="o">(</span>extra OS processing required<span class="o">)</span>, G <span class="o">(</span>group<span class="o">)</span>, T <span class="o">(</span>TLS<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  C <span class="o">(</span>compressed<span class="o">)</span>, x <span class="o">(</span>unknown<span class="o">)</span>, o <span class="o">(</span>OS specific<span class="o">)</span>, E <span class="o">(</span>exclude<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  D <span class="o">(</span>mbind<span class="o">)</span>, l <span class="o">(</span>large<span class="o">)</span>, p <span class="o">(</span>processor specific<span class="o">)</span></span></span></code></pre></div></div>
<p>ld链接器默认会产生序号为2、3、4这三个段。对于可执行文件来说，符号表和字符串表是可选的，但段名字符串表保存段名故而不可缺少。</p>
<p>可以使用<code>ld -s</code>禁止产生符号表或者使用<code>strip</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ld -static -s -T test.lds -o hello hello.o
</span></span><span class="line"><span class="cl">ld: warning: hello has a LOAD segment with RWX permissions
</span></span><span class="line"><span class="cl">$ readelf -S hello
</span></span><span class="line"><span class="cl">There are <span class="m">3</span> section headers, starting at offset 0x168:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Section Headers:
</span></span><span class="line"><span class="cl">  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
</span></span><span class="line"><span class="cl">       Size              EntSize          Flags  Link  Info  Align
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 0<span class="o">]</span>                   NULL             <span class="m">0000000000000000</span>  <span class="m">00000000</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">0</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 1<span class="o">]</span> tinytext          PROGBITS         00000000004000e8  000000e8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000068</span>  <span class="m">0000000000000000</span> WAX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 2<span class="o">]</span> .shstrtab         STRTAB           <span class="m">0000000000000000</span>  <span class="m">00000150</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000014</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">Key to Flags:
</span></span><span class="line"><span class="cl">  W <span class="o">(</span>write<span class="o">)</span>, A <span class="o">(</span>alloc<span class="o">)</span>, X <span class="o">(</span>execute<span class="o">)</span>, M <span class="o">(</span>merge<span class="o">)</span>, S <span class="o">(</span>strings<span class="o">)</span>, I <span class="o">(</span>info<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  L <span class="o">(</span>link order<span class="o">)</span>, O <span class="o">(</span>extra OS processing required<span class="o">)</span>, G <span class="o">(</span>group<span class="o">)</span>, T <span class="o">(</span>TLS<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  C <span class="o">(</span>compressed<span class="o">)</span>, x <span class="o">(</span>unknown<span class="o">)</span>, o <span class="o">(</span>OS specific<span class="o">)</span>, E <span class="o">(</span>exclude<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  D <span class="o">(</span>mbind<span class="o">)</span>, l <span class="o">(</span>large<span class="o">)</span>, p <span class="o">(</span>processor specific<span class="o">)</span></span></span></code></pre></div></div>
<h3 id="ld链接语法简介">ld链接语法简介</h3>
<p>ld链接器的连接脚本语法继承于AT&amp;T链接器命令语言的语法。连接脚本由一系列语句组成，语句分两种，一种是命令语句，另一种是赋值语句。</p>
<p>之前的test.lds有两个命令语句，<code>ENTRY</code>和<code>SECTIONS</code>。其中<code>SECTIONS</code>负责链接过程的段转换过程，是链接最核心和最复杂的部分。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">命令语句</th>
          <th style="text-align: left">说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">ENTRY(symbol)</td>
          <td style="text-align: left">指定符号symbol的值为入口地址。入口地址即进程执行的第一条用户空间的指令在进程地址空间的地址，它被指定在ELF文件头Elf64_Ehdr的e_entry成员中。ld有多种方法设置进程入口地址。</td>
      </tr>
      <tr>
          <td style="text-align: left">STARTUP(filename)</td>
          <td style="text-align: left">将文件filename作为链接过程的第一个输入文件</td>
      </tr>
      <tr>
          <td style="text-align: left">SEARCH_DIR(path)</td>
          <td style="text-align: left">将路径path加入到ld链接器的库查找目录。ld会根据指定的目录去查找相应的库，也可以使用-Lpath指定</td>
      </tr>
      <tr>
          <td style="text-align: left">INPUT(file,file,&hellip;)</td>
          <td style="text-align: left">将指定文件作为链接过程的输入文件</td>
      </tr>
      <tr>
          <td style="text-align: left">INCLUDE filename</td>
          <td style="text-align: left">将指定文件包含进链接脚本</td>
      </tr>
      <tr>
          <td style="text-align: left">PROVIDE(symbol)</td>
          <td style="text-align: left">将链接脚本中定义某个符号。该符号可以在程序中被引用。之前提到的特殊符号都是通过这个方法定义在脚本中</td>
      </tr>
  </tbody>
</table>
<p>ld有多种方法设置进程入口地址，其优先级为：</p>
<ol>
<li>ld命令行的-e选项</li>
<li>链接脚本的<code>ENTRY</code>命令</li>
<li>如果<code>_strat</code>符号有定义，使用这个符号</li>
<li>如果存在<code>.text</code>段，使用这个段的第一个字节的地址</li>
<li>使用0</li>
</ol>
<p><code>SECTIONS</code>命令语句的基本格式为：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SECTIONS
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">     ...
</span></span><span class="line"><span class="cl">     secname : { contents }
</span></span><span class="line"><span class="cl">     ...
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div></div>
<p>secname表示输出端的段名，secname后面需要跟一个空格，后面紧跟着冒号和一对大括号。contents描述了一套规则和条件，它表示符号这种条件的输入段将合并到这个输出端中。输出段名的命名方法必须满足输出文件的格式要求，比如使用ld产生一个a.out格式的文件，输出段名不能使用<code>.text</code>、<code>data</code>和<code>.bss</code>之外的任何名字，因为这个格式规定了段名。</p>
<p>有一个特殊的段就是<code>/DISCARD/</code>如果这个名字是输出端，所有符合contents条件的段都会被丢弃。</p>
<p>contents可以包含多个条件，条件之间使用空格隔开。条件的写法如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">filename(sections)</span></span></code></pre></div></div>
<p>fielname是输入文件名，sections是段名</p>
<ul>
<li>file1.o(.data)表示输入文件名为file1.o的文件中的<code>.data</code>段符合条件</li>
<li>file1.o(.data .rodata)或file1.o(.data, .rodata)二者都表示file1.o文件中的<code>.data</code>或<code>.rodata</code>符合条件</li>
<li>file1.o表示其所有段都符合条件</li>
<li>*(.data)表示所有输入文件的<code>.data</code>段符合条件。*是通配符，类似正则表达式的*，这里允许使用正则表达式</li>
</ul>
<h2 id="bfd库">BFD库</h2>
<p>BFD (Binary File Descriptor libray)是一个GNU项目，它目标是通过一种同意的接口去处理不同的目标格式，因为现在硬件和软件平台种类繁多。</p>
<p>现在的GCC、ld、GDB及Binutils的其他工具都通过BFD库处理目标文件，而不是直接操作目标文件。</p>
<h1 id="windows-pecoff">Windows PE/COFF</h1>
<p>Windows引入了一种叫PE (Protable Executable)的可执行格式作为该平台的标准可执行文件格式。PE和ELF同根同源，二者都由COFF (Common Object File Format)格式发展而来。</p>
<p>微软对64位Windows平台的PE结构做了一些修改，新的文件格式叫做PE32+，新格式没有添加任何结构，最大变化就是把32位的字段改成了64位。</p>
<p>与ELF文件相同，PE/COFF格式也采取基于段的格式。代码段名字往往叫做<code>.code</code>，数据段叫<code>.data</code>，不同编译器使用的段名可能有所不同。</p>
<h2 id="pe的前身-coff">PE的前身-COFF</h2>
<p>还是使用最开始那个Hello.c的例子</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//Hello.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">fun1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">gloabl_init_var</span> <span class="o">=</span> <span class="mi">666</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">global_uninit_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">static_init_var</span> <span class="o">=</span> <span class="mi">999</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">static_uninit_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fun1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fun1</span><span class="p">(){}</span></span></span></code></pre></div></div>
<p>使用CL编译器，这里用的是VS2022中下载的相关工具，而非书中介绍的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ CL /c /Za Hello.c</span></span></code></pre></div></div>
<p><code>/c</code>表示只编译不链接，<code>/Za</code>表示禁用语言扩展</p>
<p>和GUN的工具链中的objdump一样，这里也有一个类似的工具，就是dumpbin</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ dumpbin /ALL .<span class="se">\H</span>ello.obj &gt; Hello.txt</span></span></code></pre></div></div>
<p><code>/ALL</code>表示打印目标文件的所有相关信息，也可以使用<code>/SUMMARY</code>选项查看基本信息</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$  dumpbin /SUMMARY .<span class="se">\H</span>ello.obj
</span></span><span class="line"><span class="cl">Microsoft <span class="o">(</span>R<span class="o">)</span> COFF/PE Dumper Version 14.34.31937.0
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> Microsoft Corporation.  All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dump of file .<span class="se">\H</span>ello.obj
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">File Type: COFF OBJECT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Summary
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="m">70</span> .chks64
</span></span><span class="line"><span class="cl">           B .data
</span></span><span class="line"><span class="cl">          <span class="m">78</span> .debug<span class="nv">$S</span>
</span></span><span class="line"><span class="cl">          <span class="m">18</span> .drectve
</span></span><span class="line"><span class="cl">          <span class="m">24</span> .pdata
</span></span><span class="line"><span class="cl">          D6 .text<span class="nv">$mn</span>
</span></span><span class="line"><span class="cl">          <span class="m">18</span> .xdata</span></span></code></pre></div></div>
<h3 id="coff文件结构">COFF文件结构</h3>
<p>COFF文件的文件头包含了两部分，一个是描述文件总体结构和属性的映像头 (Image Header)，另一个是描述该文件包含的段属性的段表 (Section Table)。</p>
<hr>
<p>映像 (Image)：因为PE文件在装载时被直接映射到进程的虚拟空间中运行，它时进程的虚拟空间的映像。所以PE可执行文件很多时候被叫做映像文件 (Image File)。</p>
<table>
  <thead>
      <tr>
          <th></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">Image Header IMAGE_FILE_HEADER</td>
      </tr>
      <tr>
          <td style="text-align: center">Section Table IMAGE_SECTION_HEADER[]</td>
      </tr>
      <tr>
          <td style="text-align: center">.text</td>
      </tr>
      <tr>
          <td style="text-align: center">.data</td>
      </tr>
      <tr>
          <td style="text-align: center">.drectve</td>
      </tr>
      <tr>
          <td style="text-align: center">.debug$S</td>
      </tr>
      <tr>
          <td style="text-align: center">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: center">Symbol Table</td>
      </tr>
  </tbody>
</table>
<hr>
<p>我并不想画图，所以用表格展示了，自然第一个空着的那样是应该省略的。</p>
<p>文件头里面描述COFF总体属性的映像头时一个IMAGE_FILE_HEADER的结构，和ELF中的Elf64_Ehdr作用相同。在微软SDK目录下的winnt.h文件中可以找到相关定义</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_FILE_HEADER</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">Machine</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">NumberOfSections</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">TimeDateStamp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">PointerToSymbolTable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">NumberOfSymbols</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">SizeOfOptionalHeader</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">Characteristics</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IMAGE_FILE_HEADER</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_FILE_HEADER</span><span class="p">;</span></span></span></code></pre></div></div>
<p>对照dumpbin产生的txt文件，会发现这个结构和文本中FILE HEADER VALUES是对应的。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dump of file .\Hello.obj
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">File Type: COFF OBJECT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">FILE HEADER VALUES
</span></span><span class="line"><span class="cl">            8664 machine (x64)
</span></span><span class="line"><span class="cl">               E number of sections
</span></span><span class="line"><span class="cl">        63D72E72 time date stamp Mon Jan 30 10:41:54 2023
</span></span><span class="line"><span class="cl">             50B file pointer to symbol table
</span></span><span class="line"><span class="cl">              33 number of symbols
</span></span><span class="line"><span class="cl">               0 size of optional header
</span></span><span class="line"><span class="cl">               0 characteristics
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>可以看到目标文件类型是COFF OBJECT，文件头包含了目标机器类型，这里是0X8664，同样在winnt.h文件中可以看到关于这些值的定义</p>
<p>下面小截取一手0x8664的定义，还有很多平台就不都拿过来了。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define IMAGE_FILE_MACHINE_AMD64             0x8664  </span><span class="c1">// AMD64 (K8)
</span></span></span></code></pre></div></div>
<p>time date stamp表示PE文件的创建时间。file pointer to symbol table表示符号表在PE中的位置。size of optional header指的是Optional Header的大小，这个结构只存在于PE文件，COFF目标文件中不存在该结构，所以为0。</p>
<p>映像头后面紧跟着的就是COFF文件的段表，它是一个类型为IMAGE_SECTION_HEADER结构的数组，数组里面每个元素代表一个段，和ELF中Elf64_Shdr类似。它也被定义在winnt.h中。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define IMAGE_SIZEOF_SHORT_NAME              8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_SECTION_HEADER</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BYTE</span>    <span class="n">Name</span><span class="p">[</span><span class="n">IMAGE_SIZEOF_SHORT_NAME</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">DWORD</span>   <span class="n">PhysicalAddress</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">DWORD</span>   <span class="n">VirtualSize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="n">Misc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">VirtualAddress</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">SizeOfRawData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">PointerToRawData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">PointerToRelocations</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">PointerToLinenumbers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">NumberOfRelocations</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">NumberOfLinenumbers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">Characteristics</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IMAGE_SECTION_HEADER</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_SECTION_HEADER</span><span class="p">;</span></span></span></code></pre></div></div>
<p>可以看到每个段所拥有的属性包括段名、物理地址、虚拟地址、原始数据大小、段在文件中的位置、该段的重定位表在文件中的位置、该段的行号表在文件中的位置、标志位等。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">字段</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">VirtualSize</td>
          <td style="text-align: left">该段被加载至内存后的大小</td>
      </tr>
      <tr>
          <td style="text-align: left">VirtualAddress</td>
          <td style="text-align: left">该段被加载至内存后的虚拟地址</td>
      </tr>
      <tr>
          <td style="text-align: left">SizeOfRawData</td>
          <td style="text-align: left">该段在文件中的大小</td>
      </tr>
      <tr>
          <td style="text-align: left">Characteristics</td>
          <td style="text-align: left">段的属性</td>
      </tr>
  </tbody>
</table>
<p>SizeOfRawData的值可能和VirtualSize不一样，比如<code>.bss</code>段的SizeOfRawData会是0，而VirtualSize值是<code>.bss</code>段的大小。另外涉及到内存对齐等问题，前者的值往往要比后者小</p>
<p>段的属性主要包含段的类型（代码、数据、bss）、对齐方式及权限。</p>
<p>段表后就是具体段的内容了，由于介绍过和COFF相似的ELF的一些段，所以下面只介绍ELF中不存在的段，<code>.debug$S</code>段和<code>.drectve</code>段。</p>
<h2 id="链接指示信息">链接指示信息</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SECTION HEADER #1
</span></span><span class="line"><span class="cl">.drectve name
</span></span><span class="line"><span class="cl">       0 physical address
</span></span><span class="line"><span class="cl">       0 virtual address
</span></span><span class="line"><span class="cl">      18 size of raw data
</span></span><span class="line"><span class="cl">     244 file pointer to raw data (00000244 to 0000025B)
</span></span><span class="line"><span class="cl">       0 file pointer to relocation table
</span></span><span class="line"><span class="cl">       0 file pointer to line numbers
</span></span><span class="line"><span class="cl">       0 number of relocations
</span></span><span class="line"><span class="cl">       0 number of line numbers
</span></span><span class="line"><span class="cl">  100A00 flags
</span></span><span class="line"><span class="cl">         Info
</span></span><span class="line"><span class="cl">         Remove
</span></span><span class="line"><span class="cl">         1 byte align
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RAW DATA #1
</span></span><span class="line"><span class="cl">  00000000: 20 20 20 2F 44 45 46 41 55 4C 54 4C 49 42 3A 22     /DEFAULTLIB:&#34;
</span></span><span class="line"><span class="cl">  00000010: 4C 49 42 43 4D 54 22 20                          LIBCMT&#34; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Linker Directives
</span></span><span class="line"><span class="cl">   -----------------
</span></span><span class="line"><span class="cl">   /DEFAULTLIB:LIBCMT</span></span></code></pre></div></div>
<p>上面的就是Hello.txt中关于<code>.drectve</code>段相关的内容。drectve实际上是directive的缩写，它的内容是编译器传递给链接器的指令，即编译器告诉链接器该如何链接这个目标文件。段名后面就是段的属性，包括地址、长度、位置等属性，最后一个属性是flags，也就是IMAGE_SECTION_HEADER中的Characteristics成员，<code>.drectve</code>段的标志位是0x100A00。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">标志位</th>
          <th style="text-align: left">宏定义</th>
          <th style="text-align: left">意义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">0x00100000</td>
          <td style="text-align: left">IMAGE_SCN_ALIGN_1BYTES</td>
          <td style="text-align: left">1字节对齐。相当于不对齐</td>
      </tr>
      <tr>
          <td style="text-align: center">0x00000800</td>
          <td style="text-align: left">IMAGE_SCN_LNK_REMOVE</td>
          <td style="text-align: left">最终链接成映像文件的时候抛弃该段</td>
      </tr>
      <tr>
          <td style="text-align: center">0x00000200</td>
          <td style="text-align: left">IMAGE_SCN_LNK_INFO</td>
          <td style="text-align: left">该段包含的是注释或其他信息</td>
      </tr>
  </tbody>
</table>
<p>dumpbin打印了标志位的三个组合属性：Info、Remove、 1 byte align。即该段是信息段，而非程序数据；该段在最后链接成可执行文件的时候被抛弃；该段在文件中对齐方式是一字节对齐。</p>
<p>紧随其后的是该段在文件中的原始数据（RAW DATA #1）。dumpbin知道这个段是<code>.drectve</code>段，并对该段的内容进行解析，结果就是/DEFAULTLIB:LIBCMT这条链接指令。这就是CL编译器希望传递给link链接器的参数。该参数表示这个目标文件需要LIBCMT这个默认库。</p>
<p>LIBCMT全程Library C Multitheared，静态链接的多线程C库。</p>
<h2 id="调试信息-1">调试信息</h2>
<p>COFF文件中以<code>.debug</code>开头的段都包含着调试信息。比如<code>.debug$S</code>表示包含的是符号相关的调试信息段；<code>debug$P</code>表示包含预编译头文件相关的调试信息段；<code>.debug$T</code>表示包含类型相关的调试信息段。</p>
<p>在Hello.obj中只看到了<code>.debug$S</code>段，可以在该段的文本信息看到目标文件的绝对路径、编译器信息等。</p>
<h2 id="符号表">符号表</h2>
<p>Hello.txt最后部分就是COFF符号表，COFF符号表包含的内容几乎和ELF文件的符号表是一致的，主要就是符号名、符号类型、所在位置。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">COFF</span> <span class="n">SYMBOL</span> <span class="n">TABLE</span>
</span></span><span class="line"><span class="cl"><span class="mi">000</span> <span class="mi">01047</span><span class="n">CC1</span> <span class="n">ABS</span>    <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="err">@</span><span class="n">comp</span><span class="o">.</span><span class="n">id</span>
</span></span><span class="line"><span class="cl"><span class="mi">001</span> <span class="mi">80010190</span> <span class="n">ABS</span>    <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="err">@</span><span class="n">feat</span><span class="o">.</span><span class="mi">00</span>
</span></span><span class="line"><span class="cl"><span class="mi">002</span> <span class="mi">00000002</span> <span class="n">ABS</span>    <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="err">@</span><span class="n">vol</span><span class="o">.</span><span class="n">md</span>
</span></span><span class="line"><span class="cl"><span class="mi">003</span> <span class="mi">00000000</span> <span class="n">SECT1</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">drectve</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">18</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum        0</span>
</span></span><span class="line"><span class="cl"><span class="mi">005</span> <span class="mi">00000000</span> <span class="n">SECT2</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">debug</span><span class="o">$</span><span class="n">S</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">78</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum        0</span>
</span></span><span class="line"><span class="cl"><span class="mi">007</span> <span class="mi">00000000</span> <span class="n">SECT3</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">data</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="n">B</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum 84C66A7A</span>
</span></span><span class="line"><span class="cl"><span class="mi">009</span> <span class="mi">00000000</span> <span class="n">SECT3</span>  <span class="n">notype</span>       <span class="n">External</span>     <span class="o">|</span> <span class="n">gloabl_init_var</span>
</span></span><span class="line"><span class="cl"><span class="mi">00</span><span class="n">A</span> <span class="mi">00000004</span> <span class="n">UNDEF</span>  <span class="n">notype</span>       <span class="n">External</span>     <span class="o">|</span> <span class="n">global_uninit_var</span>
</span></span><span class="line"><span class="cl"><span class="mi">00</span><span class="n">B</span> <span class="mi">00000000</span> <span class="n">SECT4</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">text</span><span class="o">$</span><span class="n">mn</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">34</span><span class="p">,</span> <span class="c1">#relocs    3, #linenums    0, checksum F819F81E</span>
</span></span><span class="line"><span class="cl"><span class="mi">00</span><span class="n">D</span> <span class="mi">00000000</span> <span class="n">SECT5</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">text</span><span class="o">$</span><span class="n">mn</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="mi">8</span><span class="p">,</span> <span class="c1">#relocs    1, #linenums    0, checksum 411950D3, selection    2 (pick any)</span>
</span></span><span class="line"><span class="cl"><span class="mi">00</span><span class="n">F</span> <span class="mi">00000000</span> <span class="n">SECT6</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">text</span><span class="o">$</span><span class="n">mn</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">43</span><span class="p">,</span> <span class="c1">#relocs    2, #linenums    0, checksum 2D481083, selection    2 (pick any)</span>
</span></span><span class="line"><span class="cl"><span class="mi">011</span> <span class="mi">00000000</span> <span class="n">SECT7</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">text</span><span class="o">$</span><span class="n">mn</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">57</span><span class="p">,</span> <span class="c1">#relocs    2, #linenums    0, checksum 41BAE1CE, selection    2 (pick any)</span>
</span></span><span class="line"><span class="cl"><span class="mi">013</span> <span class="mi">00000000</span> <span class="n">SECT5</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">__local_stdio_printf_options</span>
</span></span><span class="line"><span class="cl"><span class="mi">014</span> <span class="mi">00000000</span> <span class="n">UNDEF</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">__acrt_iob_func</span>
</span></span><span class="line"><span class="cl"><span class="mi">015</span> <span class="mi">00000000</span> <span class="n">UNDEF</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">__stdio_common_vfprintf</span>
</span></span><span class="line"><span class="cl"><span class="mi">016</span> <span class="mi">00000000</span> <span class="n">SECT6</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">_vfprintf_l</span>
</span></span><span class="line"><span class="cl"><span class="mi">017</span> <span class="mi">00000000</span> <span class="n">SECT7</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">printf</span>
</span></span><span class="line"><span class="cl"><span class="mi">018</span> <span class="mi">00000000</span> <span class="n">SECT4</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">fun1</span>
</span></span><span class="line"><span class="cl"><span class="mi">019</span> <span class="mi">00000010</span> <span class="n">SECT4</span>  <span class="n">notype</span> <span class="p">()</span>    <span class="n">External</span>     <span class="o">|</span> <span class="n">main</span>
</span></span><span class="line"><span class="cl"><span class="mi">01</span><span class="n">A</span> <span class="mi">00000000</span> <span class="n">SECT6</span>  <span class="n">notype</span>       <span class="ne">Label</span>        <span class="o">|</span> <span class="o">$</span><span class="n">LN3</span>
</span></span><span class="line"><span class="cl"><span class="mi">01</span><span class="n">B</span> <span class="mi">00000000</span> <span class="n">SECT7</span>  <span class="n">notype</span>       <span class="ne">Label</span>        <span class="o">|</span> <span class="o">$</span><span class="n">LN3</span>
</span></span><span class="line"><span class="cl"><span class="mi">01</span><span class="n">C</span> <span class="mi">00000010</span> <span class="n">SECT4</span>  <span class="n">notype</span>       <span class="ne">Label</span>        <span class="o">|</span> <span class="o">$</span><span class="n">LN3</span>
</span></span><span class="line"><span class="cl"><span class="mi">01</span><span class="n">D</span> <span class="mi">00000000</span> <span class="n">SECT8</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">xdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="mi">8</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum 8D3961AC, selection    5 (pick associative Section 0x6)</span>
</span></span><span class="line"><span class="cl"><span class="mi">01</span><span class="n">F</span> <span class="mi">00000000</span> <span class="n">SECT8</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">unwind</span><span class="o">$</span><span class="n">_vfprintf_l</span>
</span></span><span class="line"><span class="cl"><span class="mi">020</span> <span class="mi">00000000</span> <span class="n">SECT9</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">pdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="n">C</span><span class="p">,</span> <span class="c1">#relocs    3, #linenums    0, checksum A712C50E, selection    5 (pick associative Section 0x6)</span>
</span></span><span class="line"><span class="cl"><span class="mi">022</span> <span class="mi">00000000</span> <span class="n">SECT9</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">pdata</span><span class="o">$</span><span class="n">_vfprintf_l</span>
</span></span><span class="line"><span class="cl"><span class="mi">023</span> <span class="mi">00000000</span> <span class="n">SECTA</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">xdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="mi">8</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum 8D3961AC, selection    5 (pick associative Section 0x7)</span>
</span></span><span class="line"><span class="cl"><span class="mi">025</span> <span class="mi">00000000</span> <span class="n">SECTA</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">unwind</span><span class="o">$</span><span class="n">printf</span>
</span></span><span class="line"><span class="cl"><span class="mi">026</span> <span class="mi">00000000</span> <span class="n">SECTB</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">pdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="n">C</span><span class="p">,</span> <span class="c1">#relocs    3, #linenums    0, checksum 5FE3FADF, selection    5 (pick associative Section 0x7)</span>
</span></span><span class="line"><span class="cl"><span class="mi">028</span> <span class="mi">00000000</span> <span class="n">SECTB</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">pdata</span><span class="o">$</span><span class="n">printf</span>
</span></span><span class="line"><span class="cl"><span class="mi">029</span> <span class="mi">00000000</span> <span class="n">SECTC</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">xdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="mi">8</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum 37887F31</span>
</span></span><span class="line"><span class="cl"><span class="mi">02</span><span class="n">B</span> <span class="mi">00000000</span> <span class="n">SECTC</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">unwind</span><span class="o">$</span><span class="n">main</span>
</span></span><span class="line"><span class="cl"><span class="mi">02</span><span class="n">C</span> <span class="mi">00000000</span> <span class="n">SECTD</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">pdata</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>    <span class="n">C</span><span class="p">,</span> <span class="c1">#relocs    3, #linenums    0, checksum 7D3C6CAC</span>
</span></span><span class="line"><span class="cl"><span class="mi">02</span><span class="n">E</span> <span class="mi">00000000</span> <span class="n">SECTD</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">pdata</span><span class="o">$</span><span class="n">main</span>
</span></span><span class="line"><span class="cl"><span class="mi">02</span><span class="n">F</span> <span class="mi">00000008</span> <span class="n">UNDEF</span>  <span class="n">notype</span>       <span class="n">External</span>     <span class="o">|</span> <span class="err">?</span><span class="n">_OptionsStorage</span><span class="err">@?</span><span class="mi">1</span><span class="err">??</span><span class="n">__local_stdio_printf_options</span><span class="err">@@</span><span class="mi">9</span><span class="err">@</span><span class="mi">9</span> <span class="p">(</span><span class="err">`</span><span class="n">__local_stdio_printf_options</span><span class="s1">&#39;::`2&#39;</span><span class="p">::</span><span class="n">_OptionsStorage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">030</span> <span class="mi">00000004</span> <span class="n">SECT3</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">$</span><span class="n">SG9830</span>
</span></span><span class="line"><span class="cl"><span class="mi">031</span> <span class="mi">00000000</span> <span class="n">SECTE</span>  <span class="n">notype</span>       <span class="n">Static</span>       <span class="o">|</span> <span class="o">.</span><span class="n">chks64</span>
</span></span><span class="line"><span class="cl">    <span class="n">Section</span> <span class="n">length</span>   <span class="mi">70</span><span class="p">,</span> <span class="c1">#relocs    0, #linenums    0, checksum        0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="ne">String</span> <span class="n">Table</span> <span class="n">Size</span> <span class="o">=</span> <span class="mh">0x10B</span> <span class="n">bytes</span></span></span></code></pre></div></div>
<p>输出结果最左列是符号编号，接着是符号的大小，第三列是符号所在的位置。ABS (Absolute)表示符号是个绝对值，即一个常量，它不存在于任何段中；SECT1 (SECT#1)表示符号对于的对象定义在文件中第一个段中；UNDEF表示未定义，即该符号定义在其他目标文件。第四列是符号类型，对于C语言来说，COFF只区分两种，一种是变量和其他符号，叫notype，另一种是函数，叫notype()，该符号类型值可以用于其他一些需要强符号类型的语言或系统中，可以给链接器更多的信息来识别符号的类型。第五列是符号的可见范围，Static是局部，External是全局。最后一列是符号名，对于需要符号修饰的，dumpbin会把修饰前后的名字都打印出来，括号内的就是修饰前的。如果dumpbin发现这个符号是段名，还会解析这个段的基本属性：段长度、重定位数、行号数以及校验和。</p>
<h2 id="pe">PE</h2>
<p>PE相较于COFF的主要变化由两个</p>
<ul>
<li>文件最开始的部分不是COFF文件头，而是DOS MZ可执行文件格式的文件头和桩代码</li>
<li>原有的IMAGE_FILE_HEADER扩展成IMAGE_NT_HEADERS，该结果在原有基础上新转增了PE扩展头部结构。</li>
</ul>
<p>由于历史原因，PE文件设计为了兼容DOS系统，还存在Image DOS Header和DOS Stub两个结构。</p>
<p>Image_DOS_HEADER结构也被定义在winnt.h里面。该结构的e_lfanew成员表明了PE文件头在PE文件中的偏移。这个成员在DOS的可执行文件格式中永远为0，所以Windows执行可执行文件时会先判断这个成员是否为0，如果为0就启用DOS子系统。</p>
<p>IMAGE_NT_HEADERS是PE文件真正的文件头，它包含一个标记和两个结构体。标记是一个常量，对于合法的PE文件来说，值永远是0x00004550，按照小端字节序，对应的是&rsquo;P&rsquo;、&lsquo;E&rsquo;、&rsquo;\0&rsquo;、&rsquo;\0&rsquo;四个字符的ASCII码。文件头包含的两个结构分别是映像头和PE扩展头部结构</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_NT_HEADERS64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span> <span class="n">Signature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">IMAGE_FILE_HEADER</span> <span class="n">FileHeader</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">IMAGE_OPTIONAL_HEADER64</span> <span class="n">OptionalHeader</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IMAGE_NT_HEADERS64</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_NT_HEADERS64</span><span class="p">;</span></span></span></code></pre></div></div>
<p>64位Windows编译默认定义_WIN64这个宏，一些符号的名字也会被定义成别的，比如：</p>
<blockquote>
<p>The actual structure in WinNT.h is named IMAGE_NT_HEADERS32 and IMAGE_NT_HEADERS is defined as IMAGE_NT_HEADERS32. However, if _WIN64 is defined, then IMAGE_NT_HEADERS is defined as IMAGE_NT_HEADERS64.</p>
</blockquote>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_nt_headers64#remarks" target="_blank" rel="noopener noreffer ">IMAGE_NT_HEADERS64 structure (winnt.h)</a></p>
<p>Image_FILE_HEADER在前面介绍过了，这里新出现的就是PE扩展头部结构。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_OPTIONAL_HEADER64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">Magic</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">BYTE</span>        <span class="n">MajorLinkerVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">BYTE</span>        <span class="n">MinorLinkerVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SizeOfCode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SizeOfInitializedData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SizeOfUninitializedData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">AddressOfEntryPoint</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">BaseOfCode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ULONGLONG</span>   <span class="n">ImageBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SectionAlignment</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">FileAlignment</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MajorOperatingSystemVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MinorOperatingSystemVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MajorImageVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MinorImageVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MajorSubsystemVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">MinorSubsystemVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">Win32VersionValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SizeOfImage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">SizeOfHeaders</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">CheckSum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">Subsystem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>        <span class="n">DllCharacteristics</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ULONGLONG</span>   <span class="n">SizeOfStackReserve</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ULONGLONG</span>   <span class="n">SizeOfStackCommit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ULONGLONG</span>   <span class="n">SizeOfHeapReserve</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ULONGLONG</span>   <span class="n">SizeOfHeapCommit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">LoaderFlags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>       <span class="n">NumberOfRvaAndSizes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">IMAGE_DATA_DIRECTORY</span> <span class="n">DataDirectory</span><span class="p">[</span><span class="n">IMAGE_NUMBEROF_DIRECTORY_ENTRIES</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IMAGE_OPTIONAL_HEADER64</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_OPTIONAL_HEADER64</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里有很多成员，有些和PE文件的装载和运行有关。这里只挑一些和静态链接相关的介绍。</p>
<h3 id="pe数据目录">PE数据目录</h3>
<p>Windows系统装载PE可执行文件时，往往需要很快找到一些装载所需要的数据结构，比如导入表、导出表等。这些常用的数据和长度都被保存在了一个叫数据目录的结构里面，它就是IMAGE_OPTIONAL_HEADER64结构里面的DataDirectory成员。该成员是一个IMAGE_DATA_DIRECTORY结构的数组，相关定义如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_DATA_DIRECTORY</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">VirtualAddress</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">Size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IMAGE_DATA_DIRECTORY</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_DATA_DIRECTORY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16</span></span></span></code></pre></div></div>
<p>DataDirectory数组里面每个元素对应包含一个表，winnt.h中定义了一些以IMAGE_DIRECTORY_ENTRY_开头的宏。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define IMAGE_DIRECTORY_ENTRY_EXPORT          0   </span><span class="c1">// Export Directory
</span></span></span></code></pre></div></div>
<p>从上面的代码可以看出，数组第一个元素所包含的地址和长度就是导出表所在的地址和长度。</p>]]></description>
</item>
<item>
    <title>程序员的自我修养：动态链接</title>
    <link>http://localhost:1313/posts/op_power-dymic-load/</link>
    <pubDate>Wed, 26 Oct 2022 03:42:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/op_power-dymic-load/</guid>
    <description><![CDATA[<p>程序员的自我修养：链接、装载与库这本书的读书笔记</p>
<h1 id="可执行文件的装载与进程">可执行文件的装载与进程</h1>
<h2 id="进程虚拟地址空间">进程虚拟地址空间</h2>
<p>程序运行起来之后拥有自己的虚拟地址空间，其大小由CPU的位数决定。C语言指针所占空间可以判断虚拟地址空间的大小，32位平台下的指针是32位，也就是4字节；64位平台下的指针是64位，即8字节。历史上指针曾经分为长指针、短指针和近指针，这是为了应对当时处理器而设计的，现在可以不再考虑。</p>
<p>以32位为例：</p>
<p>Linux平台的虚拟地址空间操作系统要占用1G，Windows默认占用2G（但可以改成1G）。</p>
<p>Intel在95年采用了36位的物理地址，更改了页映射的方式使得能够访问高达64GB的物理内存，这个地址扩展方法叫做PAE（Physical Address Extension）。</p>
<p>扩展的物理地址空间无法被普通的应用程序感受到。操作系统提供了一种窗口映射的方法，把额外的内存映射到进程地址空间中，应用程序可以根据需求选择申请和映射。比如程序从0x10000000~0x20000000这一段256MB的虚拟地址空间作为窗口，程序可以从高4GB的物理空间申请多个大小为256MB的物理空间，根据需求将窗口映射到某个物理空间块。</p>
<p>Windows下这个访问内存的操作方式叫做AWE（Address Windowing Extensions），Linux可以通过<code>mmap()</code>系统调用来实现。</p>
<h2 id="装载的方式">装载的方式</h2>
<p>最简单是静态装入的方法就是将程序运行所需要的指令和数据全部装入内存。但很多时候程序所需的内存大于物理内存，于是有了动态装入，即将程序最常用的部分常驻内存，不常用的数据放在磁盘里。</p>
<p>覆盖装入和页映射是典型的动态装载的方法。</p>
<h3 id="覆盖装入">覆盖装入</h3>
<p>覆盖装入在虚拟存储没有出现之前使用广泛，现在已经被淘汰了。</p>
<p>覆盖装入把压力转移到了程序员这边，程序员需要手动把程序封装成若干个块，再写一个辅助代码来管理这些块。比如main函数会调用A或者B，就可以main调用A的时候把A载入，调用B的时候用B覆盖掉A的位置。</p>
<h3 id="页映射">页映射</h3>
<p>将内存和磁盘中的数据和指令按照页为单位来划分。执行程序某个页的时候将页载入内存的某个页，如果都满了就利用相关算法放弃一个页。这就是主流操作系统装载可执行文件的方式了。如果程序需要内存中没有载入的页，硬件会捕获这个信息，就是所谓的页错误 (Page Fault)，然后操作系统接管进程，负责将没有载入的页载入并建立映射关系。</p>
<h2 id="操作系统角度看可执行文件的装载">操作系统角度看可执行文件的装载</h2>
<p>有了现在硬件的地址转换和页映射的机制，操作系统动态加载可执行文件和静态加载有了很大的区别。</p>
<h3 id="进程的建立">进程的建立</h3>
<p>一个进程的关键的特征是它拥有独立的虚拟地址空间，这让它有别去其他进程。下面是常见建立进程的情况：</p>
<ol>
<li>创建一个独立的虚拟地址空间。</li>
<li>读取可执行文件头，建立虚拟空间和可执行文件的映射关系。</li>
<li>将CPU指令寄存器设置成可执行文件的入口地址，启动运行。</li>
</ol>
<p><strong>创建虚拟地址空间</strong></p>
<p>虚拟地址空间实际上由一组映射函数将虚拟空间的各个页映射到相应的物理空间，创建一个虚拟空间实际上不是创建空间而是创建映射函数所需要的相应的数据结构。在i386的Linux下，创建这个只是分配一个页目录即可，页映射关系等是后续再进行设置。</p>
<p><strong>读取可执行文件头，并建立虚拟空间和可执行文件的映射关系</strong></p>
<p>上面一步的页映射关系函数是虚拟内存到物理内存的映射关系，这一步所做的是虚拟空间与可执行文件的映射关系。当程序发生页错误时，操作系统将会从物理内存中分配一个物理页，然后将该页从磁盘读取到内存中，再设置这个虚拟页和物理页的映射关系。当操作系统捕获到页错误时，它需要知道程序所需的页再可执行文件的哪个位置。这就是虚拟空间和可执行文件之间的映射关系。</p>
<p>Linux中将进程虚拟空间的一个段叫做虚拟内存区域（VMA），Windows下叫虚拟段。</p>
<p><strong>将CPU指令寄存器设置成可执行文件的入口地址，启动运行</strong></p>
<p>操作系统通过设置CPU指令寄存器将控制权转交给进程，进程由此开始执行。</p>
<p>这一步看似简单，再操作系统层面上比较复杂，它涉及到内核堆栈和用户堆栈的切换、CPU运行权限的切换。不过从进程的角度来看，这一步就是操作系统执行了一条跳转到可执行文件入口地址的调转指令。</p>
<h2 id="进程虚存空间分布">进程虚存空间分布</h2>
<h3 id="elf文件链接视图">ELF文件链接视图</h3>
<p>ELF文件被映射时，以系统的页长度作为映射单位。每个段被映射时的长度都是系统页长度的整数倍，如果不是，多余的部分也将占用一个页。</p>
<p>为了节省空间，ELF文件装载的时候将相同权限的段合并一起当作一个段来进行映射，这样的段概念上叫<code>Segment</code>。从链接的角度来看，ELF文件按照<code>Section</code>存储，从装载的角度来看，ELF文件按照<code>Segment</code>划分。</p>
<p>readelf可以查看ELF的Segment，正如描述Section属性的结构叫段表，描述Segment的结构叫程序头</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shel">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">readelf -l &lt;filename&gt;</span></span></code></pre></div></div>
<p>以一个循环执行sleep的程序为例</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">///sleepc.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -static sleepc.c -o sleepc.elf
</span></span><span class="line"><span class="cl">$ readelf -S sleepc.elf
</span></span><span class="line"><span class="cl">There are <span class="m">32</span> section headers, starting at offset 0xbcd50:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Section Headers:
</span></span><span class="line"><span class="cl">  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
</span></span><span class="line"><span class="cl">       Size              EntSize          Flags  Link  Info  Align
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 0<span class="o">]</span>                   NULL             <span class="m">0000000000000000</span>  <span class="m">00000000</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000000</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">0</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 1<span class="o">]</span> .note.gnu.pr<span class="o">[</span>...<span class="o">]</span> NOTE             <span class="m">0000000000400270</span>  <span class="m">00000270</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000040</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 2<span class="o">]</span> .note.gnu.bu<span class="o">[</span>...<span class="o">]</span> NOTE             00000000004002b0  000002b0
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000024</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 3<span class="o">]</span> .note.ABI-tag     NOTE             00000000004002d4  000002d4
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000020</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 4<span class="o">]</span> .rela.plt         RELA             00000000004002f8  000002f8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000240</span>  <span class="m">0000000000000018</span>  AI      <span class="m">29</span>    <span class="m">20</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 5<span class="o">]</span> .init             PROGBITS         <span class="m">0000000000401000</span>  <span class="m">00001000</span>
</span></span><span class="line"><span class="cl">       000000000000001b  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 6<span class="o">]</span> .plt              PROGBITS         <span class="m">0000000000401020</span>  <span class="m">00001020</span>
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000090</span>  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 7<span class="o">]</span> .text             PROGBITS         00000000004010c0  000010c0
</span></span><span class="line"><span class="cl">       <span class="m">0000000000079333</span>  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">64</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 8<span class="o">]</span> __libc_freeres_fn PROGBITS         000000000047a400  0007a400
</span></span><span class="line"><span class="cl">       0000000000000ab2  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">16</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> 9<span class="o">]</span> .fini             PROGBITS         000000000047aeb4  0007aeb4
</span></span><span class="line"><span class="cl">       000000000000000d  <span class="m">0000000000000000</span>  AX       <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>10<span class="o">]</span> .rodata           PROGBITS         000000000047b000  0007b000
</span></span><span class="line"><span class="cl">       000000000001bc84  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">32</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>11<span class="o">]</span> .stapsdt.base     PROGBITS         0000000000496c84  00096c84
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000001</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>12<span class="o">]</span> .eh_frame         PROGBITS         0000000000496c88  00096c88
</span></span><span class="line"><span class="cl">       000000000000b2d8  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>13<span class="o">]</span> .gcc_except_table PROGBITS         00000000004a1f60  000a1f60
</span></span><span class="line"><span class="cl">       00000000000000f6  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>14<span class="o">]</span> .tdata            PROGBITS         00000000004a3778  000a2778
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000018</span>  <span class="m">0000000000000000</span> WAT       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>15<span class="o">]</span> .tbss             NOBITS           00000000004a3790  000a2790
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000048</span>  <span class="m">0000000000000000</span> WAT       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>16<span class="o">]</span> .init_array       INIT_ARRAY       00000000004a3790  000a2790
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000008</span>  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>17<span class="o">]</span> .fini_array       FINI_ARRAY       00000000004a3798  000a2798
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000008</span>  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>18<span class="o">]</span> .data.rel.ro      PROGBITS         00000000004a37a0  000a27a0
</span></span><span class="line"><span class="cl">       <span class="m">0000000000003768</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">32</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>19<span class="o">]</span> .got              PROGBITS         00000000004a6f08  000a5f08
</span></span><span class="line"><span class="cl">       00000000000000d8  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>20<span class="o">]</span> .got.plt          PROGBITS         00000000004a6fe8  000a5fe8
</span></span><span class="line"><span class="cl">       00000000000000a8  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>21<span class="o">]</span> .data             PROGBITS         00000000004a70a0  000a60a0
</span></span><span class="line"><span class="cl">       00000000000019f8  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">32</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>22<span class="o">]</span> __libc_subfreeres PROGBITS         00000000004a8a98  000a7a98
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000048</span>  <span class="m">0000000000000000</span> WAR       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>23<span class="o">]</span> __libc_IO_vtables PROGBITS         00000000004a8ae0  000a7ae0
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000768</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">32</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>24<span class="o">]</span> __libc_atexit     PROGBITS         00000000004a9248  000a8248
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000008</span>  <span class="m">0000000000000000</span> WAR       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>25<span class="o">]</span> .bss              NOBITS           00000000004a9260  000a8250
</span></span><span class="line"><span class="cl">       <span class="m">0000000000005800</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">32</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>26<span class="o">]</span> __libc_freer<span class="o">[</span>...<span class="o">]</span> NOBITS           00000000004aea60  000a8250
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000020</span>  <span class="m">0000000000000000</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>27<span class="o">]</span> .comment          PROGBITS         <span class="m">0000000000000000</span>  000a8250
</span></span><span class="line"><span class="cl">       000000000000001b  <span class="m">0000000000000001</span>  MS       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>28<span class="o">]</span> .note.stapsdt     NOTE             <span class="m">0000000000000000</span>  000a826c
</span></span><span class="line"><span class="cl">       00000000000014d8  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">4</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>29<span class="o">]</span> .symtab           SYMTAB           <span class="m">0000000000000000</span>  000a9748
</span></span><span class="line"><span class="cl">       000000000000c0d8  <span class="m">0000000000000018</span>          <span class="m">30</span>   <span class="m">767</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>30<span class="o">]</span> .strtab           STRTAB           <span class="m">0000000000000000</span>  000b5820
</span></span><span class="line"><span class="cl">       00000000000073d9  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>31<span class="o">]</span> .shstrtab         STRTAB           <span class="m">0000000000000000</span>  000bcbf9
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000157</span>  <span class="m">0000000000000000</span>           <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>
</span></span><span class="line"><span class="cl">Key to Flags:
</span></span><span class="line"><span class="cl">  W <span class="o">(</span>write<span class="o">)</span>, A <span class="o">(</span>alloc<span class="o">)</span>, X <span class="o">(</span>execute<span class="o">)</span>, M <span class="o">(</span>merge<span class="o">)</span>, S <span class="o">(</span>strings<span class="o">)</span>, I <span class="o">(</span>info<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  L <span class="o">(</span>link order<span class="o">)</span>, O <span class="o">(</span>extra OS processing required<span class="o">)</span>, G <span class="o">(</span>group<span class="o">)</span>, T <span class="o">(</span>TLS<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  C <span class="o">(</span>compressed<span class="o">)</span>, x <span class="o">(</span>unknown<span class="o">)</span>, o <span class="o">(</span>OS specific<span class="o">)</span>, E <span class="o">(</span>exclude<span class="o">)</span>,
</span></span><span class="line"><span class="cl">  R <span class="o">(</span>retain<span class="o">)</span>, D <span class="o">(</span>mbind<span class="o">)</span>, l <span class="o">(</span>large<span class="o">)</span>, p <span class="o">(</span>processor specific<span class="o">)</span></span></span></code></pre></div></div>
<p>通过readelf可以看到该文件section的数量，也可以查看segment的数量。正如描述section属性的结构叫段表，描述segment的结构叫程序头，它描述了ELF文件该如何被操作系统映射到进程的虚拟空间</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ readelf -l sleepc.elf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file <span class="nb">type</span> is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">Entry point 0x4014e0
</span></span><span class="line"><span class="cl">There are <span class="m">10</span> program headers, starting at offset <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset             VirtAddr           PhysAddr
</span></span><span class="line"><span class="cl">                 FileSiz            MemSiz              Flags  Align
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
</span></span><span class="line"><span class="cl">                 0x0000000000000538 0x0000000000000538  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000
</span></span><span class="line"><span class="cl">                 0x0000000000079ec1 0x0000000000079ec1  R E    0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x000000000007b000 0x000000000047b000 0x000000000047b000
</span></span><span class="line"><span class="cl">                 0x0000000000027056 0x0000000000027056  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x00000000000a2778 0x00000000004a3778 0x00000000004a3778
</span></span><span class="line"><span class="cl">                 0x0000000000005ad8 0x000000000000b308  RW     0x1000
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000040 0x0000000000000040  R      0x8
</span></span><span class="line"><span class="cl">  NOTE           0x00000000000002b0 0x00000000004002b0 0x00000000004002b0
</span></span><span class="line"><span class="cl">                 0x0000000000000044 0x0000000000000044  R      0x4
</span></span><span class="line"><span class="cl">  TLS            0x00000000000a2778 0x00000000004a3778 0x00000000004a3778
</span></span><span class="line"><span class="cl">                 0x0000000000000018 0x0000000000000060  R      0x8
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000040 0x0000000000000040  R      0x8
</span></span><span class="line"><span class="cl">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x0000000000000000 0x0000000000000000  RW     0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x00000000000a2778 0x00000000004a3778 0x00000000004a3778
</span></span><span class="line"><span class="cl">                 0x0000000000003888 0x0000000000003888  R      0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   <span class="m">00</span>     .note.gnu.property .note.gnu.build-id .note.ABI-tag .rela.plt 
</span></span><span class="line"><span class="cl">   <span class="m">01</span>     .init .plt .text __libc_freeres_fn .fini 
</span></span><span class="line"><span class="cl">   <span class="m">02</span>     .rodata .stapsdt.base .eh_frame .gcc_except_table 
</span></span><span class="line"><span class="cl">   <span class="m">03</span>     .tdata .init_array .fini_array .data.rel.ro .got .got.plt .data __libc_subfreeres __libc_IO_vtables __libc_atexit .bss __libc_freeres_ptrs 
</span></span><span class="line"><span class="cl">   <span class="m">04</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">05</span>     .note.gnu.build-id .note.ABI-tag 
</span></span><span class="line"><span class="cl">   <span class="m">06</span>     .tdata .tbss 
</span></span><span class="line"><span class="cl">   <span class="m">07</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">08</span>     
</span></span><span class="line"><span class="cl">   <span class="m">09</span>     .tdata .init_array .fini_array .data.rel.ro .got </span></span></code></pre></div></div>
<p>Segment类型只有<code>LOAD</code>才是需要被映射的，其他的诸如<code>NOTE</code>、<code>TLS</code>、<code>GNU_STACK</code>都是装载时起辅助作用。</p>
<p>从上面的输出中也可以看出哪些section被合并到了哪个segment，其权限时什么等等信息。</p>
<p>从不同的角度看ELF文件，这被称为视图（View），从Section的角度看ELF文件就是链接视图，从Segment的角度看是执行视图。</p>
<p>和段表一样，程序头表也是一个结构体数组，它的结构体名字叫Elf64_Phdr，成员含义如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">p_type</span><span class="p">;</span>	     <span class="cm">/* Segment type */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>	<span class="n">p_flags</span><span class="p">;</span>		<span class="cm">/* Segment flags */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>	<span class="n">p_offset</span><span class="p">;</span>		<span class="cm">/* Segment file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">p_vaddr</span><span class="p">;</span>		<span class="cm">/* Segment virtual address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>	<span class="n">p_paddr</span><span class="p">;</span>		<span class="cm">/* Segment physical address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">p_filesz</span><span class="p">;</span>		<span class="cm">/* Segment size in file */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">p_memsz</span><span class="p">;</span>		<span class="cm">/* Segment size in memory */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>	<span class="n">p_align</span><span class="p">;</span>		<span class="cm">/* Segment alignment */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Phdr</span><span class="p">;</span></span></span></code></pre></div></div>
<table>
  <thead>
      <tr>
          <th style="text-align: center">成员</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">p_type</td>
          <td style="text-align: center">Segment的类型</td>
      </tr>
      <tr>
          <td style="text-align: center">p_offset</td>
          <td style="text-align: center">Segment在文件中的偏移</td>
      </tr>
      <tr>
          <td style="text-align: center">p_vaddr</td>
          <td style="text-align: center">Segment的第一个字节在进程虚拟地址空间的起始位置</td>
      </tr>
      <tr>
          <td style="text-align: center">p_paddr</td>
          <td style="text-align: center">Segment的物理装载地址</td>
      </tr>
      <tr>
          <td style="text-align: center">p_filesz</td>
          <td style="text-align: center">Segment在ELF文件中所占空间的长度</td>
      </tr>
      <tr>
          <td style="text-align: center">p_memsz</td>
          <td style="text-align: center">Segment在进程虚拟地址空间中所占的长度</td>
      </tr>
      <tr>
          <td style="text-align: center">p_flags</td>
          <td style="text-align: center">Segment的权限属性</td>
      </tr>
      <tr>
          <td style="text-align: center">p_align</td>
          <td style="text-align: center">Segment的对齐属性，实际对齐字节是2的p_align次方</td>
      </tr>
  </tbody>
</table>
<p>一般来说，<code>p_paddr</code>和<code>p_vaddr</code>大小应该是一样的。</p>
<p>对于LOAD类型的Segment来说，p_memsz的值应该不能小于p_filesz。p_memsz大于p_filesz，表示该Segment在内存分配的空间大小超过了ELF文件中实际的大小，多余的部分要被填充为0。BSS段会以这个方式和数据段一起合并，因为数据段和BSS的唯一区别在于，数据段从文件中初始化内容，BSS段的内容全部初始化为0。</p>
<h3 id="堆和栈">堆和栈</h3>
<p>VMA除了被用来映射可执行文件的segment之外还有其他作用。Linux下，可以通过查看/proc以查看进程的虚拟空间分布</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./sleepc.elf <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">$ ps
</span></span><span class="line"><span class="cl">    PID TTY          TIME CMD
</span></span><span class="line"><span class="cl">   <span class="m">1039</span> pts/1    00:00:00 fish
</span></span><span class="line"><span class="cl">   <span class="m">1241</span> pts/1    00:00:00 sleepc.elf
</span></span><span class="line"><span class="cl">   <span class="m">1247</span> pts/1    00:00:00 ps
</span></span><span class="line"><span class="cl">$ cat /proc/1241/maps 
</span></span><span class="line"><span class="cl">00400000-00401000 r--p <span class="m">00000000</span> 00:17 <span class="m">144115</span>                             /home/suoyuan/test/sleepc.elf
</span></span><span class="line"><span class="cl">00401000-0047b000 r-xp <span class="m">00001000</span> 00:17 <span class="m">144115</span>                             /home/suoyuan/test/sleepc.elf
</span></span><span class="line"><span class="cl">0047b000-004a3000 r--p 0007b000 00:17 <span class="m">144115</span>                             /home/suoyuan/test/sleepc.elf
</span></span><span class="line"><span class="cl">004a3000-004a7000 r--p 000a2000 00:17 <span class="m">144115</span>                             /home/suoyuan/test/sleepc.elf
</span></span><span class="line"><span class="cl">004a7000-004aa000 rw-p 000a6000 00:17 <span class="m">144115</span>                             /home/suoyuan/test/sleepc.elf
</span></span><span class="line"><span class="cl">004aa000-004af000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">01cb9000-01cdb000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                                  <span class="o">[</span>heap<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffc9bf89000-7ffc9bfaa000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffc9bfd9000-7ffc9bfdd000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffc9bfdd000-7ffc9bfdf000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">ffffffffff600000-ffffffffff601000 --xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                  <span class="o">[</span>vsyscall<span class="o">]</span></span></span></code></pre></div></div>
<p>上面的输出中，第一列是VMA的地址范围，第二列是VMA的权限，第三列是偏移（VMA对应的segment再映像文件中的偏移），第四列表示映像文件所在设备的主设备号和次设备号，第五列表示映像文件的节点号，最后一列是映像文件的路径。</p>
<p>其中主次设备号和节点号都为0的表明它们没有被映射到文件中，这种VMA叫做匿名虚拟内存区域。</p>
<p>一个进程基本有如下几种VMA：</p>
<ul>
<li>代码VMA，可读可执行，有映像文件</li>
<li>数据VMA，可读可写不可执行，有映像文件</li>
<li>堆VMA，可读可写不可执行，无映像文件，匿名，可向上扩展</li>
<li>栈VMA，可读可写不可执行，无映像文件，匿名，可向下扩展</li>
</ul>
<p></p>
<h3 id="段地址对齐">段地址对齐</h3>
<p>很多时候段的大小没有不是页的大小的整数倍，存在空间上的浪费。Unix采取段对齐的方案来解决这一问题。</p>
<p>段对齐就是把各个段接壤的部分共享一个物理页面，然后将物理内存分别映射两次，如下图：</p>
<p></p>
<p>由图可知，段合并使得ELF文件再物理内存上被分为了以页大小为单位的若干个块，但并没有改变进程虚拟空间。</p>
<h3 id="进程栈初始化">进程栈初始化</h3>
<p>进程刚启动的时候需要知道进程运行的环境（环境变量和运行时参数），常见做法是把操作系统在进程启动前把这些信息提前保存到进程的虚拟空间的栈中。</p>
<h2 id="linux内核装载elf简介">Linux内核装载ELF简介</h2>
<p>用户层面，bash进程调用<code>fork()</code>系统调用创建新进程，新进程调用<code>execve()</code>系统调用执行指定的ELF文件，原先的bash进程等待新进程结束，继续等待用户输入命令。</p>
<p>进入<code>execve()</code>系统调用之后，Linux内核正式开始装载工作。内核中，<code>execve()</code>系统调用的相应入口是<code>sys_execve()</code>，<code>sys_execve()</code>进行一些参数的检查复制之后调用<code>do_execve()</code>，<code>do_execve()</code>首先查找被执行的文件，若找到文件则读取文件前128个字节以判断可执行文件的格式（ELF、a.out、Java程序、脚本程序等等），每个可执行文件的开头字节都是特殊的，尤其是前4个字节，被称为magic number。</p>
<p><code>do_execve()</code>读取了前128字节之后调用<code>search_binary_handle()</code>搜索匹配合适的可执行文件装载处理过程，<code>search_binary_handle()</code>通过判断文件头部magic number确定文件的格式并调用相应的装载处理过程（比如ELF的叫<code>load_elf_binary()</code>，a.out的叫<code>load_aout_binary</code>，可执行脚本叫<code>load_script()</code>）下述步骤是ELF可执行文件的装载：</p>
<ol>
<li>检查ELF可执行文件格式的有效性，比如magic number、程序头表中segment的数量</li>
<li>寻找动态链接的<code>.interp</code>段，设置动态链接器路径</li>
<li>根据ELF可执行文件的程序头表的描述，对ELF文件进行映射</li>
<li>初始化ELF进程环境</li>
<li>将系统调用的返回地址修改成ELF可执行文件的入口点。入口点取决于链接方式，静态是e_entery的地址，动态则是动态链接器</li>
</ol>
<p>当<code>load_elf_binary()</code>执行完毕，返回至<code>do_execve()</code>再返回到<code>sys_execve()</code>时，上述步骤的第5步已经把系统调用的地址修改。当<code>sys_execve()</code>系统调用从内核态返回到用户态时，EIP寄存器直接跳转到ELF程序的入口地址。</p>
<h2 id="windows-pe的装载简介">Windows PE的装载简介</h2>
<p>PE的段的数量一般很少，其在链接器生成可执行文件的时候将所有的段尽可能的合并，一般只有代码段、数据段、只读数据段和BSS段等为数不多的段。PE文件所有段的起始地址都是页的倍数，段的长度如果不是页的整数倍，映射时向上补齐到页的整数倍，所以它没有ELF段地址对齐等问题。</p>
<p>PE里常见术语RVA（Relative Virtual Address）相对虚拟地址，类似于偏移量的一个概念。每个PE文件装载的时候都有一个装载目标地址，也就是所谓的基地址。PE被设计成可以装载到任何地址，所以基地址并不固定。</p>
<p>装载PE的简单过程：</p>
<ol>
<li>读取文件的第一个页。这个页包含了DOS头，PE文件头和段表</li>
<li>检查进程地址空间中目标地址是否可用，若不可用就换。可执行文件基本无法遇到被占用的问题，因为往往它是第一个被载入的模块，这是针对DLL文件的装载来说的</li>
<li>使用段表提供的信息，将PE文件所有的段一一映射到地址空间</li>
<li>如果装载地址不是目标地址，进行Rebasing</li>
<li>装载PE文件所需的DLL文件</li>
<li>对PE文件中的所有导入符号进行解析</li>
<li>根据PE头指定的参数，建立初始化堆栈</li>
<li>建立主线程并启动线程</li>
</ol>
<p>PE文件中，与装载有关的信息都在PE扩展头和段表。以下是其中的几个和装载相关的成员：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">成员</th>
          <th style="text-align: left">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">Image Base</td>
          <td style="text-align: left">PE文件的优先装载地址</td>
      </tr>
      <tr>
          <td style="text-align: center">AddressOfEntryPoint</td>
          <td style="text-align: left">PE装载器准备运行的PE文件的第一个指令的RVA</td>
      </tr>
      <tr>
          <td style="text-align: center">SectionAlignment</td>
          <td style="text-align: left">内存中段对齐的粒度，默认情况下是系统页的大小</td>
      </tr>
      <tr>
          <td style="text-align: center">FileAlignment</td>
          <td style="text-align: left">文件中段对齐的粒度，值是2的指数倍</td>
      </tr>
      <tr>
          <td style="text-align: center">MajorSubsystem Versio; MinorSubsystem Version</td>
          <td style="text-align: left">系统运行所需要的Win32子系统版本</td>
      </tr>
      <tr>
          <td style="text-align: center">SizeOfImage</td>
          <td style="text-align: left">内存中整个PE映像的尺寸</td>
      </tr>
      <tr>
          <td style="text-align: center">SizeOfHeaders</td>
          <td style="text-align: left">所有头+节表的大小，也等于文件尺寸-文件中所有节的尺寸，可以用此值作为PE文件第一节的文件偏移量</td>
      </tr>
      <tr>
          <td style="text-align: center">Subsystem</td>
          <td style="text-align: left">NT用来是被PE文件属于哪个子系统</td>
      </tr>
      <tr>
          <td style="text-align: center">SizeOfCode</td>
          <td style="text-align: left">代码段的长度</td>
      </tr>
      <tr>
          <td style="text-align: center">SizeOfInitializedData</td>
          <td style="text-align: left">初始化了的数据段长度</td>
      </tr>
      <tr>
          <td style="text-align: center">SizeOfUninitializedData</td>
          <td style="text-align: left">未初始化了的数据段长度</td>
      </tr>
      <tr>
          <td style="text-align: center">BaseOfCode</td>
          <td style="text-align: left">代码段起始RVA</td>
      </tr>
      <tr>
          <td style="text-align: center">BaseOfData</td>
          <td style="text-align: left">数据段起始RVA</td>
      </tr>
  </tbody>
</table>
<h1 id="动态链接">动态链接</h1>
<h2 id="为什么需要动态链接">为什么需要动态链接</h2>
<p>静态链接占用内存和磁盘空间，后期模块更新维护困难。</p>
<h3 id="动态链接-1">动态链接</h3>
<p>在程序运行时才进行链接，把链接的过程推迟到运行时进行，这就是动态链接的思想。</p>
<p>假设有A、B两个程序，它们都用了C这个模块。运行A的时候，系统发现了A用到了C，即A依赖于C，那么系统就要加载C，若是A或C还依赖于其他目标文件，系统会把它们全部载入内存，直到依赖关系满足。系统随后开始链接工作，该工作原理和静态链接相似。之后系统控制权交给A的程序入口，程序开始运行。这时运行B，系统只需要加载B，因为内存已经存在C的副本，系统只需要将它俩链接起来即可。</p>
<p>动态链接涉及运行时的链接及多个文件的装载，必须要有操作系统的支持。因为动态链接的情况下，进程的虚拟地址空间的分布比静态链接更为复杂，还有一些存储管理、内存共享、进程线程等机制在动态链接下也有一些微妙的变化。</p>
<p>Linux中，ELF动态链接文件被称为动态共享对象（DSO，Dynamic Shared Objects），简称共享对象，以<code>.so</code>为后缀。Windows系统中，动态链接文件被称为动态链接库（Dynamic Linking Liabray）以<code>.dll</code>为后缀。</p>
<h2 id="linux下动态链接的简单例子">Linux下动态链接的简单例子</h2>
<p>以下面四个代码为例：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* program1.c */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;Lib.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nf">foobar</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* program2.c */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;Lib.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nf">foobar</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Lib.c */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">foobar</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Printing from lib.so, Program%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Lib.h */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef LTB_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LTB_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">foobar</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></div></div>
<p>使用GCC将Lib.c编译成一个共享目标文件：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -fPIC -shared -o Lib.so Lib.c</span></span></code></pre></div></div>
<p><code>-shared</code>表示生成共享对象。之后分别编译链接Progarm.c和Program2.c</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -o program1 program1.c ./Lib.so
</span></span><span class="line"><span class="cl">$ gcc -o program2 program2.c ./Lib.so</span></span></code></pre></div></div>
<p></p>
<p>按照静态链接，program1链接的时候应该有Lib.o参与，但这里是Lib.so。</p>
<p>链接器在将program1.o链接成可执行文件时，这时候链接器需要确定<code>foobar()</code>函数的性质，如果它是定义在静态目标模块中的，就走静态链接的流程，如果这是动态共享对象的函数，编译器就会将这个符号的引用标记为一个动态链接的符号不对其进行重定位，这个工作留在装载时进行。</p>
<p>Lib.so保存了完整的符号信息，链接器解析符号时就可以知道<code>foobar()</code>是个定义在Lib.so的动态符号，这样链接器可以对<code>foobar()</code>进行特殊的处理。</p>
<h3 id="动态链接程序运行时地址空间分布">动态链接程序运行时地址空间分布</h3>
<p>查看program1进程的虚拟地址空间分布，可以在<code>foobar()</code>函数中加一个<code>sleep()</code>函数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./program1 <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">Printing from lib.so, Program1
</span></span><span class="line"><span class="cl">$ ps
</span></span><span class="line"><span class="cl">    PID TTY          TIME CMD
</span></span><span class="line"><span class="cl">   <span class="m">1045</span> pts/1    00:00:00 fish
</span></span><span class="line"><span class="cl">   <span class="m">1702</span> pts/1    00:00:00 program1
</span></span><span class="line"><span class="cl">   <span class="m">1708</span> pts/1    00:00:00 ps
</span></span><span class="line"><span class="cl">$ cat /proc/1702/maps 
</span></span><span class="line"><span class="cl">55f59eb69000-55f59eb6a000 r--p <span class="m">00000000</span> 00:17 <span class="m">144512</span>                     /home/suoyuan/test/program1
</span></span><span class="line"><span class="cl">55f59eb6a000-55f59eb6b000 r-xp <span class="m">00001000</span> 00:17 <span class="m">144512</span>                     /home/suoyuan/test/program1
</span></span><span class="line"><span class="cl">55f59eb6b000-55f59eb6c000 r--p <span class="m">00002000</span> 00:17 <span class="m">144512</span>                     /home/suoyuan/test/program1
</span></span><span class="line"><span class="cl">55f59eb6c000-55f59eb6d000 r--p <span class="m">00002000</span> 00:17 <span class="m">144512</span>                     /home/suoyuan/test/program1
</span></span><span class="line"><span class="cl">55f59eb6d000-55f59eb6e000 rw-p <span class="m">00003000</span> 00:17 <span class="m">144512</span>                     /home/suoyuan/test/program1
</span></span><span class="line"><span class="cl">55f5a006d000-55f5a008e000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>heap<span class="o">]</span>
</span></span><span class="line"><span class="cl">7fcce1ff9000-7fcce1ffc000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fcce1ffc000-7fcce201e000 r--p <span class="m">00000000</span> 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fcce201e000-7fcce2179000 r-xp <span class="m">00022000</span> 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fcce2179000-7fcce21d0000 r--p 0017d000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fcce21d0000-7fcce21d4000 r--p 001d4000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fcce21d4000-7fcce21d6000 rw-p 001d8000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fcce21d6000-7fcce21e3000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fcce21ff000-7fcce2200000 r--p <span class="m">00000000</span> 00:17 <span class="m">144511</span>                     /home/suoyuan/test/Lib.so
</span></span><span class="line"><span class="cl">7fcce2200000-7fcce2201000 r-xp <span class="m">00001000</span> 00:17 <span class="m">144511</span>                     /home/suoyuan/test/Lib.so
</span></span><span class="line"><span class="cl">7fcce2201000-7fcce2202000 r--p <span class="m">00002000</span> 00:17 <span class="m">144511</span>                     /home/suoyuan/test/Lib.so
</span></span><span class="line"><span class="cl">7fcce2202000-7fcce2203000 r--p <span class="m">00002000</span> 00:17 <span class="m">144511</span>                     /home/suoyuan/test/Lib.so
</span></span><span class="line"><span class="cl">7fcce2203000-7fcce2204000 rw-p <span class="m">00003000</span> 00:17 <span class="m">144511</span>                     /home/suoyuan/test/Lib.so
</span></span><span class="line"><span class="cl">7fcce2204000-7fcce2206000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fcce2206000-7fcce2207000 r--p <span class="m">00000000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fcce2207000-7fcce222e000 r-xp <span class="m">00001000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fcce222e000-7fcce2238000 r--p <span class="m">00028000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fcce2238000-7fcce223a000 r--p <span class="m">00032000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fcce223a000-7fcce223c000 rw-p <span class="m">00034000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffeccce6000-7ffeccd07000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffeccd1a000-7ffeccd1e000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffeccd1e000-7ffeccd20000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">ffffffffff600000-ffffffffff601000 --xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                  <span class="o">[</span>vsyscall<span class="o">]</span></span></span></code></pre></div></div>
<p>可以发现<code>Lib.so</code>和<code>Program1</code>一样，它们都被操作系统以同样的方法映射到进程的虚拟地址空间。除了<code>Lib.so</code>之外，<code>Program1</code>还用到了动态链接形式的C语言你运行库<code>libc.so.6</code>。另外还有一个共享对象就是<code>ld-linux-x86-64.so.2</code>，这实际上是Linux下的动态链接器。动态链接器和普通共享对象一样被映射到进程的地址空间，在系统开始运行<code>program1</code>之前会先将控制权交给动态链接器，由它完成所有的动态链接工作以后再把控制权交给<code>program1</code>，然后开始执行。
共享对象的最终装载地址在编译时是不确定的，使用readelf -l查看其segment可以发现其装载地址从0开始。</p>
<h2 id="地址无关代码">地址无关代码</h2>
<h3 id="固定装载地址的困扰">固定装载地址的困扰</h3>
<p>为模块手工写死地址十分困难，静态共享库解决了这个问题，但是也仅仅是把分配地址的权利交给了操作系统，仍然是写死的。如今静态共享库已经被淘汰了。为了解决这个问题，共享对象在编译时不能假设自己在进程虚拟地址空间的位置。</p>
<h3 id="装载时重定位">装载时重定位</h3>
<p>把重定位的过程推到装载时执行，对这些地址进行修正。之前静态链接的重定位叫做链接时重定位（Link Time Relocation），现在这个情况是装载时重定位（Load Time Relocation），Windows中这种重定位也叫基址重置（Rebasing）</p>
<p>动态链接模块被装载映射到虚拟空间后，指令部分在多个进程直接共享，由于装载时重定位的方法需要修改指令，所以无法做到同一份指令被多个进程共享。动态链接库中的可修改数据部分对于不同的进程来说有多个副本，所以它们可以采用装载时重定位的方法解决。</p>
<h3 id="地址无关代码-1">地址无关代码</h3>
<p>虽然装载时重定位解决了绝对地址引用的位，但是失去了动态链接节省内存的优势。</p>
<p>程序模块中共享的指令部分在装载时不需要因为装载地址的改变而改变，所以实现的基本想法就是把指令中那些需要需要修改的部分分离出来，跟数据部分放在一起这样指令部分就可以保持不变，而数据部分可以在每个进程中拥有一个副本。这种方案就是目前被称地址无关代码（PIC，Position-independent Code）的技术。</p>
<p>这里把共享目标模块中的地址引用按照是否跨模块分为内部引用和外部引用，根据引用方式分为指令引用和数据访问，这样就得到了四种情况：</p>
<ol>
<li>模块内部的函数调用、调转等</li>
<li>模块内部的数据访问，比如定义在模块中的全局变量、静态变量</li>
<li>模块外部的函数调用、调转等</li>
<li>模块外部的数据访问，比如定义在其他模块中的全局变量</li>
</ol>
<p><strong>模块内的函数调用、调转</strong></p>
<p>模块内部的调转、函数调用都可以是相对地址调用，这种指令不需要重定位。</p>
<p><strong>模块内的数据访问</strong></p>
<p>使用的相对寻址。ELF获取当前指令地址（PC）的值，再加上一条偏移量即可。</p>
<p><strong>模块间的数据访问</strong></p>
<p>这种其他模块的全局变量的地址跟装载地址有关，ELF的做法是在数据段里面建立一个指向这些变量的指针数组，被称为全局偏移表（Global Offset Table），当代码需要引用全局变量时可以通过GOT中相对应的项间接引用。
指令要访问这种变量的时候，程序首先找到GOT，根据GOT中变量对应的项找到变量的目标地址。每个变量都对应一个4字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项，确保每个指针指向的地址正确。由于GOT本身放在数据段，可以再模块装载时被修改，并且每个进程都可以有独立的副本，相互不受影响。</p>
<p><strong>模块间的函数调用、跳转</strong></p>
<p>采用上述方法解决，不同的是GOT存放目标函数的地址</p>
<p><code>-fpic</code>和<code>-fPIC</code>：</p>
<p>这两个GCC的参数都用来生成地址无关代码，区别在于大写的产生的代码也要大，但是对硬件平台的适应能力强于小写的。</p>
<h3 id="共享模块的全局变量">共享模块的全局变量</h3>
<p>如果一个模块引用了一个定义在共享对象的全局变量的时候，编译器无法根据上下文判断这个全局变量是定义在同一个模块的其他目标文件还是定义在另一个共享模块中，即无法判断是否是跨模块的调用。所以默认把定义在模块内部的全局变量当作跨模块的情况处理，也就是通过GOT实现变量的访问。</p>
<p>当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，动态链接器就会把GOT中的相对地址指向该副本，如果变量在共享模块中被初始化，动态链接器还需要把初始化值复制到程序主模块中的变量副本，如果该全局变量在程序主模块中没有副本，GOT的相对地址就指向模块内部的该变量副本</p>
<h2 id="延迟绑定-plt">延迟绑定 (PLT)</h2>
<p>为了提升动态链接的性能</p>
<h4 id="基本实现">基本实现</h4>
<p>基本思想就是当函数第一次被用到时才绑定，进行符号查找和重定位的工作，没用到就不绑定。ELF用PLT（Procedure Linkage Table）的方法实现。</p>
<p>调用某个外部模块的函数时，正常方法是通过GOT中相应的项进行间接跳转。PLT为了实现延迟绑定，在这个过程中间增加了一层间接跳转。调用函数并不直接通过GOT跳转，而是通过PLT来进行跳转。所有外部函数在PLT中都有一个相应的项，假设<code>bar()</code>函数在PLT中项的地址称为bar@plt，下面是它的实现：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">bar@plt:</span>
</span></span><span class="line"><span class="cl"><span class="nf">jmp</span> <span class="p">*(</span><span class="no">bar@GOT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">push</span> <span class="no">n</span>
</span></span><span class="line"><span class="cl"><span class="nf">jump</span> <span class="no">find_from_got</span></span></span></code></pre></div></div>
<p>第一条指令是通过GOT间接跳转，<code>bar@GOT</code>表示GOT中保存<code>bar()</code>函数相对应的项，如果链接器初始化该项就会跳转去调用函数。为了实现延迟绑定，初始化并没有把地址填进去。第二条指令将n压栈，这个数字是bar符号引用在重定位表<code>.rel.plt</code>中的下标，然后跳转到<code>find_from_got</code>，其进行一系列工作就会将<code>bar()</code>真正的地址填入<code>bar@GOT</code>中，再次调用即可跳转。</p>
<p>这种函数一旦被解析完毕，第一条的<code>jmp</code>指令就可以调转到真正的<code>bar()</code>函数找那个，函数返回时根据堆栈保存的EIP的值直接返回调用者，而不需要执行<code>bar@plt()</code>中的代码，这段代码只会在符号未解析的时候调用一次。</p>
<p>上面描述的是基本原理，现实中PLT的实现要稍复杂一些。GOT被拆分成了<code>.got</code>和<code>.got.plt</code>两个表，<code>.got</code>存放全局变量引用的地址，<code>.got.plt</code>保存函数引用的地址。实际上的PLT的结构也与上述的PLT有所不同。</p>
<h2 id="动态链接相关结构">动态链接相关结构</h2>
<p>Linux系统下，动态链接器ld.so就是一个共享对象，操作系统同样可以通过映射的方式将它加载到进程的地址空间中。操作系统完成加载动态链接器后就会将控制权交给动态链接器的入口地址，得到控制权后再执行一系列自身的初始化操作，根据当前的环境参数开始对可执行文件进行动态链接工作，当所有的动态链接工作完成之后，动态链接器会将控制权交给可执行文件的入口地址，程序开始正式执行。</p>
<h3 id="interp段"><code>.interp</code>段</h3>
<p><code>.interp</code>的内容就是一个字符串，这个字符串就是动态链接器所在的路径。</p>
<p>使用objdump可以查看该路径</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ objdump -s hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hello:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Contents of section .interp:
</span></span><span class="line"><span class="cl"> <span class="m">0318</span> 2f6c6962 36342f6c 642d6c69 6e75782d  /lib64/ld-linux-
</span></span><span class="line"><span class="cl"> <span class="m">0328</span> 7838362d 36342e73 6f2e3200           x86-64.so.2. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<h3 id="dynamic段"><code>.dynamic</code>段</h3>
<p>这是动态链接ELF中最重要的结构，这个段保存了动态链接器所需要的基本信息，比如以来哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-C">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Sxword</span>	<span class="n">d_tag</span><span class="p">;</span>			<span class="cm">/* Dynamic entry type */</span>
</span></span><span class="line"><span class="cl">  <span class="k">union</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Elf64_Xword</span> <span class="n">d_val</span><span class="p">;</span>		     <span class="cm">/* Integer value */</span>
</span></span><span class="line"><span class="cl">      <span class="n">Elf64_Addr</span> <span class="n">d_ptr</span><span class="p">;</span>			<span class="cm">/* Address value */</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="n">d_un</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Dyn</span><span class="p">;</span></span></span></code></pre></div></div>
<p>下面列举几个d_tag常见的值，全部定义在elf.h文件中，就在Elf64_Dyn的定义下面。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">d_tag类型</th>
          <th style="text-align: left">d_un含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">DT_SYMTAB</td>
          <td style="text-align: left">动态链接符号表的地址，d_ptr表示<code>.dynsym</code>的地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_STRTAB</td>
          <td style="text-align: left">动态链接字符串表的地址，d_ptr表示<code>.dynstr</code>的地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_STRSZ</td>
          <td style="text-align: left">动态链接字符串表大小，d_val表示大小</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_HASH</td>
          <td style="text-align: left">动态链接哈希表地址，d_ptr表示<code>.hash</code>地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_SONAME</td>
          <td style="text-align: left">本共享文件的<code>SO-NAME</code></td>
      </tr>
      <tr>
          <td style="text-align: center">DT_RPATH</td>
          <td style="text-align: left">动态链接共享对象搜索路径</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_INIT</td>
          <td style="text-align: left">初始化代码地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_FINT</td>
          <td style="text-align: left">结束代码地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_NEED</td>
          <td style="text-align: left">依赖的共享目标文件，d_ptr表示所依赖的共享目标文件名</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_REL	DT_RELA</td>
          <td style="text-align: left">动态链接重定位表地址</td>
      </tr>
      <tr>
          <td style="text-align: center">DT_RELENT   DT_RELAENT</td>
          <td style="text-align: left">动态重读位表入口数量</td>
      </tr>
  </tbody>
</table>
<h3 id="动态符号表">动态符号表</h3>
<p>完成动态链接的关在在于所依赖的符号和相关文件的信息。静态链接中，有一个专门的段叫符号表<code>.symtab</code>，里面保存了所有关于该目标文件的符号的定义和引用。动态链接和静态链接相似，比如前面例子中<code>program1</code>依赖于<code>Lib.so</code>，引用了里面的<code>foobar()</code>函数，对于<code>program1</code>来说，<code>program1</code>导入了<code>foobar()</code>函数，<code>foobar()</code>就是它的导入函数，对于<code>Lib.so</code>来说，它定义了<code>foobar()</code>函数并提供给其他模块使用，<code>foobar()</code>就是它的导出函数。</p>
<p>为了表示动态链接这些诶模块之间的导入导出关系，ELF专门有一个叫做动态符号表 (Dynamic Symbol Table)的段用来保存这些信息，这个段的段名通常叫做<code>.dynsym</code> 。与<code>.symtab</code>不同的是，<code>dynsym</code>只保存了动态链接相关的符号，对于模块内部的符号（比如模块的私有变量）。很多时候动态链接的模块通识拥有<code>.dynsym</code>和<code>.symtab</code>两个表，后者往往保存了所有符号，包括<code>.dynsym</code>中的符号。</p>
<p>和<code>.symtab</code>类似，动态符号表也需要一些辅助的表，比如用来保存符号名的字符串表。静态链接时叫符号字符串表<code>.strtab</code>，这里就是动态符号字符串表<code>.dynstr</code> (Synamic String Tab)；为了加快程序运行时查找符号的过程，往往该还有辅助的符号哈希表<code>.hash</code>可以用readelf查看ELF文件的动态符号表和哈希表。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ readelf -sD Lib.so
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Symbol table <span class="k">for</span> image contains <span class="m">8</span> entries:
</span></span><span class="line"><span class="cl">   Num:    Value          Size Type    Bind   Vis      Ndx Name
</span></span><span class="line"><span class="cl">     0: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  LOCAL  DEFAULT  UND 
</span></span><span class="line"><span class="cl">     1: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT<span class="o">[</span>...<span class="o">]</span>
</span></span><span class="line"><span class="cl">     2: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND <span class="o">[</span>...<span class="o">]</span>@GLIBC_2.2.5 <span class="o">(</span>2<span class="o">)</span>
</span></span><span class="line"><span class="cl">     3: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__
</span></span><span class="line"><span class="cl">     4: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC<span class="o">[</span>...<span class="o">]</span>
</span></span><span class="line"><span class="cl">     5: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND sleep@GLIBC_2.2.5 <span class="o">(</span>2<span class="o">)</span>
</span></span><span class="line"><span class="cl">     6: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    WEAK   DEFAULT  UND <span class="o">[</span>...<span class="o">]</span>@GLIBC_2.2.5 <span class="o">(</span>2<span class="o">)</span>
</span></span><span class="line"><span class="cl">     7: <span class="m">0000000000001119</span>    <span class="m">54</span> FUNC    GLOBAL DEFAULT   <span class="m">12</span> foobar</span></span></code></pre></div></div>
<h3 id="动态链接重定位表">动态链接重定位表</h3>
<p>共享对象需要重定位的主要原因是导入符号的存在。动态链接下，无论是可执行文件或共享对象，一旦其依赖于其他共享对象，就会存在对导入符号的引用。编译时这些导入符号的地址未知。静态链接中，这些未知的地址引用在最终链接时被修正。在动态链接中，导入符号的地址在运行时才能确定，所以需要运行时将这些导入符号的引用修正，即需要重定位。
动态链接下，如果一个共享对象不是以PIC模式编译的，毫无疑问需要重定位；如果其是PIC模式编译，事实上也需要重定位。</p>
<p>对于使用PIC技术的可执行文件或共享对象来说，虽然代码段不需要重定位（因为与地址无关），但是数据段还包含了绝对地址的引用，因为代码段中绝对地址相关的部分被分离了出来，变成GOT，而GOT实际上是数据段的一部分。除了GOT外，数据段还可能包含绝对地址引用。</p>
<h4 id="动态链接重定位相关结构">动态链接重定位相关结构</h4>
<p>共享对象的重定位与前面静态链接中的目标文件的重定位十分类似，唯一的区别在于目标文件的重定位在静态链接时完成，而共享对象的重定位在装载时完成。在静态链接中，目标文件里面包含有专门用于表示重定位信息的重定位表（<code>.rel.text</code>、<code>.rel.data</code>）</p>
<p>动态链接的文件中，也有类似的重定位表分别叫做<code>.rel.dyn</code>和<code>.rel.plt</code>，分别相当于静态链接的<code>.rel.text</code>和<code>.rel.data</code>。<code>rel.dyn</code>实际上时对数据引用的修正，它所修正的位置位于<code>.got</code>以及数据段，而<code>.rel.plt</code>时对函数引用的修正，它修正的位置位于<code>.got.plt</code>。可以使用readelf查看一个动态链接的文件的重定位表</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ readelf -r Lib.so 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relocation section <span class="s1">&#39;.rela.dyn&#39;</span> at offset 0x498 contains <span class="m">7</span> entries:
</span></span><span class="line"><span class="cl">  Offset          Info           Type           Sym. Value    Sym. Name + Addend
</span></span><span class="line"><span class="cl">000000003df8  <span class="m">000000000008</span> R_X86_64_RELATIVE                    <span class="m">1110</span>
</span></span><span class="line"><span class="cl">000000003e00  <span class="m">000000000008</span> R_X86_64_RELATIVE                    10c0
</span></span><span class="line"><span class="cl"><span class="m">000000004010</span>  <span class="m">000000000008</span> R_X86_64_RELATIVE                    <span class="m">4010</span>
</span></span><span class="line"><span class="cl">000000003fc8  <span class="m">000100000006</span> R_X86_64_GLOB_DAT <span class="m">0000000000000000</span> _ITM_deregisterTM<span class="o">[</span>...<span class="o">]</span> + <span class="m">0</span>
</span></span><span class="line"><span class="cl">000000003fd0  <span class="m">000300000006</span> R_X86_64_GLOB_DAT <span class="m">0000000000000000</span> __gmon_start__ + <span class="m">0</span>
</span></span><span class="line"><span class="cl">000000003fd8  <span class="m">000400000006</span> R_X86_64_GLOB_DAT <span class="m">0000000000000000</span> _ITM_registerTMCl<span class="o">[</span>...<span class="o">]</span> + <span class="m">0</span>
</span></span><span class="line"><span class="cl">000000003fe0  <span class="m">000600000006</span> R_X86_64_GLOB_DAT <span class="m">0000000000000000</span> __cxa_finalize@GLIBC_2.2.5 + <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relocation section <span class="s1">&#39;.rela.plt&#39;</span> at offset 0x540 contains <span class="m">2</span> entries:
</span></span><span class="line"><span class="cl">  Offset          Info           Type           Sym. Value    Sym. Name + Addend
</span></span><span class="line"><span class="cl"><span class="m">000000004000</span>  <span class="m">000200000007</span> R_X86_64_JUMP_SLO <span class="m">0000000000000000</span> printf@GLIBC_2.2.5 + <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="m">000000004008</span>  <span class="m">000500000007</span> R_X86_64_JUMP_SLO <span class="m">0000000000000000</span> sleep@GLIBC_2.2.5 + <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ readelf -S Lib.so
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">  <span class="o">[</span>20<span class="o">]</span> .got              PROGBITS         0000000000003fc8  00002fc8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000020</span>  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>21<span class="o">]</span> .got.plt          PROGBITS         0000000000003fe8  00002fe8
</span></span><span class="line"><span class="cl">       <span class="m">0000000000000028</span>  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>之前在静态链接的指令修正介绍了R_X86_64_PC32和R_X86_64_PLT32。这里可以看到一些新的类型：R_X86_64_RELATIVE、R_X86_64_GLOB_DAT和R_X86_64_JUMP_SLO。
这里可以看到<code>printf()</code>函数的重定位入口类型是R_X86_64_JUMP_SLO，它的偏移是000000004000，实际上位于<code>.got.plt</code>中。<code>.got.plt</code>的前三项被系统占据，从第四项开始才是真正存放数据。第四项就是0000000000003fe8 + 3 * 8 = 000000004000，即<code>printf()</code>，第五项就是<code>sleep()</code>。</p>
<p>动态链接器进行重定位时，它先查找<code>printf()</code>的地址，<code>printf</code>位于libc.so.6，地址找到后就会将地址填到<code>.got.plt</code>中的偏移为000000004000的位置上，从而实现了地址的重定位。</p>
<p>R_X86_64_GLOB_DAT是对<code>.got</code>的重定位，它和R_X86_64_JUMP_SLO相似。</p>
<p>R_X86_64_RELATIVE这种类型的重定位实际上是基址重置。共享对象的数据段无法做到地址无关，所以必须在装载时将其重定位。对于下面这样的代码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在编译时，共享对象的地址从0开始，假设静态变量a相对于起始地址的偏移时A，即p的值时A。一旦共享对象被装载到地址B，那么实际上该变量的地址就要变成A+B，p的值也得跟着变。R_X86_64_RELATIVE类型的重定位入口就是用来重定位p变量这种类型的，变量在装载时需要加上一个装载地址才是正确的结果。</p>
<h3 id="动态链接时进程堆栈初始化信息">动态链接时进程堆栈初始化信息</h3>
<p>从动态链接器的角度来看，当操作系统把控制权交给它的时候，它将开始做链接工作，那么它至少需要知道关于可执行文件和本进程的一些信息，比如可执行文件的segment，程序的入口地址等等。这些信息往往由操作系统传递给动态链接器，保存在进程的堆栈里面。堆栈保存动态链接器所需的辅助信息数组，其在elf.h中有定义</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">a_type</span><span class="p">;</span>		     <span class="cm">/* Entry type */</span>
</span></span><span class="line"><span class="cl">  <span class="k">union</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">uint64_t</span> <span class="n">a_val</span><span class="p">;</span>		<span class="cm">/* Integer value */</span>
</span></span><span class="line"><span class="cl">      <span class="cm">/* We use to have pointer elements added here.  We cannot do that,
</span></span></span><span class="line"><span class="cl"><span class="cm">	 though, since it does not work when using 32-bit definitions
</span></span></span><span class="line"><span class="cl"><span class="cm">	 on 64-bit platforms and vice versa.  */</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="n">a_un</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_auxv_t</span><span class="p">;</span></span></span></code></pre></div></div>
<table>
  <thead>
      <tr>
          <th style="text-align: center">a_type定义</th>
          <th style="text-align: center">a_type值</th>
          <th style="text-align: left">a_val含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">AT_NULL</td>
          <td style="text-align: center">0</td>
          <td style="text-align: left">表示辅助信息数组结束</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_EXEFD</td>
          <td style="text-align: center">2</td>
          <td style="text-align: left">表示可执行文件的文件文件描述符。动态链接器需要知道关于可执行文件的信息，进程执行可执行文件时，操作系统就会把文件打开，这时就会产生文件文件描述符</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_PHDR</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">可执行文件的程序头表在进程中的地址</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_PHDR</td>
          <td style="text-align: center">3</td>
          <td style="text-align: left">动态链接器可以用AT_EXEFD那样通过操作系统读写文件功能访问可执行文件，但操作系统还可以将可执行文件映射到进程的虚拟地址空间中，动态链接器就可以直接访问内存中的文件映像。所以操作系统要么选择上面的方式，要么选择这种方式。选择这种方式，操作系统必须提供后面的AT_PHENT、AT_PHNUM和AT_ENTRY这几个类型</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_PHENT</td>
          <td style="text-align: center">4</td>
          <td style="text-align: left">可执行文件头中程序头表中每一个入口的大小</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_PHNUM</td>
          <td style="text-align: center">5</td>
          <td style="text-align: left">可执行文件头中程序员表中入口的数量</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_BASE</td>
          <td style="text-align: center">7</td>
          <td style="text-align: left">动态链接器本身的装载地址</td>
      </tr>
      <tr>
          <td style="text-align: center">AT_ENTRY</td>
          <td style="text-align: center">9</td>
          <td style="text-align: left">可执行文件入口地址</td>
      </tr>
  </tbody>
</table>
<h2 id="动态链接的步骤和实现">动态链接的步骤和实现</h2>
<h3 id="动态链接器bootstrap">动态链接器bootstrap</h3>
<p>动态链接器是一个特殊的共享对象，本身不依赖于其他任何共享对象，它所需要的全局和静态变量的重定位工作由自身完成。这需要一段精巧的代码在不用到这些变量的情况下完成对于这些变量的重定位，这种启动代码被称为bootstrap。</p>
<p>动态链接器的入口地址就是bootstrap代码的入口。bootstrap代码首先找到自己的GOT。GOT的第一个入口保存的是<code>.dynamic</code>段的偏移地址，由此找到了动态链接器本身的<code>.dynamic</code>段。通过<code>.dynamic</code>中的信息，bootstrap代码可以获得动态链接器本身的重定位表和符号表等，从而得到动态链接器本身的重定位入口，先将它们全部重定位。从这一步开始，动态链接器代码中才可以使用自己的全局变量和静态变量。</p>
<p>实际上动态链接器在bootstrap代码中，除了不可是哟个全局变量和静态变量之外，甚至不能调用函数。使用PIC模式编译的共享对象，对于模块内部的函数调用也是和模块外部函数调用使用一样的方式——GOT/PLT，所以在其没有重定位之前，bootstrap代码不能使用它们。在Glibc源码下elf/rtld.c中有一段注释：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">  <span class="o">/*</span> <span class="n">Now</span> <span class="n">life</span> <span class="n">is</span> <span class="n">sane</span><span class="p">;</span> <span class="n">we</span> <span class="n">can</span> <span class="n">call</span> <span class="n">functions</span> <span class="ow">and</span> <span class="n">access</span> <span class="n">global</span> <span class="n">data</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">     <span class="n">Set</span> <span class="n">up</span> <span class="n">to</span> <span class="n">use</span> <span class="n">the</span> <span class="n">operating</span> <span class="n">system</span> <span class="n">facilities</span><span class="p">,</span> <span class="ow">and</span> <span class="n">find</span> <span class="n">out</span> <span class="n">from</span>
</span></span><span class="line"><span class="cl">     <span class="n">the</span> <span class="n">operating</span> <span class="n">system</span><span class="s1">&#39;s program loader where to find the program</span>
</span></span><span class="line"><span class="cl">     <span class="n">header</span> <span class="n">table</span> <span class="ow">in</span> <span class="n">core</span><span class="o">.</span>  <span class="n">Put</span> <span class="n">the</span> <span class="n">rest</span> <span class="n">of</span> <span class="n">_dl_start</span> <span class="n">into</span> <span class="n">a</span> <span class="n">separate</span>
</span></span><span class="line"><span class="cl">     <span class="n">function</span><span class="p">,</span> <span class="n">that</span> <span class="n">way</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">cannot</span> <span class="n">put</span> <span class="n">accesses</span> <span class="n">to</span> <span class="n">the</span> <span class="n">GOT</span>
</span></span><span class="line"><span class="cl">     <span class="n">before</span> <span class="n">ELF_DYNAMIC_RELOCATE</span><span class="o">.</span>  <span class="o">*/</span></span></span></code></pre></div></div>
<p>该注释写在bootstrap代码的结尾。</p>
<h3 id="装载共享对象">装载共享对象</h3>
<p>完成bootstrap之后，动态链接器将可执行文件和链接器自身的符号表都合并到一个符号表中，称为全局符号表。之后链接器寻找可执行文件所依赖的共享对象，在<code>.dynamic</code>段中，类型DT_NEEDED所指的就是这个。链接器列出可执行文件所需的共享对象，将它们的名字放到一个集合中，链接器从集合中读取一个名字，找到并打开相应的文件，读取相应的ELF文件头和<code>.dynamic</code>段，然后将它相应的代码段和数据段映射到进程空间。如果ELF共享对象还依赖于其他共享对象，那么将所依赖的共享对象的名字放到集合中。当然链接器可以有不同的装载顺序。</p>
<p>当一个新的共享对象被装载进来时，它的符号表会被合并到全局符号表中。</p>
<p><strong>符号的优先级</strong></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//a1.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">a</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a1.c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//a2.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">a</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">     <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a2.c </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//b1.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">a</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">b1</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">     <span class="nf">a</span><span class="p">()</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//b2.c:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">a</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">b2</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">     <span class="nf">a</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里指定b1.so依赖于a1.so，b2.so依赖于a2.so。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -fPIC -shared a1.c -o a1.so
</span></span><span class="line"><span class="cl">$ gcc -fPIC -shared a2.c -o a2.so
</span></span><span class="line"><span class="cl">$ gcc -fPIC -shared b1.c a1.so -o b1.so
</span></span><span class="line"><span class="cl">$ gcc -fPIC -shared b2.c a2.so -o b2.so</span></span></code></pre></div></div>
<p>这时候如果程序使用了<code>b1()</code>函数和<code>b2()</code>函数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">b1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">b2</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">b1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">b2</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc main.c b1.so b2.so -o main -Wl,-rpath<span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>,--disable-new-dtags
</span></span><span class="line"><span class="cl">$ ./main
</span></span><span class="line"><span class="cl">a1.c
</span></span><span class="line"><span class="cl">a1.c</span></span></code></pre></div></div>
<p>这里的-Wl用于将后续逗号隔开的选项传给ld链接器</p>
<p>rpath指定链接器在本目录寻找共享对象，否则链接器会报出a1.so和b2.so不存在的错误</p>
<p>&ndash;disable-new-dtags，表示启用RPATH而不是RUNPATH，RUNPATH无法在装载a1.so和a2.so的时候也搜索这个路径，通过strace可以验证。当然用户可以手动修改环境变量，那么连RPATH也不用写了。</p>
<p><a href="https://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld" target="_blank" rel="noopener noreffer ">How to set RPATH and RUNPATH with GCC/LD?</a></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>.<span class="p">;</span> </span></span></code></pre></div></div>
<p>在main.c中加个<code>sleep()</code>函数以查看main程序的进程地址空间</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /proc/4329/maps 
</span></span><span class="line"><span class="cl">562581f38000-562581f39000 r--p <span class="m">00000000</span> 00:17 <span class="m">172029</span>                     /home/suoyuan/test/main
</span></span><span class="line"><span class="cl">562581f39000-562581f3a000 r-xp <span class="m">00001000</span> 00:17 <span class="m">172029</span>                     /home/suoyuan/test/main
</span></span><span class="line"><span class="cl">562581f3a000-562581f3b000 r--p <span class="m">00002000</span> 00:17 <span class="m">172029</span>                     /home/suoyuan/test/main
</span></span><span class="line"><span class="cl">562581f3b000-562581f3c000 r--p <span class="m">00002000</span> 00:17 <span class="m">172029</span>                     /home/suoyuan/test/main
</span></span><span class="line"><span class="cl">562581f3c000-562581f3d000 rw-p <span class="m">00003000</span> 00:17 <span class="m">172029</span>                     /home/suoyuan/test/main
</span></span><span class="line"><span class="cl">562581fab000-562581fcc000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>heap<span class="o">]</span>
</span></span><span class="line"><span class="cl">7fd22c779000-7fd22c77b000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fd22c77b000-7fd22c77c000 r--p <span class="m">00000000</span> 00:17 <span class="m">171921</span>                     /home/suoyuan/test/a2.so
</span></span><span class="line"><span class="cl">7fd22c77c000-7fd22c77d000 r-xp <span class="m">00001000</span> 00:17 <span class="m">171921</span>                     /home/suoyuan/test/a2.so
</span></span><span class="line"><span class="cl">7fd22c77d000-7fd22c77e000 r--p <span class="m">00002000</span> 00:17 <span class="m">171921</span>                     /home/suoyuan/test/a2.so
</span></span><span class="line"><span class="cl">7fd22c77e000-7fd22c77f000 r--p <span class="m">00002000</span> 00:17 <span class="m">171921</span>                     /home/suoyuan/test/a2.so
</span></span><span class="line"><span class="cl">7fd22c77f000-7fd22c780000 rw-p <span class="m">00003000</span> 00:17 <span class="m">171921</span>                     /home/suoyuan/test/a2.so
</span></span><span class="line"><span class="cl">7fd22c780000-7fd22c781000 r--p <span class="m">00000000</span> 00:17 <span class="m">171920</span>                     /home/suoyuan/test/a1.so
</span></span><span class="line"><span class="cl">7fd22c781000-7fd22c782000 r-xp <span class="m">00001000</span> 00:17 <span class="m">171920</span>                     /home/suoyuan/test/a1.so
</span></span><span class="line"><span class="cl">7fd22c782000-7fd22c783000 r--p <span class="m">00002000</span> 00:17 <span class="m">171920</span>                     /home/suoyuan/test/a1.so
</span></span><span class="line"><span class="cl">7fd22c783000-7fd22c784000 r--p <span class="m">00002000</span> 00:17 <span class="m">171920</span>                     /home/suoyuan/test/a1.so
</span></span><span class="line"><span class="cl">7fd22c784000-7fd22c785000 rw-p <span class="m">00003000</span> 00:17 <span class="m">171920</span>                     /home/suoyuan/test/a1.so
</span></span><span class="line"><span class="cl">7fd22c785000-7fd22c7a7000 r--p <span class="m">00000000</span> 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fd22c7a7000-7fd22c902000 r-xp <span class="m">00022000</span> 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fd22c902000-7fd22c959000 r--p 0017d000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fd22c959000-7fd22c95d000 r--p 001d4000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fd22c95d000-7fd22c95f000 rw-p 001d8000 00:17 <span class="m">4066</span>                       /usr/lib/libc.so.6
</span></span><span class="line"><span class="cl">7fd22c95f000-7fd22c96c000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fd22c988000-7fd22c989000 r--p <span class="m">00000000</span> 00:17 <span class="m">171923</span>                     /home/suoyuan/test/b2.so
</span></span><span class="line"><span class="cl">7fd22c989000-7fd22c98a000 r-xp <span class="m">00001000</span> 00:17 <span class="m">171923</span>                     /home/suoyuan/test/b2.so
</span></span><span class="line"><span class="cl">7fd22c98a000-7fd22c98b000 r--p <span class="m">00002000</span> 00:17 <span class="m">171923</span>                     /home/suoyuan/test/b2.so
</span></span><span class="line"><span class="cl">7fd22c98b000-7fd22c98c000 r--p <span class="m">00002000</span> 00:17 <span class="m">171923</span>                     /home/suoyuan/test/b2.so
</span></span><span class="line"><span class="cl">7fd22c98c000-7fd22c98d000 rw-p <span class="m">00003000</span> 00:17 <span class="m">171923</span>                     /home/suoyuan/test/b2.so
</span></span><span class="line"><span class="cl">7fd22c98d000-7fd22c98e000 r--p <span class="m">00000000</span> 00:17 <span class="m">171922</span>                     /home/suoyuan/test/b1.so
</span></span><span class="line"><span class="cl">7fd22c98e000-7fd22c98f000 r-xp <span class="m">00001000</span> 00:17 <span class="m">171922</span>                     /home/suoyuan/test/b1.so
</span></span><span class="line"><span class="cl">7fd22c98f000-7fd22c990000 r--p <span class="m">00002000</span> 00:17 <span class="m">171922</span>                     /home/suoyuan/test/b1.so
</span></span><span class="line"><span class="cl">7fd22c990000-7fd22c991000 r--p <span class="m">00002000</span> 00:17 <span class="m">171922</span>                     /home/suoyuan/test/b1.so
</span></span><span class="line"><span class="cl">7fd22c991000-7fd22c992000 rw-p <span class="m">00003000</span> 00:17 <span class="m">171922</span>                     /home/suoyuan/test/b1.so
</span></span><span class="line"><span class="cl">7fd22c992000-7fd22c994000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span> 
</span></span><span class="line"><span class="cl">7fd22c994000-7fd22c995000 r--p <span class="m">00000000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fd22c995000-7fd22c9bc000 r-xp <span class="m">00001000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fd22c9bc000-7fd22c9c6000 r--p <span class="m">00028000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fd22c9c6000-7fd22c9c8000 r--p <span class="m">00032000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fd22c9c8000-7fd22c9ca000 rw-p <span class="m">00034000</span> 00:17 <span class="m">4057</span>                       /usr/lib/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7fff60507000-7fff60528000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">7fff605d3000-7fff605d7000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7fff605d7000-7fff605d9000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">ffffffffff600000-ffffffffff601000 --xp <span class="m">00000000</span> 00:00 <span class="m">0</span>              </span></span></code></pre></div></div>
<p>可以看到虽然这四个共享对象都被装载进来了，但最后得以执行的都是a1.so中的<code>a()</code>函数。这种符号覆盖的现象，被称为全局符号介入 (Global Symbol Interpose)
Linux的链接器定义了一个规则用于处理该问题，即不添加一个已有的符号到全局符号表中。可以通过strace查看其装载顺序可以发现，a2.so是最后装载的，所以最后打印两个都是a1.c。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ strace ./main 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep openat</span></span></code></pre></div></div>
<p><strong>全局符号介入和地址无关代码</strong></p>
<p>之前介绍过在地址无关代码中提到模块内的函数调用直接相对地址。由于存在全局符合介入的问题，模块内a函数对b函数的调用不能那么简单地处理。一旦b函数被其他模块的同名函数覆盖，a函数采用相对地址的话就需要重定位。所以对b函数的调用来说，编译器会当作跨模块的来处理。不过我现在有一个小猜测就是GCC能够优化这个玩意
为了提高效率，可以认为的将其变成私有的函数，也就是用<code>static</code>关键字。</p>
<h3 id="重定位和初始化">重定位和初始化</h3>
<p>完成上述步骤，链接器开始重新遍历可执行文件和每个共享对象的重定位表，将它们的GOT/PLT中每个需要修正的位置进行修正。</p>
<p>重定位后，如果某个共享对象存在<code>.init</code>段，那么动态链接器就会执行<code>.init</code>段中的代码。可执行文件也有<code>.init</code>段不由动态链接器执行，它有程序初始化部分代码负责执行。
此时，动态链接器将进程的控制权转交给程序的入口并开始执行。</p>
<h2 id="显示运行时链接">显示运行时链接</h2>
<p>支持动态链接的系统往往还支持另一种模块加载方式——显示运行时加载 (Explicit Run-time Linking)，又叫运行时加载。一般的共享对象不需要进行任何修改就可以搞这种方式，这种共享对象往往叫做动态装载库。</p>
<p>之前的共享对象的装载和链接都是由动态链接器在程序启动之前完成，而动态链接器的装载则是通过一系列动态链接器提供的API来完成。这里具体指四个函数：<code>dlopen()</code>、<code>dlsym()</code>、<code>dlerror()</code>和<code>dlclose()</code>。</p>
<p>下面关于这四个函数的叙述在man页中基本都能找到</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">man <span class="m">3</span> <span class="o">{</span>dlopen, dlsym, dlerror, dlclose<span class="o">}</span></span></span></code></pre></div></div>
<h3 id="dlopen">dlopen()</h3>
<p><code>dlopen()</code>函数用于打开一个动态库，并将其加载到进程的地址空间，完成初始化。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">dlopen</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span></span></span></code></pre></div></div>
<p>第一个参数时被加载动态库的路径，如果这个路径是绝对路径就直接开，如果是相对路径，<code>dlopen()</code>会尝试一定的顺序去查找该文件。</p>
<ol>
<li>查找LD_LIBRARY_PATH环境变量指定的目录</li>
<li>查找/etc/ld.so.cache里面指定的路径</li>
<li>/lib、/usr/lib</li>
</ol>
<p>如果filename的值为0，<code>dlopen()</code>将返回全局符号表的句柄。</p>
<p>第二个参数flag表示函数符号的解析方式，RTLD_LAZY表示延迟绑定，RTLD_NOW表示当模块被加载完时即完成所有的函数绑定工作，二者选其一。还有一些常量可以和前面两个搭配使用，像RTLD_GLOBAL表示将加载的模块的全局变量合并到进程的全局符号表中。</p>
<p><code>dlopen()</code>的返回值时被加载模块的句柄，用于后续操作。如果加载失败则返回NULL，已加载返回的还是原先的句柄。</p>
<h3 id="dlsym">dlsym()</h3>
<p><code>dlsym()</code>函数是运行时装载的核心部分，用来找到所需的符号</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">dlsym</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">handle</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">symbol</span><span class="p">);</span></span></span></code></pre></div></div>
<p>第一个参数是<code>dlopen()</code>返回的句柄，第二个参数是要查找的符号的名字（一个以\0结尾的C字符串）。如果<code>dlsym()</code>找到了相应的符号就会返回该符号的值，没有就是NULL。
如果符号是函数或者变量，返回的是地址；如果符号是常量，返回的是值。</p>
<p>为了防止常量值就是NULL或者0，还应该使用<code>dlerror()</code>函数判一手，如果该函数返回NULL就是符号找到了，没找到这个函数会返回相应的错误信息。</p>
<h3 id="dlerror">dlerror()</h3>
<p>每次调用<code>dlopen()</code>、<code>dlsym()</code>或<code>dlclose()</code>之后，都可以通过调用<code>dlerror()</code>来判断上一次调用是否成功。
成功返回NULL，不成功返回相应的错误信息。</p>
<h3 id="dlclose">dlclose()</h3>
<p><code>dlclose()</code>的作用和<code>dlopen()</code>相反，它的作用是将一个已加载的模块卸载。系统维持一个加载引用计数器，每次使用<code>dlopen()</code>加载某模块时，相应的计数器加一。</p>
<h3 id="运行时装载的演示程序">运行时装载的演示程序</h3>
<p>这里希望实现一个执行共享对象里的任意一个函数的程序，该程序的用法如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./runso &lt;shared object&gt; &lt;<span class="k">function</span>&gt; <span class="o">[</span>arg1<span class="o">]</span> <span class="o">[</span>arg2<span class="o">]</span> ... &lt;<span class="k">return</span> type&gt;</span></span></code></pre></div></div>
<p>因为x64函数调用约定的问题，我并没有想出一个比书中代码实现的更简单的办法，所以照抄了，GCC编译的时候带上-m32指定编译成32位的程序就行。实验用的共享对象也得搞成32位的。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;dlfcn.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define SETUP_STACK                            \
</span></span></span><span class="line"><span class="cl"><span class="cp">i = 2;                                         \
</span></span></span><span class="line"><span class="cl"><span class="cp">while (++i &lt; argc - 1)                         \
</span></span></span><span class="line"><span class="cl"><span class="cp">{                                              \
</span></span></span><span class="line"><span class="cl"><span class="cp">    switch (argv[i][0])                        \
</span></span></span><span class="line"><span class="cl"><span class="cp">    {                                          \
</span></span></span><span class="line"><span class="cl"><span class="cp">    case &#39;i&#39;:                                  \
</span></span></span><span class="line"><span class="cl"><span class="cp">        asm volatile(                          \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;push %0&#34; ::                       \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;r&#34;(atoi(&amp;argv[i][1])));           \
</span></span></span><span class="line"><span class="cl"><span class="cp">        esp += 4;                              \
</span></span></span><span class="line"><span class="cl"><span class="cp">        break;                                 \
</span></span></span><span class="line"><span class="cl"><span class="cp">    case &#39;d&#39;:                                  \
</span></span></span><span class="line"><span class="cl"><span class="cp">        atoi(&amp;argv[i][1]);                     \
</span></span></span><span class="line"><span class="cl"><span class="cp">        asm volatile(                          \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;subl $8, %esp\n&#34;                  \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;fstpl (%esp)&#34;);                   \
</span></span></span><span class="line"><span class="cl"><span class="cp">        esp += 8;                              \
</span></span></span><span class="line"><span class="cl"><span class="cp">        break;                                 \
</span></span></span><span class="line"><span class="cl"><span class="cp">    case &#39;s&#39;:                                  \
</span></span></span><span class="line"><span class="cl"><span class="cp">        asm volatile(                          \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;push %0&#34; ::                       \
</span></span></span><span class="line"><span class="cl"><span class="cp">            &#34;r&#34;(&amp;argv[i][1]));                 \
</span></span></span><span class="line"><span class="cl"><span class="cp">        esp += 4;                              \
</span></span></span><span class="line"><span class="cl"><span class="cp">        break;                                 \
</span></span></span><span class="line"><span class="cl"><span class="cp">    default:                                   \
</span></span></span><span class="line"><span class="cl"><span class="cp">        printf(&#34;error argument type\n&#34;);       \
</span></span></span><span class="line"><span class="cl"><span class="cp">        goto exit_runso;                       \
</span></span></span><span class="line"><span class="cl"><span class="cp">    }                                          \
</span></span></span><span class="line"><span class="cl"><span class="cp">}                                              \
</span></span></span><span class="line"><span class="cl"><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RESTORE_STACK                            \
</span></span></span><span class="line"><span class="cl"><span class="cp">    asm volatile(&#34;add %0, %%esp\n&#34; :: &#34;r&#34;(esp)); \
</span></span></span><span class="line"><span class="cl"><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span><span class="o">*</span> <span class="n">handle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">esp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span><span class="o">*</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">handle</span> <span class="o">=</span> <span class="nf">dlopen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">handle</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Can not find library: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">func</span> <span class="o">=</span> <span class="nf">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">error</span> <span class="o">=</span> <span class="nf">dlerror</span><span class="p">())</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Find symbol %s error:%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">goto</span> <span class="n">exit_runso</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="sc">&#39;i&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">func_int</span><span class="p">)()</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">SETUP_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">rati</span> <span class="o">=</span> <span class="nf">func_int</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">RESTORE_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;ret = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">rati</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="sc">&#39;d&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="p">(</span><span class="o">*</span><span class="n">func_double</span><span class="p">)()</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">SETUP_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">ratd</span> <span class="o">=</span> <span class="nf">func_double</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">RESTORE_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;ret = %f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ratd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span><span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">func_char</span><span class="p">)()</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">SETUP_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span><span class="o">*</span> <span class="n">ratc</span> <span class="o">=</span> <span class="nf">func_char</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">RESTORE_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;ret = %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ratc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="sc">&#39;v&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func_void</span><span class="p">)()</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">SETUP_STACK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">func_void</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;ret is anywhere </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nl">exit_runso</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nf">dlclose</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>下面是本次实验中共享对象的源码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">int_f</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You start me !!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span> <span class="p">(</span><span class="s">&#34;My type is int </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span><span class="o">*</span> <span class="nf">char_f</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You start me !!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;My type is char*</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">void_f</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;You start me !!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;My type is void</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -m32 runso.c -o runso
</span></span><span class="line"><span class="cl">$ gcc -shared -m32 hello.c -o hello.so
</span></span><span class="line"><span class="cl">$ ./runso ./hello.so char_f sssdwd s
</span></span><span class="line"><span class="cl">You start me !!!
</span></span><span class="line"><span class="cl">My <span class="nb">type</span> is char*
</span></span><span class="line"><span class="cl"><span class="nv">ret</span> <span class="o">=</span> ssdwd
</span></span><span class="line"><span class="cl">$ ./runso ./hello.so int_f i123 i
</span></span><span class="line"><span class="cl">You start me !!!
</span></span><span class="line"><span class="cl">My <span class="nb">type</span> is int
</span></span><span class="line"><span class="cl"><span class="nv">ret</span> <span class="o">=</span> <span class="m">123</span></span></span></code></pre></div></div>
<h1 id="linux共享库组织">Linux共享库组织</h1>
<p>从文件结构的角度来讲，共享库 (Shared Library)和共享对象没什么区别，Linux下的共享库就是普通的ELF共享对象。由于共享对象可以被多个程序共享，所以它就成为了库的存在形式，久而久之这俩概念已经模糊了，广义上可以堪称一个概念。</p>
<h2 id="共享库版本">共享库版本</h2>
<p>共享库的文件命名规则如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">libname.so.x.y.z</span></span></code></pre></div></div>
<p>xyz从左到右，主版本号、次版本号、发布版本号。</p>
<ul>
<li>主版本号表示库的重大升级，不同主版本号的库之间不兼容。</li>
<li>次版本号表示库的增量升级，即增加一些新的接口符号，且原有的不变。</li>
<li>发布版本号表示对库的一些错误的修正和性能的改进，不增加或修改新的接口。</li>
</ul>
<h3 id="so-name">SO-NAME</h3>
<p>SO-NAME是共享库文件名去掉次版本号和发布版本号的结果，比如libfoo.so.3.5.9的SO-NAME就是libfoo.so.3。</p>
<p>系统会为这个文件创建一个软连接指向以SO-NAME命名的文件，这样在大方向不变的情况下可以保证次版本号和发布版本号最新。</p>
<p>程序的<code>.dynamic</code>中也无需把依赖的文件名写的太死，限制了自己。</p>
<h2 id="符号版本">符号版本</h2>
<h3 id="基于符号的版本机制">基于符号的版本机制</h3>
<p>Glibc从2.1开始支持基于符号的版本机制 (Symbol Versioning)。该机制的基本思想就是让每个导出和导入符号都有一个相关联的版本号，实际做法类似于符号修饰。</p>
<p>与以往简单地重命名共享库版本号不同，假设把libfoo.so.1.2升级到1.3时，保持libfoo.so.1这个SO-NAME，给1.3这个新版打一个标记，比如VERS1.3。</p>
<h2 id="共享库系统路径">共享库系统路径</h2>
<p>FHS (File Hierarchy Standard)标准规定了Unix和类Unix系统的文件存放布局（系统文件该如何存放，各个目录的结构、组织和作用）。FHS规定，一个系统主要3个存放共享库的位置</p>
<ul>
<li>/lib，这个位置存放系统最关键和基础的共享库，这些库主要为系统启动以及/bin和/sbin目录下的程序服务。</li>
<li>/usr/lib，这个目录存放非系统运行时需要的关键性的共享库。</li>
<li>/usr/local/lib，存放第三方应用程序的库</li>
</ul>
<h2 id="共享库查找过程">共享库查找过程</h2>
<p>Linux系统都有一个叫做ldconfig的程序，这个程序的作用时为共享库目录下的各个共享库创建、删除或更新相应的SO-NAME。它还会将SO-NAME收集放到/etc/ld.so.cache文件中，建立SO-NAME缓存。动态链接器查找共享库时可以直接从这个特殊设计过的文件中查找，会加快共享库的查找过程。</p>
<p>其他的man页中有</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">man <span class="m">1</span> ld</span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">The</span> <span class="n">linker</span> <span class="n">uses</span> <span class="n">the</span> <span class="n">following</span> <span class="n">search</span> <span class="n">paths</span> <span class="n">to</span> <span class="n">locate</span> <span class="n">required</span> <span class="n">shared</span> <span class="n">libraries</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">1.</span>  <span class="n">Any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="o">-</span><span class="n">rpath</span><span class="o">-</span><span class="n">link</span> <span class="n">options</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">2.</span>  <span class="n">Any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="o">-</span><span class="n">rpath</span> <span class="n">options</span><span class="o">.</span>  <span class="n">The</span> <span class="n">difference</span> <span class="n">between</span> <span class="o">-</span><span class="n">rpath</span> <span class="ow">and</span> <span class="o">-</span><span class="n">rpath</span><span class="o">-</span><span class="n">link</span> <span class="n">is</span> <span class="n">that</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="o">-</span><span class="n">rpath</span> <span class="n">options</span> <span class="n">are</span> <span class="n">included</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">executable</span> <span class="ow">and</span> <span class="n">used</span> <span class="n">at</span> <span class="n">runtime</span><span class="p">,</span> <span class="n">whereas</span> <span class="n">the</span>
</span></span><span class="line"><span class="cl">               <span class="o">-</span><span class="n">rpath</span><span class="o">-</span><span class="n">link</span> <span class="n">option</span> <span class="n">is</span> <span class="n">only</span> <span class="n">effective</span> <span class="n">at</span> <span class="n">link</span> <span class="n">time</span><span class="o">.</span> <span class="n">Searching</span> <span class="o">-</span><span class="n">rpath</span> <span class="ow">in</span> <span class="n">this</span> <span class="n">way</span> <span class="n">is</span> <span class="n">only</span> <span class="n">supported</span> <span class="n">by</span> <span class="n">native</span> <span class="n">linkers</span> <span class="ow">and</span> <span class="n">cross</span> <span class="n">linkers</span> <span class="n">which</span> <span class="n">have</span> <span class="n">been</span> <span class="n">configured</span> <span class="n">with</span> <span class="n">the</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">sysroot</span> <span class="n">option</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">3.</span>  <span class="n">On</span> <span class="n">an</span> <span class="n">ELF</span> <span class="n">system</span><span class="p">,</span> <span class="k">for</span> <span class="n">native</span> <span class="n">linkers</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="o">-</span><span class="n">rpath</span> <span class="ow">and</span> <span class="o">-</span><span class="n">rpath</span><span class="o">-</span><span class="n">link</span> <span class="n">options</span> <span class="n">were</span> <span class="ow">not</span> <span class="n">used</span><span class="p">,</span> <span class="n">search</span> <span class="n">the</span> <span class="n">contents</span> <span class="n">of</span> <span class="n">the</span> <span class="n">environment</span> <span class="n">variable</span> <span class="s2">&#34;LD_RUN_PATH&#34;</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">4.</span>  <span class="n">On</span> <span class="n">SunOS</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="o">-</span><span class="n">rpath</span> <span class="n">option</span> <span class="n">was</span> <span class="ow">not</span> <span class="n">used</span><span class="p">,</span> <span class="n">search</span> <span class="n">any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">using</span> <span class="o">-</span><span class="n">L</span> <span class="n">options</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">5.</span>  <span class="n">For</span> <span class="n">a</span> <span class="n">native</span> <span class="n">linker</span><span class="p">,</span> <span class="n">search</span> <span class="n">the</span> <span class="n">contents</span> <span class="n">of</span> <span class="n">the</span> <span class="n">environment</span> <span class="n">variable</span> <span class="s2">&#34;LD_LIBRARY_PATH&#34;</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">6.</span>  <span class="n">For</span> <span class="n">a</span> <span class="n">native</span> <span class="n">ELF</span> <span class="n">linker</span><span class="p">,</span> <span class="n">the</span> <span class="n">directories</span> <span class="ow">in</span> <span class="s2">&#34;DT_RUNPATH&#34;</span> <span class="ow">or</span> <span class="s2">&#34;DT_RPATH&#34;</span> <span class="n">of</span> <span class="n">a</span> <span class="n">shared</span> <span class="n">library</span> <span class="n">are</span> <span class="n">searched</span> <span class="k">for</span> <span class="n">shared</span> <span class="n">libraries</span> <span class="n">needed</span> <span class="n">by</span> <span class="n">it</span><span class="o">.</span> <span class="n">The</span> <span class="s2">&#34;DT_RPATH&#34;</span> <span class="n">entries</span> <span class="n">are</span> <span class="n">ignored</span> <span class="k">if</span> <span class="s2">&#34;DT_RUNPATH&#34;</span> <span class="n">entries</span> <span class="n">exist</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">7.</span>  <span class="n">For</span> <span class="n">a</span> <span class="n">linker</span> <span class="k">for</span> <span class="n">a</span> <span class="n">Linux</span> <span class="n">system</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="n">file</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">ld</span><span class="o">.</span><span class="n">so</span><span class="o">.</span><span class="n">conf</span> <span class="n">exists</span><span class="p">,</span> <span class="n">the</span> <span class="n">list</span> <span class="n">of</span> <span class="n">directories</span> <span class="n">found</span> <span class="ow">in</span> <span class="n">that</span> <span class="n">file</span><span class="o">.</span>  <span class="n">Note</span><span class="p">:</span> <span class="n">the</span> <span class="n">path</span> <span class="n">to</span> <span class="n">this</span> <span class="n">file</span> <span class="n">is</span> <span class="n">prefixed</span> <span class="n">with</span> <span class="n">the</span> <span class="s2">&#34;sysroot&#34;</span> <span class="n">value</span><span class="p">,</span> <span class="k">if</span> <span class="n">that</span> <span class="n">is</span> <span class="n">defined</span><span class="p">,</span> <span class="ow">and</span> <span class="n">then</span>
</span></span><span class="line"><span class="cl">               <span class="n">any</span> <span class="s2">&#34;prefix&#34;</span> <span class="n">string</span> <span class="k">if</span> <span class="n">the</span> <span class="n">linker</span> <span class="n">was</span> <span class="n">configured</span> <span class="n">with</span> <span class="n">the</span> <span class="o">--</span><span class="n">prefix</span><span class="o">=&lt;</span><span class="n">path</span><span class="o">&gt;</span> <span class="n">option</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">8.</span>  <span class="n">For</span> <span class="n">a</span> <span class="n">native</span> <span class="n">linker</span> <span class="n">on</span> <span class="n">a</span> <span class="n">FreeBSD</span> <span class="n">system</span><span class="p">,</span> <span class="n">any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="n">the</span> <span class="s2">&#34;_PATH_ELF_HINTS&#34;</span> <span class="n">macro</span> <span class="n">defined</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">elf</span><span class="o">-</span><span class="n">hints</span><span class="o">.</span><span class="n">h</span> <span class="n">header</span> <span class="n">file</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">9.</span>  <span class="n">Any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="n">a</span> <span class="s2">&#34;SEARCH_DIR&#34;</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">linker</span> <span class="n">script</span> <span class="n">given</span> <span class="n">on</span> <span class="n">the</span> <span class="n">command</span> <span class="n">line</span><span class="p">,</span> <span class="n">including</span> <span class="n">scripts</span> <span class="n">specified</span> <span class="n">by</span> <span class="o">-</span><span class="n">T</span> <span class="p">(</span><span class="n">but</span> <span class="ow">not</span> <span class="o">-</span><span class="n">dT</span><span class="p">)</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">10.</span> <span class="n">The</span> <span class="n">default</span> <span class="n">directories</span><span class="p">,</span> <span class="n">normally</span> <span class="o">/</span><span class="n">lib</span> <span class="ow">and</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">11.</span> <span class="n">Any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="n">a</span> <span class="n">plugin</span> <span class="n">LDPT_SET_EXTRA_LIBRARY_PATH</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="mf">12.</span> <span class="n">Any</span> <span class="n">directories</span> <span class="n">specified</span> <span class="n">by</span> <span class="n">a</span> <span class="s2">&#34;SEARCH_DIR&#34;</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">default</span> <span class="n">linker</span> <span class="n">script</span><span class="o">.</span></span></span></code></pre></div></div>
<h2 id="共享库的创建和安装">共享库的创建和安装</h2>
<h3 id="共享库的创建">共享库的创建</h3>
<p>过程和创建共享对象差不多。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc -shared -Wl,-soname,&lt;name&gt; -o &lt;library_name&gt; &lt;source_files&gt;</span></span></code></pre></div></div>
<p>不用-soname的话，共享库默认没有SO-NAME</p>
<h3 id="清除符号信息">清除符号信息</h3>
<p>正常编译出来的会有对于最终发布版本无用的符号信息，去掉也可。</p>
<h3 id="共享库的安装">共享库的安装</h3>
<p>移动到指定目录，ldconfig一下即可。</p>
<h3 id="共享库构造和析构函数">共享库构造和析构函数</h3>
<p>GCC提供了一种共享库的构造和析构函数，在函数声明加上<code>__attribute__((constructor))</code>就是构造函数，在<code>main()</code>函数执行前执行，<code>__attribute__((destructor))</code>表明该函数在<code>main()</code>函数执行完毕后执行，或者说调用<code>exit()</code>时执行。</p>
<p>如果有多个构造函数，<code>constructor(2)</code>这样可以指定其优先级。对于构造函数来说数字越小优先级越大，对于析构函数来说正好相反。</p>
<h1 id="windows下的动态链接">Windows下的动态链接</h1>
<h2 id="dll简介">DLL简介</h2>
<p>DLL (Dynamic-Link Library)，相当于Linux下的共享对象。Windows系统中采用了大量的DLL，甚至Windows内核结构很大程度上也依赖于DLL机制。DLL和EXE文件都是PE格式的，区别在于PE文件头的头部中有个符号位表示其到底是啥。而DLL文件也未必得是<code>.dll</code>为后缀，<code>.ocx</code>、<code>.CPL</code>也可以。</p>
<p>Windows平台有大量的大型软件通过升级DLL的形式进行自我完善，微软经常将这些升级补丁积累到一定程度形成一个软件更新包。</p>
<p>ELF的动态链接可以实现运行时加载，Windows也有类似的技术。</p>
<p>在ELF中，共享库中所有的全局函数和变量在默认情况下都可以被其他模块使用，也就是说ELF默认导出所有的全局符号。DLL中需要显示地告诉编译器要导出某个符号，否则默认都不导出。</p>
<p>Microsoft Visual C++ (MSVC)编译器提供了一系列C/C++的扩展来指定符号的导入和导出，对于一些支持Windows平台的的编译器也都支持这种扩展。可以使用<code>__declspec</code>关键字修饰某个函数或变量，比如使用<code>__declspec(dllexport)</code>表示该符号是从本DLL导出的符号，<code>__declspec(dllimport)</code>表示该符号是从别的DLL导入的符号。</p>
<p>除了使用<code>__declspec</code>关键字之外，还可以使用<code>.def</code>文件声明导入导出符号。这个文件类似于<code>.lds</code>文件，可以当作link链接器的输入文件，用来控制链接器过程。<code>.def</code>文件中IMPORT和EXPORT可以用来声明导入导出符号。</p>
<h3 id="创建dll">创建DLL</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kr">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span> <span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span> <span class="kt">double</span> <span class="nf">sub</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span> <span class="kt">double</span> <span class="nf">mul</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>使用/LDd参数表示生成Debug版的DLL，/LD生成Release版的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ CL /LDd .<span class="se">\m</span>ath.c</span></span></code></pre></div></div>
<p>这条命令生成了math.dll、math.obj、math.exp和math.lib</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ dumpbin /EXPORTS .<span class="se">\m</span>ath.dll
</span></span><span class="line"><span class="cl">Microsoft <span class="o">(</span>R<span class="o">)</span> COFF/PE Dumper Version 14.34.31937.0
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> Microsoft Corporation.  All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dump of file .<span class="se">\m</span>ath.dll
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">File Type: DLL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Section contains the following exports <span class="k">for</span> math.dll
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="m">00000000</span> characteristics
</span></span><span class="line"><span class="cl">    FFFFFFFF <span class="nb">time</span> date stamp
</span></span><span class="line"><span class="cl">        0.00 version
</span></span><span class="line"><span class="cl">           <span class="m">1</span> ordinal base
</span></span><span class="line"><span class="cl">           <span class="m">3</span> number of functions
</span></span><span class="line"><span class="cl">           <span class="m">3</span> number of names
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ordinal hint RVA      name
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="m">1</span>    <span class="m">0</span> <span class="m">00001000</span> add
</span></span><span class="line"><span class="cl">          <span class="m">2</span>    <span class="m">1</span> <span class="m">00001040</span> mul
</span></span><span class="line"><span class="cl">          <span class="m">3</span>    <span class="m">2</span> <span class="m">00001020</span> sub
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Summary
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="m">3000</span> .data
</span></span><span class="line"><span class="cl">        <span class="m">3000</span> .pdata
</span></span><span class="line"><span class="cl">       <span class="m">13000</span> .rdata
</span></span><span class="line"><span class="cl">        <span class="m">1000</span> .reloc
</span></span><span class="line"><span class="cl">       3C000 .text
</span></span><span class="line"><span class="cl">        <span class="m">1000</span> _RDATA</span></span></code></pre></div></div>
<p>可以看到这个DLL有3个导出函数以及它们的RVA</p>
<h3 id="使用dll">使用DLL</h3>
<p>对于其他DLL导入的符号，需要使用<code>__declspec(dllimport)</code>显示地声明某个符号为导入符号。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kr">__declspec</span><span class="p">(</span><span class="n">dllimport</span><span class="p">)</span> <span class="kt">double</span> <span class="nf">sub</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Result = %f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ CL /c .<span class="se">\m</span>ain.c
</span></span><span class="line"><span class="cl">$ link .<span class="se">\m</span>ain.obj .<span class="se">\m</span>ath.lib</span></span></code></pre></div></div>
<p>math.lib不真正包含math.c的代码和数据，它用来描述math.dll的导出符号，包含了main.obj链接math.dll所需要的导入符号和一部分“桩”代码。像math.lib这样的文件被称为导入库 (Import Library)</p>
<p></p>
<h3 id="使用模块定义文件">使用模块定义文件</h3>
<p>将前面例子中math.c的<code>__declspec</code>扩展去掉，创建一个math.def文件，内容如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LIBRARY math
</span></span><span class="line"><span class="cl">EXPORTS
</span></span><span class="line"><span class="cl">add
</span></span><span class="line"><span class="cl">sub
</span></span><span class="line"><span class="cl">mul</span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">CL .<span class="se">\m</span>ath.c /LD /DEF .<span class="se">\m</span>ath.def</span></span></code></pre></div></div>
<h3 id="dll显示运行时链接">DLL显示运行时链接</h3>
<p>Windows提供了3个API：</p>
<ul>
<li>LoadLibrary （或LoadLibraryEx)，这个函数用来装载DLL到进程的地址空间</li>
<li>GetProcAddress，用来查找某个符号的地址</li>
<li>FreeLibrary，卸载某个已加载的模块</li>
</ul>
<h2 id="符号导出导入表">符号导出导入表</h2>
<h3 id="导出表">导出表</h3>
<p>Windows PE中所有导出的符号被集中存放在了被称为导出表的结构中。
PE文件头中有一个叫做DataDirectory的结构数组，数组共有16个元素，每个元素保存一个地址和一个长度。它第一个元素就是导出表的结构的地址和长度。导出表是一个IMAGE_EXPORT_DIRECTORY的结构体，它被定义在winnt.h中</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_EXPORT_DIRECTORY</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">Characteristics</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">TimeDateStamp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">MajorVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORD</span>    <span class="n">MinorVersion</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">Name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">Base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">NumberOfFunctions</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">NumberOfNames</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">AddressOfFunctions</span><span class="p">;</span>     <span class="c1">// RVA from base of image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DWORD</span>   <span class="n">AddressOfNames</span><span class="p">;</span>         <span class="c1">// RVA from base of image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DWORD</span>   <span class="n">AddressOfNameOrdinals</span><span class="p">;</span>  <span class="c1">// RVA from base of image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">IMAGE_EXPORT_DIRECTORY</span><span class="p">,</span> <span class="o">*</span><span class="n">PIMAGE_EXPORT_DIRECTORY</span><span class="p">;</span></span></span></code></pre></div></div>
<p>导出表结构中，最后三个成员指向3个数组。这三个数组是导出表中最重要的结构——导出地址表 (EAT, Export Address Table)、符号名表 (Name Table)和名字序列对应表 (Name-Ordinal Table)</p>
<p><strong>序号 (Ordinal)</strong></p>
<p>早期内存很小的时候，内存中存放太多函数名太奢侈了，当时DLL的函数导出的主要方式是序号。一个导出符号的需要就是函数在EAT中的地址下标加上一个BASE值（IMAGE_EXPORT_DIRECTORY中的Base，默认为1）。</p>
<p>如果一个模块导入了某个函数，它在导入表中不保存函数名，而是保存函数的序号。序号-Base值就可以得到下标，然后就可以在EAT中找到RVA了。</p>
<p>但是在DLL中加减函数的话，序号就会发生变化，导致依赖它的程序出现一些问题。</p>
<p>现在的DLL不采用序号作为导入导出的手段，但是为了向后兼容，序号导出方式仍然被保留。</p>
<hr>
<p>对于链接器来说，它在链接输出DLL时要知晓哪些函数和变量时要被导出的，除了之前介绍的方式，link链接器提供了/EXPORT参数用来指定导出符号</p>
<h3 id="exp文件">EXP文件</h3>
<p>链接器创建DLL采用两边扫描过程</p>
<ol>
<li>遍历所有的目标文件并收集所有的导出符号信息并且创建DLL的导出表。链接器将这个导出表放在一个临时的目标文件的<code>.edata</code>段中，这个目标文件就是EXP文件。</li>
<li>链接器将EXP文件当作普通目标文件和其他输入的目标文件链接在一起并且输出DLL。这时EXP的<code>.edata</code>段被传输到DLL文件中称为导出表。</li>
</ol>
<p>EXP自然也是COFF/PE文件。</p>
<h3 id="导出重定向">导出重定向</h3>
<p>DLL支持导出重定向 (Export Forwarding)机制。该机制就是将某个导出符号重定向到另一个DLL。调用a.dll的foo()函数相当于调用b.dll的bar()函数。
如果要重定向某个函数，可以使用模块定义文件 (DEF文件)</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">EXPORTS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;function name&gt; = &lt;DLL name&gt;.&lt;function name&gt;</span></span></code></pre></div></div>
<p>正常情况下，导入表的地址数组包含的是函数的RVA，但如果这个RVA指向的位置位于导出表中，那么表示这个符号被重定向了。被重定向了的符号的RVA不表示该函数的地址，而是指向一个ASCII字符串，这个字符串在导出表中，它是赴澳重定向后的DLL文件名和符号名，也就是等号右边这个东西，比如NTDLL.func</p>
<h3 id="导入表">导入表</h3>
<p>当某个PE文件被加载时，Windows加载器的其中一个任务就是将所有需要导入的函数地址确定并且将导入表中的元素调整到正确的地址，以实现动态链接的过程。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$  dumpbin /IMPORTS math.dll
</span></span><span class="line"><span class="cl">Microsoft <span class="o">(</span>R<span class="o">)</span> COFF/PE Dumper Version 14.34.31937.0
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> Microsoft Corporation.  All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dump of file math.dll
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">File Type: DLL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Section contains the following imports:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    KERNEL32.dll
</span></span><span class="line"><span class="cl">             18000F000 Import Address Table
</span></span><span class="line"><span class="cl">             180017D08 Import Name Table
</span></span><span class="line"><span class="cl">                     <span class="m">0</span> <span class="nb">time</span> date stamp
</span></span><span class="line"><span class="cl">                     <span class="m">0</span> Index of first forwarder reference
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                         <span class="m">464</span> QueryPerformanceCounter
</span></span><span class="line"><span class="cl">                         22B GetCurrentProcessId
</span></span><span class="line"><span class="cl">                         22F GetCurrentThreadId
</span></span><span class="line"><span class="cl">                         <span class="m">301</span> GetSystemTimeAsFileTime
</span></span><span class="line"><span class="cl">                         <span class="m">381</span> InitializeSListHead
</span></span><span class="line"><span class="cl">                         4E9 RtlCaptureContext
</span></span><span class="line"><span class="cl">                         4F1 RtlLookupFunctionEntry
</span></span><span class="line"><span class="cl">                         4F8 RtlVirtualUnwind
</span></span><span class="line"><span class="cl">                         <span class="m">397</span> IsDebuggerPresent
</span></span><span class="line"><span class="cl">                         5D8 UnhandledExceptionFilter
</span></span><span class="line"><span class="cl">                         <span class="m">597</span> SetUnhandledExceptionFilter
</span></span><span class="line"><span class="cl">                         2E8 GetStartupInfoW
</span></span><span class="line"><span class="cl">                         39E IsProcessorFeaturePresent
</span></span><span class="line"><span class="cl">                         28C GetModuleHandleW
</span></span><span class="line"><span class="cl">                          8E CloseHandle
</span></span><span class="line"><span class="cl">                         4F7 RtlUnwindEx
</span></span><span class="line"><span class="cl">                         <span class="m">385</span> InterlockedFlushSList
</span></span><span class="line"><span class="cl">                         <span class="m">274</span> GetLastError
</span></span><span class="line"><span class="cl">                         <span class="m">557</span> SetLastError
</span></span><span class="line"><span class="cl">                         <span class="m">141</span> EnterCriticalSection
</span></span><span class="line"><span class="cl">                         3D6 LeaveCriticalSection
</span></span><span class="line"><span class="cl">                         11B DeleteCriticalSection
</span></span><span class="line"><span class="cl">                         37D InitializeCriticalSectionAndSpinCount
</span></span><span class="line"><span class="cl">                         5C8 TlsAlloc
</span></span><span class="line"><span class="cl">                         5CA TlsGetValue
</span></span><span class="line"><span class="cl">                         5CB TlsSetValue
</span></span><span class="line"><span class="cl">                         5C9 TlsFree
</span></span><span class="line"><span class="cl">                         1BD FreeLibrary
</span></span><span class="line"><span class="cl">                         2C4 GetProcAddress
</span></span><span class="line"><span class="cl">                         3DC LoadLibraryExW
</span></span><span class="line"><span class="cl">                         13D EncodePointer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>可以看到math.dll从KERNEL32.dll导入了很多的函数，这是因为构建Windows DLL时，还链接了会用到KERNEL32.dll的支持DLL运行的基本运行库。</p>
<p>PE文件中，导入表是一个IMAGE_IMPORT_DESCRIPTOR的结构体数组，每一个IMAGE_IMPORT_DESCRIPTOR结构对应一个将被导入的DLL</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_IMAGE_IMPORT_DESCRIPTOR</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">DWORD</span>   <span class="n">Characteristics</span><span class="p">;</span>            <span class="c1">// 0 for terminating null import descriptor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">DWORD</span>   <span class="n">OriginalFirstThunk</span><span class="p">;</span>         <span class="c1">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="n">DUMMYUNIONNAME</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">TimeDateStamp</span><span class="p">;</span>                  <span class="c1">// 0 if not bound,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                            <span class="c1">// -1 if bound, and real date\time stamp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                            <span class="c1">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                            <span class="c1">// O.W. date/time stamp of DLL bound to (Old BIND)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">ForwarderChain</span><span class="p">;</span>                 <span class="c1">// -1 if no forwarders
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DWORD</span>   <span class="n">Name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DWORD</span>   <span class="n">FirstThunk</span><span class="p">;</span>                     <span class="c1">// RVA to IAT (if bound this IAT has actual addresses)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">IMAGE_IMPORT_DESCRIPTOR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="n">IMAGE_IMPORT_DESCRIPTOR</span> <span class="n">UNALIGNED</span> <span class="o">*</span><span class="n">PIMAGE_IMPORT_DESCRIPTOR</span><span class="p">;</span></span></span></code></pre></div></div>
<p>结构体中的FirstThunk指向一个导入地址数组 (Import Address Table)，IAT是导入表中最重要的结构，IAT中每个元素对应一个被导入的符号，元素的值在不同的情况下有不同的含义。在动态链接器刚完成映射还没有开始重定位和符号解析时，IAT中的元素表示相对于的导入符号的符号名或序号；当Windows的动态链接器完成该模块的链接时，元素值会被动态链接器改写成该符号的真正地址。通过元素的最高位来判断导入地址数组的元素中包含的是符号名还是序号。</p>
<p>在IMAGE_IMPORT_DESCRIPTOR结构中，还有一个指针OriginalFirstThunk指向一个叫做导入名称表 (INT, Import Name Table)的数组。</p>
<p>Windows的动态链接器在装载模块的时候会改写导入表的IAT。虽然PE的导入表是只读的，但因为Windows的动态链接器是Windows内核的一部分，所以可以在装载时把导入表所在的页面改成可读写，IAT被写完了再改回来。</p>
<p><strong>延迟载入</strong></p>
<p>当链接一个支持延迟载入的DLL时，链接器会产生和普通DLL类似但却会被操作系统忽略的数据。当延迟载入的API第一次被调用时，由链接器添加的特殊的桩代码会启动，这个代码负责对DLL的装载工作。桩代码通过调用GetProcAddress来找到被调用API的地址。MSVC还做了额外的优化，使得对该DLL的调用速度和普通方式载入的DLL的速度差不多。</p>
<h3 id="导入函数的调用">导入函数的调用</h3>
<p>如果PE的模块需要调用一个导入函数，仿照ELF GOT机制的一个办法就是一个间接跳转指令</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">CALL</span> <span class="no">DWORD</span> <span class="no">PTR</span> <span class="p">[</span><span class="mi">0x0040D11C</span><span class="p">]</span></span></span></code></pre></div></div>
<p>这条指令的含义是间接调用0x0040D11C地址中保存的地址，即从0x0040D11C开始取4个字节作为目标地址（DWORD PTR 表示4个字节的操作前缀），然后调用该目标地址。0x0040D11C这个地址刚好是IAT中的某一项，即需要调用的外部函数在IAT中所对应的元素，比如在之前的main.exe中就需要调用math.dll的<code>sub()</code>函数，那么0x0040D11C对应<code>sub()</code>导入函数在main.exe的IAT中的位置。该过程和GOT调转类似。</p>
<p>ELF通过在GOT调转前加了一层计算目标函数地址在GOT中的位置实现了地址无关，PE并没有，由此可见PE并不是地址无关。PE通过重定基地址的方法解决了装载时模块在进程空间中的地址冲突问题。</p>
<p>在<code>__declspec</code>关键字引入之前，微软提供了ing一种方法分辨一个函数是否是导入还是内部的。这种情况下，编译器同意产生直接调用的指令。链接器在连接时会将导入函数的目标地址导向一小段桩代码，由这这个代码将控制权交给IAT中真正的地址，实现如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">CALL</span> <span class="mi">0x0040100C</span>
</span></span><span class="line"><span class="cl"><span class="na">...</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x0040100C:</span>
</span></span><span class="line"><span class="cl"><span class="nf">CALL</span> <span class="no">DWORD</span> <span class="no">PTR</span> <span class="p">[</span><span class="mi">0x0040D11C</span><span class="p">]</span></span></span></code></pre></div></div>
<p>链接器一般不产生指令，这段指令来自产生DLL文件伴随的Lib文件，即导入库。</p>
<p>编译器产生导入库时，同一个导出函数会产生两个符号的定义。对于函数<code>foo()</code>来说，它在导入库中有两个符号，一个是foo，另一个是__imp__foo。前者指向foo函数的桩代码，后者指向foo函数在IAT中的位置。使用<code>__declspec(import)</code>关键字声明<code>foo()</code>导入函数时，编译器在链接时会在导入函数前加上前缀__imp__，和导入库的__imp__foo能够正常链接；如果不使用这个关键字，编译器会产生一个正常的foo符号引用，以便和导入库中的foo符号相链接。</p>
<p>现在MSVC编译器支持以上两种导入方式，但仅仅是不用写<code>__declspec(dllimport)</code>了而已，不写<code>__declspec(dllexport)</code>根本不产生导入库，好鸡儿鸡肋的样子。
到了Microsoft的文档，直接没说这个</p>
<p><a href="https://learn.microsoft.com/zh-cn/cpp/build/exporting-from-a-dll?view=msvc-170" target="_blank" rel="noopener noreffer ">从 DLL 导出</a></p>
<blockquote>
<p>可使用两种方法从 DLL 导出函数：
创建模块定义 (.def) 文件，然后在生成 DLL 时使用 .def 文件。 如果希望按序号而不是按名称从 DLL 中导出函数，请使用此方法。
在函数定义中使用关键字 __declspec(dllexport)。</p>
</blockquote>
<h2 id="dll优化">DLL优化</h2>
<p>DLL的代码段和数据段本身并不是和地址无关的，它默认需要被装载到ImageBase指定的目标地址中。如果目标地址被占用就需要装载到其他地址，便会引起整个DLL的Rebase。对于有大量DLL的程序来说，频繁的Rebase会造成程序的启动速度减慢。</p>
<p>动态链接过程中，导入函数的符号在运行时需要被逐个解析。解析过程中，免不了会涉及到符号字符串的查找。即使用了好的算法，量一大，这个过程也是非常耗时的。</p>
<p>这两个愿意可能会导致应用程序的速度非常慢，因为系统需要在启动程序时进行大量的符号解析和Rebase。</p>
<h3 id="重定基地址">重定基地址</h3>
<p>Windows的PE采取一种和ELF不同的办法——装载时重定位。DLL模块装载时，如果目标地址被占用，那么操作系统就会为它分配一块新的空间，并且将DLL装载到新地址，并且所有涉及到绝对地址的引用都要进行重定位。当然这个重定位只需要加上一个值即可（目标装载地址和实际装载地址的差值）。</p>
<p>PE文件的重定位信息都放在了<code>.reloc</code>段，可以在PE文件头中的DataDirectory里面得到重定位段的信息。对于EXE文件来说，MSVC默认不产生重定位段，毕竟它时进程运行时第一个装入虚拟空间的。但DLL一般都会产生重定位信息，也可以用/FIXED参数禁止产生重定位信息。</p>
<p>但是如果一个DLL被多个进程共享，且该DLL被这些进程装载到不同的位置，那么每个进程都需要有一份单独的DLL代码段的副本。该方案相对于ELF共享对象地址无关的方案来说更浪费内存。Rebase的DLL代码段在被换出的时候需要被写到交换空间，而不像没有Rebase的DLL一样释放物理页面，再次用到直接从DLL文件重新读就行。但是它比ELF的PIC机制更快一些。</p>
<p><strong>改变默认基址</strong></p>
<p>对于一个程序来说，它所用到的DLL基本是固定的，装载顺序和地址也是一样的。</p>
<p>MSVC提供了指定输出文件的基地址的功能，link链接时使用/BASE参数可以指定基地址。MSVC还提供了editbin可以用来改变已有DLL的基地址。</p>
<h3 id="序号">序号</h3>
<p>def文件可以定义导出符号的序号和函数名是否可见。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LIBRARY math
</span></span><span class="line"><span class="cl">add @1 NONAME</span></span></code></pre></div></div>
<h3 id="导入函数绑定">导入函数绑定</h3>
<p>大多数情况下，DLL会以和之前一样的顺序被装载到和之前一样的地址。这就带来一个DLL性能优化方式——DLL绑定 (DLL Binding)。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">editbin /BIND main.exe</span></span></code></pre></div></div>
<p>DLL的绑定实现也比较简单，editbin对程序的导入符号进行遍历查找，找到后就把符号的运行时的地址写到导入表内。之前介绍导入表中的INT就是干这个的。</p>
<p>绑定地址失效：</p>
<ol>
<li>DLL更新，导致导出函数地址发生变化</li>
<li>DLL在装载的时候Rebase，导致装载地址和绑定的不一样</li>
</ol>
<p>PE的解决办法：链接器在程序绑定时对每个DLL的时间戳 (Timestamp)和校验和 (Checksum，比如MD5)保存到导入表中。运行时Windows核对DLL和登记信息是否能对上并确认其是否Rebase，发生变化就进行对DLL的符号解析。</p>]]></description>
</item>
</channel>
</rss>
