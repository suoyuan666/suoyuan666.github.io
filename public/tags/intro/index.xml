<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Intro - Tag - 索元的博客</title>
        <link>http://localhost:1313/tags/intro/</link>
        <description>Intro - Tag - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Sun, 01 Dec 2024 04:13:26 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/intro/" rel="self" type="application/rss+xml" /><item>
    <title>我本次安装 Windows 的配置</title>
    <link>http://localhost:1313/posts/windows_note/</link>
    <pubDate>Sun, 01 Dec 2024 04:13:26 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/windows_note/</guid>
    <description><![CDATA[<p>我给我的笔记本再次安装了一遍 Windows，它曾经被写了家庭版的密钥。我希望再次安装的时候可以直接安装专业版（Pro）</p>
<p>我通过 <a href="https://msdl.gravesoft.dev/#3113" target="_blank" rel="noopener noreffer ">https://msdl.gravesoft.dev/#3113</a> 下载了 Windows 11 24H2 的系统镜像，我看下载链接没什么问题就用了</p>
<p>所以我选择了 <a href="https://github.com/massgravel/Microsoft-Activation-Scripts" target="_blank" rel="noopener noreffer ">massgravel/Microsoft-Activation-Scripts</a> 用于激活专业版</p>
<p>关于专业版，曾经有两个功能是我很喜欢的:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-isolation/windows-sandbox/windows-sandbox-overview" target="_blank" rel="noopener noreffer ">Windows Sandbox</a>
<ul>
<li>Windows Sandbox 提供了一个轻量级桌面环境，可以安全地独立运行应用程序。安装在 Windows 沙箱环境中的软件仍然处于“沙箱”状态，并且与主机分开运行。</li>
</ul>
</li>
<li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-isolation/microsoft-defender-application-guard/md-app-guard-overview" target="_blank" rel="noopener noreffer ">Microsoft Defender Application Guard</a>
<ul>
<li>Microsoft Defender Application Guard (MDAG) 旨在帮助防止旧的和新出现的攻击，以帮助保持员工的工作效率。使用我们独特的硬件隔离方法，我们的目标是通过淘汰当前的攻击方法来破坏攻击者使用的 playbook</li>
<li>对于 Microsoft Edge，应用程序防护有助于隔离企业定义的不受信任站点，从而在员工浏览 Internet 时保护您的公司。作为企业管理员，您可以定义受信任的网站、云资源和内部网络。不在您列表中的所有内容都被视为不可信。如果员工通过 Microsoft Edge 或 Internet Explorer 访问不受信任的站点，Microsoft Edge 会在启用 Hyper-V 的隔离容器中打开该站点。</li>
</ul>
</li>
</ul>
<p>不过在 Windows 11 24H2 之后，Microsoft Defender Application Guard 已经被移除。</p>
<p>安装了专业版后，设置一些组策略，摁 Windows 键搜索组策略即可进入组策略的编辑:</p>
<p>在 <strong>计算机配置</strong> -&gt; <strong>管理模板</strong> 中:</p>
<p><strong>系统</strong>:</p>
<ul>
<li>Device Guard
<ul>
<li>打开基于虚拟化的安全
<ul>
<li>基于虚拟化的安全性使用 Windows 虚拟机监控程序来提供对安全服务的支持。基于虚拟化的安全性需要安全启动，并且可以选择使用 DMA 保护来启用。DMA 保护需要硬件支持，并且仅在正确配置的设备上启用。</li>
<li>未设置改成已启用</li>
<li>平台安全级别 选 安全启动和 DMA 保护</li>
<li>安全启动配置 选 已启用</li>
<li>基于虚拟化的代码完整性保护
<ul>
<li>此设置可启用基于虚拟化的内核模式代码完整性保护。启用此功能后，将强制执行内核模式内存保护，并且代码完整性验证路径受基于虚拟化的安全功能的保护。</li>
<li>选择 使用 UEFI 锁定启用</li>
</ul>
</li>
<li>内核模式硬件强制堆栈保护
<ul>
<li>此设置为内核模式代码启用硬件强制堆栈保护。启用此安全功能后，内核模式数据堆栈将使用基于硬件的影子堆栈进行强化，这些堆栈存储了预期的返回地址目标，以确保程序控制流不会被篡改。</li>
<li>选择 在强制模式下启用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Internet 通信管理
<ul>
<li>Internet 通信设置:
<ul>
<li>关闭 Windows 客户体验改善计划: 已启用</li>
<li>关闭 Windows 错误报告：已启用</li>
<li>关闭 Windows Messenger 客户体验改善计划：已启用</li>
</ul>
</li>
</ul>
</li>
<li>OS 策略
<ul>
<li>允许使用剪切板历史记录: 已禁用</li>
<li>允许剪切板在设备间同步: 已禁用</li>
<li>启用活动源: 已禁用</li>
<li>允许发布用户活动: 已禁用</li>
<li>允许上传用户活动: 已禁用</li>
</ul>
</li>
</ul>
<p><strong>Windows 组件</strong></p>
<ul>
<li>BitLocker 驱动器加密
<ul>
<li>选择驱动器加密方法和密码强度(Windows 8、Windows Server 2012、Windows 8.1 或 Windows 10 [版本 1507])
<ul>
<li>已启动</li>
<li>选择加密方法: AES 256 位</li>
</ul>
</li>
<li>操作系统驱动器
<ul>
<li>启动时需要附加身份验证: 已启用
<ul>
<li>该选项需要 <a href="https://support.microsoft.com/zh-cn/topic/%E4%BB%80%E4%B9%88%E6%98%AF-tpm-705f241d-025d-4470-80c5-4feeb24fa1ee" target="_blank" rel="noopener noreffer ">TPM</a>，Windows 11 的升级条件之一就是 TPM，并且现代的计算机都带 TPM，所以就启用了。</li>
</ul>
</li>
<li>允许增强型启动 PIN: 已启用</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>之后在 <a href="https://www.microsoft.com/en-us/edge/business/download" target="_blank" rel="noopener noreffer ">Download and configure Microsoft Edge for Business</a> 中点击 <strong>Download Windows 64-bit Policy</strong></p>
<p>解压后，将 <code>MicrosoftEdgePolicyTemplates\windows\admx\msedge.admx</code> 复制到 <code>C:\Windows\PolicyDefinitions</code>，再将 <code>MicrosoftEdgePolicyTemplates\windows\zh-CN\msedge.adml</code> 复制到 <code>C:\Windows\PolicyDefinitions\zh-CN</code>，之后打开组策略，就可以在管理模板中找到 Microsoft Edge 了。</p>
<p><strong>Microsoft Edge</strong></p>
<ul>
<li>配置自动 HTTPS:
<ul>
<li>已启用</li>
<li>选择 通过 HTTP 传送的所有导航都将切换到 HTTPS。可能会更频繁地出现连接错误。</li>
</ul>
</li>
<li>阻止第三方 Cookie:
<ul>
<li>已启用</li>
<li>我本以为这是默认的，但现在才知道 Edge 和 Chrome 都不是默认阻止第三方 Cookie</li>
</ul>
</li>
<li>配置浏览器进程中代码完整性设置
<ul>
<li>已启用</li>
<li>在浏览器进程中启用代码完整性防护强制</li>
</ul>
</li>
<li>启用联机 OCSP/CRL 检查
<ul>
<li>已启用</li>
<li>Chromium 默认好像会禁用该选项，印象中 OCSP 用来查验 SSL/TLS 证书是否被吊销的，FireFox 默认开启该选项，导致我 Linux 下的 FireFox 有时候打开网页的速度显著的慢，我就给关闭了。不过对于 Windows，我相信它。</li>
<li>不好评价它能提高多少安全性</li>
</ul>
</li>
<li>增强 Microsoft Edge 中的安全状态
<ul>
<li>已启用</li>
<li>选择 严格模式</li>
</ul>
</li>
<li>启用网络服务沙盒
<ul>
<li>已启用</li>
</ul>
</li>
<li>限制 WebRTC 本地 IP 地址公开
<ul>
<li>已启用</li>
<li>选择 除非代理服务器支持 UDP，否则，请使用 TCP。这不会公开本地 IP 地址</li>
</ul>
</li>
<li>允许网站自动播放媒体
<ul>
<li>已禁用</li>
</ul>
</li>
</ul>
<p>以上组策略部分参考自 <a href="https://www.privacyguides.org/en/" target="_blank" rel="noopener noreffer ">Privacy Guides</a>，目前 Privacy Guides 只提供了一些组策略配置: <a href="https://www.privacyguides.org/en/os/windows/group-policies/" target="_blank" rel="noopener noreffer ">Group Policy Settings</a></p>
<p>Privacy Guides 有一个已经关闭的 Pull Request: <a href="https://github.com/privacyguides/privacyguides.org/pull/2452" target="_blank" rel="noopener noreffer ">https://github.com/privacyguides/privacyguides.org/pull/2452</a>，我也参考了下它的配置</p>
<p>我印象中该 PR 的作者因社区对 Microsoft Edge 的态度导致该 PR 被关闭: <a href="https://discuss.privacyguides.net/t/windows-guide/250/237" target="_blank" rel="noopener noreffer ">https://discuss.privacyguides.net/t/windows-guide/250/237</a>，https://github.com/privacyguides/privacyguides.org/pull/2452#issuecomment-2132150704</p>
<p>不得不说，从隐私上来讲，一些商业公司的浏览器大多不讲它作为卖点，但是，我认同应该先谈安全，后谈隐私。</p>
<p>之后我启用了 BitLocker 加密 和 Windows 沙盒。</p>
]]></description>
</item>
<item>
    <title>译文: 为什么没有很多人使用 Linux</title>
    <link>http://localhost:1313/posts/why_not_linux/</link>
    <pubDate>Fri, 01 Nov 2024 14:03:45 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/why_not_linux/</guid>
    <description><![CDATA[<h1 id="译文-为什么没有很多人使用-linux">译文: 为什么没有很多人使用 Linux</h1>
<hr>
<p>翻译自: <a href="https://world.hey.com/dhh/why-don-t-more-people-use-linux-33b75f53" target="_blank" rel="noopener noreffer ">https://world.hey.com/dhh/why-don-t-more-people-use-linux-33b75f53</a></p>
<p>今天偶然看到了这篇文章，感觉很有意思，所以翻译转发了一下，最后两段没有翻译过来，因为我认为和主题关系不是特别大</p>
<p>如果文章作者介意翻译转载，需要删除掉，可以选择以一些我能看到的方式（如评论）告知我</p>
<hr>
<p>几周前，我看到<a href="https://xcancel.com/yacineMTB/status/1825361755133952326" target="_blank" rel="noopener noreffer ">一条推文</a>问道：“如果 Linux 这么好，为什么没有很多人使用它？”这是一个很合理的问题！乍一听感觉是对的，不过还得仔细考虑一下。 Linux 甚至是自由软件，那么如果它实际上更好的话，是什么阻止了它的大规模采用呢？我的回应：</p>
<blockquote>
<p>如果锻炼如此健康，为什么没有更多的人去做呢？</p>
<p>如果阅读如此有教育意义，为什么没有更多的人这样做呢？</p>
<p>如果垃圾食品对你如此有害，为什么还有那么多人吃它？</p>
</blockquote>
<p>世界上充满无需付费即可提升自我的方式，但大多数人忽视了它们。粗略地说，在一个廉价、空热量的世界里，变得肥胖和无知比保持健康和见多识广更容易。很难抗拒付出最小努力的诱惑。</p>
<p>并且 Linux 并非易事。与微软和苹果的商业产品相比，这个操作系统对您的要求更高。因此，它可以作为更好地理解计算机的实验室。与不断要求的老师一起，你必须自己解决问题才能学习和掌握 Linux 上的操作。</p>
<p>现在我完全理解为什么大多数计算机用户对智力锻炼不感兴趣，因为他们只想浏览网页或使用应用程序。他们并不希望熟练掌握计算基础知识。</p>
<p>但程序员不一样。或者应该有所不同。他们就像消防员。健身不是消防的目的，而是前提。当你有耐力和力量将人们从燃烧的建筑物中扛出来时，你就是一个更好的消防员，而不是没有。因此，大多数消防员都会努力保持健康，以完成他们的任务。</p>
]]></description>
</item>
<item>
    <title>Verilator 使用</title>
    <link>http://localhost:1313/posts/verilator_intro/</link>
    <pubDate>Fri, 20 Sep 2024 04:54:29 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/verilator_intro/</guid>
    <description><![CDATA[<h1 id="verilator-使用">Verilator 使用</h1>
<p>因为报名了<a href="https://ysyx.oscc.cc/" target="_blank" rel="noopener noreffer ">一生一芯</a>，所以简单学习了一下 Verilator 的使用。</p>
<h2 id="verilator-介绍">Verilator 介绍</h2>
<p>Verilator 是开源的 Verilog 仿真测试工具，可以通过编写 C/C++ 完成对 Verilog 的仿真，Verilator 会将 Verilog 转换成 C/C++ 并与测试文件一起编译成程序运行，从而看到仿真结果。</p>
<blockquote>
<p>Verilator is a free and open-source software tool which converts Verilog (a hardware description language) to a cycle-accurate behavioral model in C++ or SystemC. The generated models are cycle-accurate and 2-state; as a consequence, the models typically offer higher performance than the more widely used event-driven simulators, which can model behavior within the clock cycle. Verilator is now used within academic research, open source projects and for commercial semiconductor development. It is part of the growing body of free EDA software.</p>
<p>Verilator 是一款自由的开源软件，可将 Verilog （一种硬件描述语言）转换为 C++ 或 SystemC 中的周期精确行为模型。生成的模型具有周期精确性和状态性；因此，这些模型通常比更广泛使用的事件驱动模拟器提供更高的性能，后者可以在时钟周期内建模行为。Verilator 现在用于学术研究、开源项目和商业半导体开发。它是日益壮大的免费 EDA 软件群体的一部分。</p>
</blockquote>
<h2 id="安装-verilator">安装 Verilator</h2>
<p>你不是 Gentoo Linux 的话，都完全没有看安装这部分的必要，直接从使用部分看起吧。</p>
<p><a href="https://ysyx.oscc.cc/docs/2306/preliminary/0.4.html#stfw-rtfm" target="_blank" rel="noopener noreffer ">一生一芯要求</a>的 Verilator 的版本为 5.008，可惜 <a href="https://github.com/gentoo-mirror/guru" target="_blank" rel="noopener noreffer ">guru</a> 的 <a href="https://github.com/gentoo-mirror/guru/tree/master/sci-electronics/verilator" target="_blank" rel="noopener noreffer ">sci-electronics/verilator</a> 并没有这个版本，我特地本地创建了一个仓库，把 guru 的这个 EBUILD 抄到了那里。</p>
<p>我使用的是 llvm/systemd profile，<code>CXXFLAGS</code> 是 <code>-O3 -pipe -flto=thin -fstack-protector-strong -fstack-clash-protection -fcf-protection=full -D_FORTIFY_SOURCE=3</code>，<code>LDFLAGS</code> 是 <code>-Wl,-O3,-z,now,--as-needed,--lto-O3,--icf=safe,--gc-sections</code>，但是编译的时候内存占用显示直接满了，我尝试降低编译时并行的线程数量，后来告诉我链接出现了问题，我懒得去看到底是哪位的问题了，直接用的 <code>gcc-nolto</code> 这个 env 编译的，我的 gcc-nolto 内容如下:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">CC=&#34;gcc&#34;
</span></span><span class="line"><span class="cl">CXX=&#34;g++&#34;
</span></span><span class="line"><span class="cl">CPP=&#34;gcc -E&#34;
</span></span><span class="line"><span class="cl">AR=&#34;ar&#34;
</span></span><span class="line"><span class="cl">NM=&#34;nm&#34;
</span></span><span class="line"><span class="cl">RANLIB=&#34;ranlib&#34;
</span></span><span class="line"><span class="cl">CFLAGS=&#34;-O3 -march=x86-64-v3 -pipe -fstack-protector-strong -fstack-clash-protection -fcf-protection=full&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${CFLAGS}&#34;
</span></span><span class="line"><span class="cl">LDFLAGS=&#34;-Wl,-O3,-z,now&#34;</span></span></code></pre></div></div>
<blockquote>
<p>2025 年 1 月 10 号</p>
<p>我今天重装了一遍，发现用 GCC 就行，不需要 nolto，我开了 <code>-flto</code> 编译也可以成功，不过 Clang 编译失败</p>
</blockquote>
<h2 id="使用-verilator">使用 Verilator</h2>
<p>可以参考<a href="https://verilator.org/guide/latest/example_cc.html" target="_blank" rel="noopener noreffer ">官方文档给出的例子</a>，还有 <a href="https://soc.ustc.edu.cn/CECS/lab2/verilator/" target="_blank" rel="noopener noreffer ">USTC CECS 2023</a> 中也简单介绍了一点 Verilator 的使用。</p>
<p>你可能有生成波形图的需求，可以参考<a href="https://verilator.org/guide/latest/faq.html" target="_blank" rel="noopener noreffer ">官方文档的 FAQ</a> 中的 <strong>How do I generate waveforms (traces) in C++?</strong> 给出的办法。</p>
<h2 id="一生一芯-关于-nvboard">一生一芯: 关于 NVBoard</h2>
<p>我在编译 NVBoard 总是报错 ld: DSO missing from command line 什么的，我一开始思索是否是因为我系统用的不是 GCC 的 libstdc++ 而是 LLVM 的 libc++ 的原因，但是我一时间没有找到全局使用 clang/llvm 编译工具链的方法。后来通过 AI 了解到一个解决办法: <code>-lc++</code></p>
]]></description>
</item>
<item>
    <title>使用 Hyprland</title>
    <link>http://localhost:1313/posts/hyprland_tour/</link>
    <pubDate>Fri, 13 Sep 2024 10:50:42 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/hyprland_tour/</guid>
    <description><![CDATA[<h1 id="使用-hyprland">使用 Hyprland</h1>
<p>目前也用 Hyprland 几个月了，故而写了这篇面向准备使用 Hyprland 的人群。</p>
<p><a href="https://github.com/hyprwm/Hyprland" target="_blank" rel="noopener noreffer ">Hyprland</a> 是由 C++ 编写，少数不使用 <a href="https://gitlab.freedesktop.org/wlroots/wlroots" target="_blank" rel="noopener noreffer ">wlroots</a> 的平铺式窗口管理器。默认足够漂亮，并且也还好用。好用指的是实现了 text-input-v1，并且支持将 XWayland 的缩放设置为 0 而不是跟着全局的缩放走。实现了 text-input-v1 就可以让 Electron 的软件在跑在 Wayland 下也可以使用 fcitx 中文输入法。</p>
<p>Hyprland 是在 0.42 版本开始完全不依赖于 wlroots 的，<a href="https://github.com/hyprwm/Hyprland/releases/tag/v0.43.0" target="_blank" rel="noopener noreffer ">0.43</a> 就把编译所需的 C++ 标准提到 C++ 26 了，不过本身我 C++ 的水平不是很高，我本身对 C++ 26 也没有太多的关注，我又不是个语言律师，也不好评价这个决定。不得不说，这一定程度上把编译工具链的要求提高了一些。</p>
<p>Hyprland 的功耗比 sway 大一些。</p>
<h2 id="配置文件">配置文件</h2>
<p>Hyprland 安装自带的默认配置文件基本还可以，对一些基础的东西都做了设置。你需要设置的大多是环境变量的设置，窗口规则以及自动启动的软件。</p>
<p>我目前对窗口规则只设置了一点，也是遇到了需要设定的软件再添加。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">windowrulev2 = opacity 0.90, class:.*
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: brave-browser
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: firefox
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: Terraria.bin.x86_64
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: org.gnome.Epiphany
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: ^(Library)(.*)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: ^(wofi)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: ^(Library)(.*)$</span></span></code></pre></div></div>
<p>这里我只是将所有窗口都不透明度设置为 0.9，并且将一些额外需要设定的应用（比如浏览器和游戏）的不透明度还是拉满。</p>
<p>有些窗口我并不希望是全屏显示，所以我额外设置它们的 size。</p>
<p>对于环境变量，我只是额外设定了 fcitx5 的环境变量。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">env = LIBVA_DRIVER_NAME, nvidia
</span></span><span class="line"><span class="cl">env = NVD_BACKEND, direct
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORM, wayland
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORMTHEME, qt6ct
</span></span><span class="line"><span class="cl">env = XDG_CURRENT_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_TYPE, wayland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = EDITOR, /usr/bin/nvim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = LANG,zh_CN.UTF-8
</span></span><span class="line"><span class="cl">env = QT_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = XMODIFIERS, @im=fcitx
</span></span><span class="line"><span class="cl">env = SDL_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = INPUT_METHOD, fcitx
</span></span><span class="line"><span class="cl">env = GLFW_IM_MODULE, ibus</span></span></code></pre></div></div>
<p><code>LIBVA_DRIVER_NAME</code> 是配合 <a href="https://github.com/elFarto/nvidia-vaapi-driver" target="_blank" rel="noopener noreffer ">nvidia-vaapi-driver</a> 用的。<code>LANG</code> 是当前系统的语言，我通过这个设置系统语言为中文，但是我在 <strong>.bashrc</strong> 文件重新设置回英文了。</p>
<p>对于自动启动的应用，只需要这么写:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">exec-once = /usr/bin/wlsunset -t 2500 -T 3000
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/mako
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/fcitx5 -d
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/blueman-applet
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/swaybg -i &#34;/home/zuos/Pictures/magic_planet.png&#34; -m fill
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/waybar -c /home/zuos/.config/waybar/waybar.json
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/hyprctl setcursor &#34;Tela&#34; 24
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface icon-theme &#39;Papirus&#39;
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface font-name &#39;Noto Sans Mono CJK SC 12&#39;</span></span></code></pre></div></div>
<p><a href="https://sr.ht/~kennylevinsen/wlsunset/" target="_blank" rel="noopener noreffer ">wlsunset</a> 是一个设置屏幕色温的软件，我需要一个支持设置 night light 的软件，所以我选择了这位。</p>
<p><a href="https://github.com/emersion/mako" target="_blank" rel="noopener noreffer ">mako</a> 是一个通知组件，<a href="https://github.com/blueman-project/blueman" target="_blank" rel="noopener noreffer ">blueman</a> 是一个蓝牙连接相关的 GUI 软件，<code>blueman-applet</code> 可以启动它的系统托盘。</p>
<p><a href="https://github.com/swaywm/swaybg" target="_blank" rel="noopener noreffer ">swaybg</a> 用于设置壁纸，Hyprlan 存在一个 <a href="https://github.com/hyprwm/hyprpaper" target="_blank" rel="noopener noreffer ">hyprpaper</a> 设置壁纸的软件，但是其功能我不是很需要。</p>
<p><code>hyprctl</code> 是随安装 Hyprland 就带的，可以获取当前桌面窗口类等信息，并且可以设置鼠标主题和大小，我这里就是干这个用的。</p>
<p>后面两个 <code>gsettings</code> 就是设置图标主题和字体主题。</p>
<h2 id="需要额外用到的软件">需要额外用到的软件</h2>
<p>可以参考 <a href="https://wiki.hyprland.org/Useful-Utilities/" target="_blank" rel="noopener noreffer ">Hyprland wiki</a>。</p>
<p>类似 waybar, wofi, mako, hyprlock 这些的配置文件，可以参考我的 dotfiles: <a href="https://github.com/suoyuan666/dotfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/dotfiles</a></p>
<h2 id="tricks">tricks</h2>
<p>剪切板管理器可能不是谁都能用到，但是 <a href="https://github.com/bugaevc/wl-clipboard" target="_blank" rel="noopener noreffer ">wl-clpboadr</a> 是值得装的，毕竟 neovim 就认那几个剪切板工具。</p>
<p>设置系统为中文后，很有可能部分软件直接把下载路径直接设置为 <strong>$HOME/下载</strong>，但这还对我来说很难受，可以安装 <code>xdg-user-dirs</code>，之后在<code>LANG=en_US.UTF-8</code> 的环境下执行一编 <code>xdg-user-dirs-update</code>。</p>
<p>XWayland 的分数缩放还是很难搞，不过 Hyprland 可以直接将 XWayland 的缩放设置为 0，如果和我一样，是一个 electron 应用跑在 XWayland 下的话，可以选择附加 <code>--force-device-scale-factor=1.6</code>，这样就可以设置一个正常的缩放了。</p>
<p>没有默认安装一个可以设置打开方式的 GUI 软件，可以使用类似 <code>xdg-settings get default-web-browser</code> 的方式设置。</p>
]]></description>
</item>
<item>
    <title>我的 neovim 配置</title>
    <link>http://localhost:1313/posts/neovim_setup/</link>
    <pubDate>Wed, 31 Jul 2024 22:55:02 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/neovim_setup/</guid>
    <description><![CDATA[<p>尝试配置 neovim，具体就是安装了一些插件，这里没有太详细介绍我的配置，等之后有时间我再补上</p>
<h1 id="我的-neovim-配置">我的 neovim 配置</h1>
<p>先放个我配置后的样子:</p>
<p></p>
<h2 id="背景">背景</h2>
<p>我在第一次接触 GNU/Linux 的时候，就有听说过 vi/vim，那时候我还只知道如何在 insert, normal 等模式中切换，如何保存并退出文件。甚至我那时候还不知道有 GNU nano，后来知道了 nano 这个软件后，简单的编辑文件的工作我就会使用 nano，基本不会太用到 vim 了。</p>
<p>后来我使用了一些 WM 来当成桌面（比如 i3, dwm），我在搜集资料时接触到了更多使用这些 WM 还使用 vim/neovim 的用户（只能说使用 WM 的大多更习惯使用终端）。不过我不是这时候听说 neovim 的，我已经忘了怎么听说 neovim 的了。</p>
<p>但在我希望使用 Wayland 的桌面之后，我就一定程度上有了更多使用 vim 操作的想法。这个想法是在我使用 GNOME 桌面环境时候产生的，因为 GNOME 的 mutter 只实现了 text-input-v3，导致不支持 text-input-v3 的 VSCodium 无法正常使用 fcitx5，这让我输入中文的时候很难受。于是我就有了使用 neovim 的想法，因为终端是可以输入中文的（不过也许现在可以考虑下 zed 🤔），至于为什么选择 neovim，因为听说比 vim 好用（我记得比较多的是 vimrc 和 lua 的对比，但是我本身没有配置 vim 的经历，所以我没有这种比较）。</p>
<p>使用 neovim 给我比较好的两个印象，一个 normal 模式和 insert 模式的光标是不一样的，看着还不错，另一个是 <code>:s</code> 搜索替换时，键入替换后的字符串后，当前界面那些要替换的字符会自动跟着修改，我印象中vim 默认不是这样的。</p>
<p></p>
<h2 id="使用的插件">使用的插件</h2>
<p>大致上是使用了这些插件:</p>
<ul>
<li>管理插件，用于插件的安装安装配置更新等工作
<ul>
<li><a href="https://github.com/folke/lazy.nvim" target="_blank" rel="noopener noreffer ">folke/lazy.nvim</a></li>
</ul>
</li>
<li>管理 lsp
<ul>
<li><a href="https://github.com/williamboman/mason.nvim" target="_blank" rel="noopener noreffer ">williamboman/mason.nvim</a></li>
</ul>
</li>
<li>lsp 相关配置
<ul>
<li><a href="https://github.com/neovim/nvim-lspconfig" target="_blank" rel="noopener noreffer ">neovim/nvim-lspconfig</a></li>
</ul>
</li>
<li>代码补全相关
<ul>
<li><a href="https://github.com/hrsh7th/nvim-cmp" target="_blank" rel="noopener noreffer ">hrsh7th/nvim-cmp</a></li>
<li><a href="https://github.com/hrsh7th/cmp-nvim-lsp" target="_blank" rel="noopener noreffer ">hrsh7th/cmp-nvim-lsp</a></li>
<li><a href="https://github.com/hrsh7th/cmp-nvim-lsp-signature-help" target="_blank" rel="noopener noreffer ">hrsh7th/cmp-nvim-lsp-signature-help</a></li>
<li><a href="https://github.com/hrsh7th/cmp-path" target="_blank" rel="noopener noreffer ">hrsh7th/cmp-path</a></li>
<li><a href="https://github.com/hrsh7th/cmp-cmdline" target="_blank" rel="noopener noreffer ">hrsh7th/cmp-cmdline</a></li>
<li><a href="https://github.com/hrsh7th/cmp-buffer" target="_blank" rel="noopener noreffer ">hrsh7th/cmp-buffer</a></li>
<li><a href="https://github.com/rafamadriz/friendly-snippets" target="_blank" rel="noopener noreffer ">rafamadriz/friendly-snippets</a></li>
<li><a href="https://github.com/L3MON4D3/LuaSnip" target="_blank" rel="noopener noreffer ">L3MON4D3/LuaSnip</a></li>
<li><a href="https://github.com/saadparwaiz1/cmp_luasnip" target="_blank" rel="noopener noreffer ">saadparwaiz1/cmp_luasnip</a></li>
</ul>
</li>
<li>UI 相关
<ul>
<li><a href="https://github.com/folke/trouble.nvim" target="_blank" rel="noopener noreffer ">folke/trouble.nvim</a></li>
<li><a href="https://github.com/nvim-treesitter/nvim-treesitter" target="_blank" rel="noopener noreffer ">nvim-treesitter/nvim-treesitter</a></li>
<li><a href="https://github.com/rebelot/heirline.nvim" target="_blank" rel="noopener noreffer ">rebelot/heirline.nvim</a></li>
<li><a href="https://github.com/romgrk/barbar.nvim" target="_blank" rel="noopener noreffer ">romgrk/barbar.nvim</a></li>
<li><a href="https://github.com/nvim-neo-tree/neo-tree.nvim" target="_blank" rel="noopener noreffer ">nvim-neo-tree/neo-tree.nvim</a></li>
<li><a href="https://github.com/rcarriga/nvim-notify" target="_blank" rel="noopener noreffer ">nvim-notify</a></li>
</ul>
</li>
<li>utils
<ul>
<li><a href="https://github.com/nvim-telescope/telescope.nvim" target="_blank" rel="noopener noreffer ">nvim-telescope/telescope.nvim</a></li>
<li><a href="https://github.com/akinsho/toggleterm.nvim" target="_blank" rel="noopener noreffer ">akinsho/toggleterm.nvim</a></li>
<li><a href="https://github.com/lewis6991/gitsigns.nvim" target="_blank" rel="noopener noreffer ">lewis6991/gitsigns.nvim</a></li>
</ul>
</li>
<li>调试器集成
<ul>
<li><a href="https://github.com/mfussenegger/nvim-dap" target="_blank" rel="noopener noreffer ">mfussenegger/nvim-dap</a></li>
<li><a href="https://github.com/rcarriga/nvim-dap-ui" target="_blank" rel="noopener noreffer ">rcarriga/nvim-dap-ui</a></li>
</ul>
</li>
</ul>
<p>调试器就这些是因为我目前就打算先配置 C/C++ 的调试环境，用的是我本机的 gdb，也就没想装一个类似 <code>mason</code> 这样的插件来下载调试器。</p>
<p>代码补全相关中，<code>nvim-cmp</code> 是用来补全的插件，那些以 <code>nvim-cmp</code> 为前缀的都是具体要补全的项，比如 <code>nvim-cmp-lsp</code> 是根据 lsp 的补全，<code>nvim-cmp-path</code> 是根据路径的补全，<code>nvim-cmp-buffer</code> 是根据当前打开的文件内容的补全等等，<code>LuaSnip</code> 是一个代码片段引擎（neovim 0.10 之后内置了一个代码片段引擎，可以使用那个，具体可以参考<a href="https://github.com/suoyuan666/dotfiles/blob/main/.config/nvim/lua/plugins/config/cmp.lua" target="_blank" rel="noopener noreffer ">我的配置文件</a>，<code>friendly-snippets</code> 则是一个实用代码片段集合。</p>
<p>UI 相关中，<code>rebelot/heirline</code> 是用于显示底部的状态栏的，虽然这个插件也能定制顶部的 TabLine，但是我懒得去学了，直接用的 <code>romgrk/barbar</code>。</p>
<p>调试器方面，dap 给我的感觉类似于 lsp 一样，不过我没仔细了解，<a href="https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation" target="_blank" rel="noopener noreffer ">nvim-dap 中有文档</a> 描述了支持的调试器。我根据文档配置了 gdb 的调试环境。</p>
<h2 id="tricks">tricks</h2>
<p>一开始我配置完底部状态栏有个问题，每个窗口都有一个单独的状态栏，但我不需要这样，后来我在 Youtube 上找到个博主自称需要添加这行代码就可以解决:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">laststatus</span> <span class="o">=</span> <span class="mi">3</span></span></span></code></pre></div></div>
<p>真的是这样，泪目</p>
<p>lsp 的错误诊断无法在插入模式下使用，后来在 Stack Overflow 的一个帖子上找到了答案</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.lsp</span><span class="p">.</span><span class="n">handlers</span><span class="p">[</span><span class="s2">&#34;textDocument/publishDiagnostics&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">vim.lsp</span><span class="p">.</span><span class="n">with</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.lsp</span><span class="p">.</span><span class="n">diagnostic.on_publish_diagnostics</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">update_in_insert</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<p>当开了多个窗口的时候，<code>q</code> 只能退出当前的窗口，可以使用 <code>qa</code>，这样可以直接退出全部窗口。</p>
<p>我后来尝试调试窗口怎么样的时候，发现开多个窗口，窗口之间的线不明显，看起来很不得劲。</p>
<p>可以输入 <code>: highlight WinSeparator guibg=none</code> 解决，这是把那块的背景设为空，我不是这么解决的，我是把 <code>guifg</code> 设成一个亮色。</p>
<p>如果是在配置文件中持久化这个设置，则是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_hl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;WinSeparator&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="n">fg</span> <span class="o">=</span> <span class="s2">&#34;#F8EDEC&#34;</span> <span class="p">})</span></span></span></code></pre></div></div>
<h2 id="具体配置">具体配置</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── init.lua
</span></span><span class="line"><span class="cl">├── lazy-lock.json
</span></span><span class="line"><span class="cl">└── lua
</span></span><span class="line"><span class="cl">    ├── config
</span></span><span class="line"><span class="cl">    │   ├── colorscheme.lua
</span></span><span class="line"><span class="cl">    │   ├── keymap.lua
</span></span><span class="line"><span class="cl">    │   ├── lazy.lua
</span></span><span class="line"><span class="cl">    │   └── option.lua
</span></span><span class="line"><span class="cl">    ├── lsp
</span></span><span class="line"><span class="cl">    │   └── clangd.lua
</span></span><span class="line"><span class="cl">    └── plugins
</span></span><span class="line"><span class="cl">        ├── cmp.lua
</span></span><span class="line"><span class="cl">        ├── config
</span></span><span class="line"><span class="cl">        │   ├── cmp.lua
</span></span><span class="line"><span class="cl">        │   ├── comment.lua
</span></span><span class="line"><span class="cl">        │   ├── lsp.lua
</span></span><span class="line"><span class="cl">        │   ├── none-ls.lua
</span></span><span class="line"><span class="cl">        │   ├── telescope.lua
</span></span><span class="line"><span class="cl">        │   ├── treesitter.lua
</span></span><span class="line"><span class="cl">        │   ├── ui_bar_dark.lua
</span></span><span class="line"><span class="cl">        │   ├── ui_bar_light.lua
</span></span><span class="line"><span class="cl">        │   ├── ui_bar.lua
</span></span><span class="line"><span class="cl">        │   └── ui_fs_tree.lua
</span></span><span class="line"><span class="cl">        ├── debug.lua
</span></span><span class="line"><span class="cl">        ├── lsp.lua
</span></span><span class="line"><span class="cl">        ├── ui.lua
</span></span><span class="line"><span class="cl">        └── util.lua
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">22</span> files</span></span></code></pre></div></div>
<p>这是我的目录架构，<strong>lua/lsp</strong> 这个目录实际上还没用上，我把 <strong>clangd.lua</strong> 的内容挪到 <strong>lua/plugins/config/lsp.lua</strong> 下了。</p>
<p><strong>init.lua</strong> 的内容很简单:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;config.option&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;config.keymap&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;config.lazy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;config.colorscheme&#39;</span><span class="p">)</span></span></span></code></pre></div></div>
<p><strong>init.lua</strong> 的作用就是加载各种配置文件，本身没有什么设置。这里的 <code>.</code> 代表一个目录层级，<strong>init.lua</strong> 貌似直接去 <strong>lua</strong> 文件夹内找了，所以直接写 <code>config</code>。</p>
<p><strong>lua/config/option.lua</strong> 的内容是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">-- Hint: use `:h &lt;option&gt;` to figure out the meaning if needed</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">clipboard</span> <span class="o">=</span> <span class="s1">&#39;unnamedplus&#39;</span> <span class="c1">-- use system clipboard</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- vim.opt.completeopt = { &#39;menu&#39;, &#39;menuone&#39;, &#39;noselect&#39; }</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">mouse</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span> <span class="c1">-- allow the mouse to be used in Nvim</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">tabstop</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">-- number of visual spaces per TAB</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">softtabstop</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">-- number of spacesin tab when editing</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">shiftwidth</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">-- insert 2 spaces on a tab</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">expandtab</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- tabs are spaces, mainly because of python</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">&#39;v&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;Tab&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;gv&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s1">&#39;v&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;S-Tab&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;gv&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">number</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- show absolute number</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">cursorline</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- highlight cursor line underneath the cursor horizontally</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">splitbelow</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- open new vertical split bottom</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">splitright</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- open new horizontal splits right</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">showmode</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- we are experienced, wo don&#39;t need the &#34;-- INSERT --&#34; mode hint</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">laststatus</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">incsearch</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- search as characters are entered</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">hlsearch</span> <span class="o">=</span> <span class="kc">false</span> <span class="c1">-- do not highlight matches</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">ignorecase</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- ignore case in searches by default</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">smartcase</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- but make it case sensitive if an uppercase is entered</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.opt</span><span class="p">.</span><span class="n">termguicolors</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.o</span><span class="p">.</span><span class="n">cmdheight</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_create_autocmd</span><span class="p">(</span><span class="s2">&#34;BufWritePost&#34;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">callback</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.notify</span><span class="p">(</span><span class="s2">&#34;File saved!&#34;</span><span class="p">,</span> <span class="s2">&#34;info&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Notification&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<p>这里面大多抄别人的配置文件，所以有注释，我自己写的懒得写注释了（</p>
<p>内容基本上是设置剪切板为系统剪切板，设置缩进为 2，开启行号等等。后几行是针对通知插件设置的，将最下栏的高度设置为 0，使其不显示，并把保存设为一个通知。</p>
<p><strong>lua/config/keymap.lua</strong> 设置了一些快捷键，由于太长，我就不粘贴了。</p>
<p><strong>lua/config/lazy.lua</strong> 设置了 LazyVim 插件，我直接抄的 <a href="https://www.lazyvim.org/configuration/lazy.nvim" target="_blank" rel="noopener noreffer ">LazyVim 官网提供的配置方案</a>。</p>
<p><strong>lua/config/colorscheme.lua</strong> 设置了 neovim 的颜色主题。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-lua">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">colorscheme_dark</span> <span class="o">=</span> <span class="s1">&#39;catppuccin-mocha&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">colorscheme_light</span> <span class="o">=</span> <span class="s1">&#39;catppuccin-latte&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">is_ok</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">pcall</span><span class="p">(</span><span class="n">vim.cmd</span><span class="p">,</span> <span class="s2">&#34;colorscheme &#34;</span> <span class="o">..</span> <span class="n">colorscheme_dark</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">is_ok</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.notify</span><span class="p">(</span><span class="s1">&#39;colorscheme &#39;</span> <span class="o">..</span> <span class="n">colorscheme_light</span> <span class="o">..</span> <span class="s1">&#39; not found!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kr">return</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_hl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&#34;WinSeparator&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="n">fg</span> <span class="o">=</span> <span class="s2">&#34;#F8EDEC&#34;</span> <span class="p">})</span></span></span></code></pre></div></div>
<p>我特地暗色和亮色的都拿了，方便我改终端背景颜色的时候改 neovim 的，我甚至为此还搞了两套底下这个 bar 的配置，不过亮色的那个配置很糊弄就是了。</p>]]></description>
</item>
<item>
    <title>NVIDIA 在 GNU/Linux 发行版上和 Wayland 一起工作的技巧</title>
    <link>http://localhost:1313/posts/nvidia_with_linux/</link>
    <pubDate>Fri, 19 Jul 2024 01:21:25 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/nvidia_with_linux/</guid>
    <description><![CDATA[<p>如何在 GNU/Linux 发行版使用 Wayland 的情况下中舒服的使用 NVIDIA 驱动</p>
<h1 id="nvidia-在-gnulinux-发行版上工作的技巧">NVIDIA 在 GNU/Linux 发行版上工作的技巧</h1>
<h2 id="wayland-下-正常启动">Wayland 下 正常启动</h2>
<p>根据 <a href="https://developer.nvidia.com/blog/nvidia-transitions-fully-towards-open-source-gpu-kernel-modules/" target="_blank" rel="noopener noreffer ">NVIDIA Transitions Fully Towards Open-Source GPU Kernel Modules</a> 这篇 NVIDIA 的博客，目前 NVDIIA 准备在后续的版本完全换到 NVIDIA 开源内核模块（对 Turing 更高的版本来说），所以我也跟着使用了 nvidia-open。</p>
<p>对于 Wayland 来说，NVIDIA 需要启用 DRM (<a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager" target="_blank" rel="noopener noreffer ">Direct Rendering Manager</a>) kernel mode setting，即在内核参数中附加 <code>nvidia_drm.modeset=1</code>，这个需要在 <strong>/etc/default/grub</strong> 文件中写明:</p>
<p>在下面这行中添加 <code>nvidia_drm.modeset=1</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;...&#34;</span></span></code></pre></div></div>
<p>之后运行 <code>grub-mkconfig -o /boot/grub/grub.cfg</code>，如果你的 boot 分区和我不一致就去找一下你那个 boot 分区在哪吧。</p>
<p>如果你使用的是 <code>systemd-boot</code>，我并不知道 <code>systemd-boot</code> 该如何附加内核参数，可以去找找相关 wiki。</p>
<p>我在使用 KDE Plasma 6.1.2 + nvidia-open 555.58.02，附加了这个参数仍然无法正常进入桌面，但可以进入 SDDM 登录管理器，后来在 <a href="https://bbs.archlinux.org/viewtopic.php?id=293741" target="_blank" rel="noopener noreffer ">Arch Linux 的论坛中的一个帖子</a>看到了一个解决办法——再多附加一个内核参数 <code>nvidia_drm.fbdev=1</code>。</p>
<p>所以我附加的内容就是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;nouveau.modeset=0 nvidia_drm.modeset=1 nvidia_drm.fbdev=1&#34;</span></span></code></pre></div></div>
<p>这里第一个是为了禁用 nouveau 驱动，我印象中装了 NVIDIA 官方驱动后，默认就是禁用状态，不过我习惯添加这个了。</p>
<p>实际上我还做了一步：之前我发现 NVIDIA 貌似会在窗口管理器启动之后加载，于是我尝试提前将 NVIDIA 启动，即在 <strong>/etc/mkinitcpio.conf</strong> 文件中新加一些模块，类似这样:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)</span></span></code></pre></div></div>
<p>之后执行 <code>mkinitcpio -P</code>，重新生成一遍 initramfs。</p>
<p>如果你是 Gentoo Linux，那么生成 initramfs 的方法可能不是这个，如果和我一样都是使用的 <code>dracut</code> 的话，可以参考 <a href="https://wiki.gentoo.org/wiki/NVIDIA/nvidia-drivers#Dracut_configuration_.28optional.29" target="_blank" rel="noopener noreffer ">Gentoo wiki 中的 nvidia-drivers 部分</a> 和 <a href="https://wiki.archlinux.org/title/Dracut" target="_blank" rel="noopener noreffer ">Arch wiki 中 dracut 条目</a>。</p>
<p>之后直接 <code>sudo dracut /path/to/initramfs</code></p>
<h2 id="正常休眠">正常休眠</h2>
<p>我发现休眠也不好使了，这让我很难受。我的问题是这样：休眠后启动需要花费很长时间，这段时间就是黑屏，终于不是黑屏了之后还不完全显示锁屏界面，我凭借着记忆解锁后，只有那些已打开的窗口能正常显示，连锁屏壁纸都不正常显示，<code>Ctrl + Alt + T</code> 倒还能正常启动终端，我用 <code>journalctl</code> 查看了下系统日志，去 <a href="https://wiki.archlinux.org/title/NVIDIA/Troubleshooting#Black_screen_returning_from_suspend" target="_blank" rel="noopener noreffer ">Arch Wiki 上</a>找到了我的问题，就是日志显示:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">archlinux kernel: NVRM: GPU at PCI:0000:08:00: GPU-926ecdb0-adb1-6ee9-2fad-52e7214c5011
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;</span></span></code></pre></div></div>
<p>这是 Arch Wiki 上提供的，正常这里的 <em>archlinux</em> 应该显示你的主机名，而 PCI 端口等信息也会不一致。</p>
<p>解决办法就是再搞个内核参数以保留 video memory。来源: <a href="https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend" target="_blank" rel="noopener noreffer ">https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend</a></p>
<p>我新建了一个 <strong>/etc/modprobe.d/nvidia-power-management.conf</strong> 文件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">options nvidia NVreg_PreserveVideoMemoryAllocations=1</span></span></code></pre></div></div>
<p><code>NVreg_PreserveVideoMemoryAllocations</code> 也可以作为内核启动时的参数，可以直接写在 <strong>/etc/default/grub</strong> 中，写在内核参数的话需要在前面加上 <code>nvidia</code>: <code>nvidia.NVreg_PreserveVideoMemoryAllocations=1</code>。</p>
<p>之后执行 <code>systemctl enable nvidia-resume.service nvidia-suspend.service nvidia-hibernate.service</code> 并重启即可。</p>
<p>根据 Arch wiki 所述，这个不能和 NVIDIA 早启动一起使用，但实际上我一起用了，感觉没什么问题。</p>
<h2 id="总结">总结</h2>
<p>用 Xorg 保心安，我当初用 Xorg 的时候还没这么些事。</p>]]></description>
</item>
<item>
    <title>C&#43;&#43; 项目编写初步入门</title>
    <link>http://localhost:1313/posts/cmake_intro/</link>
    <pubDate>Sun, 12 May 2024 14:23:43 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cmake_intro/</guid>
    <description><![CDATA[<p>我第一次尝试使用 CMake 等工具管理自己的 C++ 项目的记录</p>
<h1 id="c-项目编写初步入门">C++ 项目编写初步入门</h1>
<p>由于想要编写一个 C++ 的项目，所以开始学习 <code>cmake</code> 管理项目的编译工作。我这里会把 <strong>src</strong> 和 <strong>include</strong> 分开，并且尝试使用<a href="https://github.com/google/googletest" target="_blank" rel="noopener noreffer ">Google test</a>做一些项目的简单测试。</p>
<p>并且我尝试使用 <code>clang-tidy</code> 和 <code>clang-format</code> 格式化我的代码，<code>doxygen</code> 生成项目 API 文档。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree -a -L <span class="m">2</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── build/
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── compile_commands.json -&gt; build/compile_commands.json
</span></span><span class="line"><span class="cl">├── doc
</span></span><span class="line"><span class="cl">│   ├── doxygen-awesome-css/
</span></span><span class="line"><span class="cl">│   ├── html/
</span></span><span class="line"><span class="cl">│   └── man/
</span></span><span class="line"><span class="cl">├── Doxyfile
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── README_ZH_CN.md
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── core
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   └── pack_core.cpp
</span></span><span class="line"><span class="cl">│   ├── curl_cpp
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   └── cppcurl.cpp
</span></span><span class="line"><span class="cl">│   ├── include
</span></span><span class="line"><span class="cl">│   │   ├── cppcurl.h
</span></span><span class="line"><span class="cl">│   │   ├── env.h
</span></span><span class="line"><span class="cl">│   │   ├── log.h
</span></span><span class="line"><span class="cl">│   │   ├── misc.h
</span></span><span class="line"><span class="cl">│   │   ├── os-detect.h
</span></span><span class="line"><span class="cl">│   │   └── pack_core.h
</span></span><span class="line"><span class="cl">│   ├── main.cpp
</span></span><span class="line"><span class="cl">│   └── utils
</span></span><span class="line"><span class="cl">│       ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│       ├── env.cpp
</span></span><span class="line"><span class="cl">│       ├── log.cpp
</span></span><span class="line"><span class="cl">│       └── os-detect.cpp
</span></span><span class="line"><span class="cl">├── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   └── main_test.cpp
</span></span><span class="line"><span class="cl">└── third_party
</span></span><span class="line"><span class="cl">    ├── argparse/
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    ├── googletest/
</span></span><span class="line"><span class="cl">    └── json/</span></span></code></pre></div></div>
<p>上面这个就是我项目的基础结构，<strong>src</strong> 存放项目的源代码，<strong>src/include</strong> 从存放一些自定义的头文件，<strong>test</strong> 目录存放用于开发测试的代码文件，<strong>third_party</strong> 目录存放第三方库文件。</p>
<p>这里 <code>tree -a -L 2</code> 的输出，实际上我对它做了一些修改的工作，这里最后一级的文件夹我都加了 <code>/</code> 做区分，并且我认为不太重要的（如 <strong>.build</strong>, <strong>.git</strong> 文件夹）都删掉了它的下一级内容，并添加 <code>/</code> 表示它是文件夹。</p>
<h2 id="cmake-简单使用">CMake 简单使用</h2>
<blockquote>
<p>CMake is cross-platform free and open-source software for build automation, testing, packaging and installation of software by using a compiler-independent method. CMake is not a build system itself; it generates another system&rsquo;s build files. It supports directory hierarchies and applications that depend on multiple libraries. It can invoke native build environments such as Make, Qt Creator, Ninja, Android Studio, Apple&rsquo;s Xcode, and Microsoft Visual Studio. It has minimal dependencies, requiring only a C++ compiler on its own build system.</p>
<p><a href="https://cmake.org/" target="_blank" rel="noopener noreffer ">CMake</a> 是跨平台的自由开源软件，用于使用独立于编译器的方法构建自动化、测试、打包和安装软件。 CMake 本身并不是一个构建系统，它只是生成另一个系统的构建文件。它支持依赖于多个库的目录层次结构和应用程序。它可以调用本机构建环境，例如 Make、Qt Creator、Ninja、Android Studio、Apple 的 Xcode 和 Microsoft Visual Studio。它具有最小的依赖性，仅需要其自己的构建系统上的 C++ 编译器。</p>
</blockquote>
<p>上面这段话来自 <a href="https://en.wikipedia.org/wiki/CMake" target="_blank" rel="noopener noreffer ">WikiPedia</a></p>
<p>我根目录的 <strong>CMakeLists.txt</strong> 文件的内容是：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-CMakeLists">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="nf">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span><span class="w"> </span><span class="mi">3</span><span class="p">.</span><span class="mi">13</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span><span class="w"> </span><span class="mi">17</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span><span class="w"> </span><span class="k">ON</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">project</span><span class="p">(</span><span class="n">ReleaseButler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">VERSION</span><span class="w"> </span><span class="mi">2024</span><span class="p">.</span><span class="mi">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">DESCRIPTION</span><span class="w"> </span><span class="s2">&#34;package manager on GitHub&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">LANGUAGES</span><span class="w"> </span><span class="n">CXX</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">add_subdirectory</span><span class="p">(</span><span class="n">third_party</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="k">NOT</span><span class="w"> </span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="n">CMAKE_CONFIGURATION_TYPES</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;Setting build type to `Debug` as none was specified.&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="s2">&#34;Debug&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;Debug&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">enable_testing</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_DEBUG</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Werror&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;Release&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;Configuring Release build&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1"># something come form https://airbus-seclab.github.io/c-compiler-security/clang_compilation.html
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -O2 -pipe -fPIE -Wall -Wextra -Wpedantic -Werror&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -fstack-clash-protection -fstack-protector-all -fcf-protection=full&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -flto&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">CMAKE_CXX_COMPILER_ID</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;Clang&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=integer -fsanitize-minimal-runtime -fno-sanitize-recover&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -Wthread-safety  -fvisibility=hidden -fsanitize=cfi&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">elseif</span><span class="p">(</span><span class="n">CMAKE_CXX_COMPILER_ID</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;GNU&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -fsanitize=address -fsanitize=undefined&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -fstack-protector-strong -D_FORTIFY_SOURCE=2&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_CXX_FLAGS_RELEASE</span><span class="w"> </span><span class="s2">&#34;${CMAKE_CXX_FLAGS_RELEASE} -Wl,-z,relro,-z,now,-z,noexecstack&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">file</span><span class="p">(</span><span class="n">TO_CMAKE_PATH</span><span class="w"> </span><span class="s2">&#34;${PROJECT_BINARY_DIR}/CMakeLists.txt&#34;</span><span class="w"> </span><span class="n">PATH_TO_CMAKELISTS_TXT</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="k">EXISTS</span><span class="w"> </span><span class="s2">&#34;${PATH_TO_CMAKELISTS_TXT}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span><span class="w"> </span><span class="s2">&#34;Run CMake from a build subdirectory! \&#34;</span><span class="n">mkdir</span><span class="w"> </span><span class="n">build</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">cd</span><span class="w"> </span><span class="n">build</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">cmake</span><span class="w"> </span><span class="p">..</span><span class="err">\</span><span class="s2">&#34; \
</span></span></span><span class="line"><span class="cl"><span class="s2">    Some junk files were created in this folder (CMakeCache.txt, CMakeFiles); you should delete those.&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># Compiler flags.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">set</span><span class="p">(</span><span class="n">CMAKE_POSITION_INDEPENDENT_CODE</span><span class="w"> </span><span class="k">ON</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;Debug&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">elseif</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span><span class="w"> </span><span class="n">STREQUAL</span><span class="w"> </span><span class="s2">&#34;Release&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">endif</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nf">message</span><span class="p">(</span><span class="n">STATUS</span><span class="w"> </span><span class="s2">&#34;CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>这里我对 Debug 模式和 Release 模式都设置了不同的编译选项，我因为个人的原因很希望 Release 模式编译出来的是尽可能安全些的，所以找了一些安全方面的编译选项。
由于 clang 实现了 CFI 保护，所以我这里检测当前编译环境的编译器如果是 clang 的话就启用该支持。 如果检测到是 GCC 环境的话也会启用相应的支持。</p>
<p>根目录下的 <strong>CMakeLists.txt</strong> 只是设置好相关的编译选项和一些基础设置，而后添加各个子目录的 <strong>CMakeLists.txt</strong>。</p>
<p><strong>third_party</strong> 目录下的 <strong>CMakeLists.txt</strong> 判断如果是 Debug 的话就添加 googletest 库，并且把其他第三方库添加进去。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-CMakeLists">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set(JSON_BuildTests OFF CACHE INTERNAL &#34;&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">if(CMAKE_BUILD_TYPE STREQUAL &#34;Debug&#34;)
</span></span><span class="line"><span class="cl">    add_subdirectory(googletest)
</span></span><span class="line"><span class="cl">endif()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">add_subdirectory(argparse)</span></span></code></pre></div></div>
<p><strong>test</strong> 目录下还有些东西，因为遇到额外添加 <strong>googletest</strong> 中的 include 到编译过程中，还要启用 testing</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-CMakeLists">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cmake_minimum_required(VERSION 3.11)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(TEST_TARGET_NAME main_test)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(TEST_SOURCE_FILES
</span></span><span class="line"><span class="cl">    main_test.cpp
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">add_executable(${TEST_TARGET_NAME} ${TEST_SOURCE_FILES})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(
</span></span><span class="line"><span class="cl">    TEST_INCLUDE_DIR
</span></span><span class="line"><span class="cl">    ${PROJECT_SOURCE_DIR}/src/include
</span></span><span class="line"><span class="cl">    ${PROJECT_SOURCE_DIR}/third_party/googletest/googletest/include
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">include_directories(${TEST_INCLUDE_DIR})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">target_link_libraries(${TEST_TARGET_NAME} PRIVATE gtest gtest_main ${ReleaseButler_LIBS})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">add_test(NAME ${TEST_TARGET_NAME} COMMAND ${TEST_TARGET_NAME})</span></span></code></pre></div></div>
<p><strong>test</strong> 目录下的示例程序:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;gtest/gtest.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;gtest/gtest.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;pack_core.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TEST</span><span class="p">(</span><span class="n">ExampleTest</span><span class="p">,</span> <span class="n">Install</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="n">Install</span><span class="p">(</span><span class="s">&#34;https://github.com/fastfetch-cli/fastfetch&#34;</span><span class="p">,</span> <span class="s">&#34;fastfetch-linux-amd64.deb&#34;</span><span class="p">,</span> <span class="s">&#34;true&#34;</span><span class="p">),</span> <span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">testing</span><span class="o">::</span><span class="n">InitGoogleTest</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">RUN_ALL_TESTS</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><strong>src</strong> 目录下的 <strong>CMakeLists.txt</strong> 设置了可执行文件的具体配置:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-CMakeLists">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">add_subdirectory(core)
</span></span><span class="line"><span class="cl">add_subdirectory(curl_cpp)
</span></span><span class="line"><span class="cl">add_subdirectory(utils)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(PROGRAM_NAME releasebutler)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">add_executable(${PROGRAM_NAME} &#34;main.cpp&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(
</span></span><span class="line"><span class="cl">    RB_SRC_INCLUDE_DIR
</span></span><span class="line"><span class="cl">    ${PROJECT_SOURCE_DIR}/src/include
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(
</span></span><span class="line"><span class="cl">    RB_THIRD_PARTY_INCLUDE_DIR
</span></span><span class="line"><span class="cl">    ${PROJECT_SOURCE_DIR}/third_party/argparse/include
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">include_directories(${RB_SRC_INCLUDE_DIR} ${RB_THIRD_PARTY_INCLUDE_DIR})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(ReleaseButler_LIBS
</span></span><span class="line"><span class="cl">    core
</span></span><span class="line"><span class="cl">    utils
</span></span><span class="line"><span class="cl">    curl_cpp
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">target_link_libraries(${PROGRAM_NAME} ${ReleaseButler_LIBS})</span></span></code></pre></div></div>
<p>这里设置好了可执行文件的名称，以及它依赖的库文件，并在最开始添加相关库的子目录进去，先把子目录的 lib 编译好。</p>
<p>下边贴一个 <strong>src/core/CMakeLists.txt</strong> 的内容:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-CMakeLists.txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-CMakeLists.txt" data-lang="CMakeLists.txt"><span class="line"><span class="cl"><span class="nb">set</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">RB_CORE_SRC_INCLUDE</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">PROJECT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/include</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">RB_CORE_TP_INCLUDE</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">PROJECT_SOURCE_DIR</span><span class="o">}</span><span class="s">/third_party/json/single_include/nlohmann</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">RB_CORE_SRC</span>
</span></span><span class="line"><span class="cl">    <span class="s">pack_core.cpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">include_directories</span><span class="p">(</span><span class="o">${</span><span class="nv">RB_CORE_SRC_INCLUDE</span><span class="o">}</span> <span class="o">${</span><span class="nv">RB_CORE_TP_INCLUDE</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">add_library</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">core</span>
</span></span><span class="line"><span class="cl">    <span class="s">OBJECT</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">RB_CORE_SRC</span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<p>可以看到就是简单的设置 include 路径并编译成 object</p>
<p>在项目的根目录下，执行下边的语句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cmake --build build -j <span class="sb">`</span>nproc<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5%<span class="o">]</span> Building CXX object src/utils/CMakeFiles/utils.dir/log.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 11%<span class="o">]</span> Building CXX object src/utils/CMakeFiles/utils.dir/os-detect.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 17%<span class="o">]</span> Building CXX object src/utils/CMakeFiles/utils.dir/env.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 23%<span class="o">]</span> Building CXX object src/core/CMakeFiles/core.dir/pack_core.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 29%<span class="o">]</span> Building CXX object src/curl_cpp/CMakeFiles/curl_cpp.dir/cppcurl.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Building CXX object third_party/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Built target curl_cpp
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Built target core
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Built target utils
</span></span><span class="line"><span class="cl"><span class="o">[</span> 41%<span class="o">]</span> Building CXX object src/CMakeFiles/releasebutler.dir/main.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 47%<span class="o">]</span> Linking CXX static library ../../../lib/libgtest.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 47%<span class="o">]</span> Built target gtest
</span></span><span class="line"><span class="cl"><span class="o">[</span> 58%<span class="o">]</span> Building CXX object third_party/googletest/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 58%<span class="o">]</span> Building CXX object third_party/googletest/googletest/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 64%<span class="o">]</span> Linking CXX executable releasebutler
</span></span><span class="line"><span class="cl"><span class="o">[</span> 64%<span class="o">]</span> Built target releasebutler
</span></span><span class="line"><span class="cl"><span class="o">[</span> 70%<span class="o">]</span> Linking CXX static library ../../../lib/libgtest_main.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 70%<span class="o">]</span> Built target gtest_main
</span></span><span class="line"><span class="cl"><span class="o">[</span> 76%<span class="o">]</span> Building CXX object test/CMakeFiles/main_test.dir/main_test.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 82%<span class="o">]</span> Linking CXX executable main_test
</span></span><span class="line"><span class="cl"><span class="o">[</span> 82%<span class="o">]</span> Built target main_test
</span></span><span class="line"><span class="cl"><span class="o">[</span> 88%<span class="o">]</span> Linking CXX static library ../../../lib/libgmock.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 88%<span class="o">]</span> Built target gmock
</span></span><span class="line"><span class="cl"><span class="o">[</span> 94%<span class="o">]</span> Building CXX object third_party/googletest/googlemock/CMakeFiles/gmock_main.dir/src/gmock_main.cc.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX static library ../../../lib/libgmock_main.a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target gmock_main</span></span></code></pre></div></div>
<p>这样在 <strong>build/test</strong> 目录下就会生成一个用于测试的程序。执行即可</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./build/test/main_test
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> Running <span class="m">1</span> <span class="nb">test</span> from <span class="m">1</span> <span class="nb">test</span> suite.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment set-up.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">1</span> <span class="nb">test</span> from ExampleTest
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> ExampleTest.Addition
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> ExampleTest.Addition <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">1</span> <span class="nb">test</span> from ExampleTest <span class="o">(</span><span class="m">0</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment tear-down
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> <span class="m">1</span> <span class="nb">test</span> from <span class="m">1</span> <span class="nb">test</span> suite ran. <span class="o">(</span><span class="m">0</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  PASSED  <span class="o">]</span> <span class="m">1</span> test.</span></span></code></pre></div></div>
<p>这里有一个问题，我使用的是 Visual Studio Code 写代码，用 <code>clangd</code> 插件提高 C/C++ 的编程体验，我一开始用 <code>ln -s</code> 给 <strong>build/compile_commands.json</strong> 文件在根目录建一个软链接，但是 <code>clangd</code> 的没有成功解析出 <strong>test/main_test.cpp</strong> 文件的头文件位置，后来我安装了bear，特地 <code>bear -- cmake</code> 生成了一个 <strong>compile_commands.json</strong> 才成功解析。</p>
<p>不过后来又好使了，不好评价那时候发生了什么。</p>
<h2 id="clang-tidy-和-clang-format"><code>clang-tidy</code> 和 <code>clang-format</code></h2>
<blockquote>
<p><code>clang-tidy</code> is a clang-based C++ “linter” tool. Its purpose is to provide an extensible framework for diagnosing and fixing typical programming errors, like style violations, interface misuse, or bugs that can be deduced via static analysis. <code>clang-tidy</code> is modular and provides a convenient interface for writing new checks.</p>
<p><code>clang-tidy</code> 是一个基于 <code>clang</code> 的 C++ “linter” 工具。其目的是提供一个可扩展的框架，用于诊断和修复典型的编程错误，例如样式违规、接口误用或可以通过静态分析推断出的错误。 <code>clang-tidy</code> 是模块化的，并提供了一个方便的接口来编写新的检查。</p>
</blockquote>
<p><a href="https://clang.llvm.org/extra/clang-tidy/" target="_blank" rel="noopener noreffer ">clang-tidy</a> 是一个静态语法扫描器。我第一次听说它就是在一个文章中，那篇文章介绍了 C++ 目前面临的困境，其中一个就是 C++ 的学习者还在对着已经过时的语法学习，根本不怎么了解 &ldquo;modern cpp&rdquo;。之后那篇文章介绍 <code>clang-tidy</code> 一定程度上正在解决这个问题，我对它的理解就是会检查源文件的语法是否符合 <code>clang-tidy</code> 认为的好写法，它根据多种规则来检查。但是 <code>clang-tidy</code> 内置的部分规则是没有必要的，比如要求类的成员函数的首字母需要大写（至少我认为没什么必要，甚至我写函数就没有大写的习惯，宏写的函数除外，不过宏写的到底能不能叫函数🤔）。</p>
<p><code>clang-tidy</code> 支持项目根目录下存在一个 <strong>.clang-tidy</strong> 文件，该文件可以指定规则，检查的范围，对一些规则作具体的设置。</p>
<p><a href="https://clang.llvm.org/docs/ClangFormat.html" target="_blank" rel="noopener noreffer ">clang-format</a> 就是一个专门的代码格式化工具了，<code>clang-format</code> 内置了多种代码风格，可以指定某个风格并做一些额外的修改，当然也是写在项目的根目录下的 <strong>.clang-format</strong>。</p>
<p>下面是我 <strong>.clang-tidy</strong> 文件的内容：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Checks: &#39;
</span></span><span class="line"><span class="cl">        bugprone-*,
</span></span><span class="line"><span class="cl">        clang-analyzer-*,
</span></span><span class="line"><span class="cl">        google-*,
</span></span><span class="line"><span class="cl">        modernize-*,
</span></span><span class="line"><span class="cl">        performance-*,
</span></span><span class="line"><span class="cl">        portability-*,
</span></span><span class="line"><span class="cl">        readability-*,
</span></span><span class="line"><span class="cl">        -bugprone-easily-swappable-parameters,
</span></span><span class="line"><span class="cl">        -bugprone-implicit-widening-of-multiplication-result,
</span></span><span class="line"><span class="cl">        -bugprone-narrowing-conversions,
</span></span><span class="line"><span class="cl">        -bugprone-reserved-identifier,
</span></span><span class="line"><span class="cl">        -bugprone-signed-char-misuse,
</span></span><span class="line"><span class="cl">        -bugprone-suspicious-include,
</span></span><span class="line"><span class="cl">        -bugprone-unhandled-self-assignment,
</span></span><span class="line"><span class="cl">        -clang-analyzer-cplusplus.NewDelete,
</span></span><span class="line"><span class="cl">        -clang-analyzer-cplusplus.NewDeleteLeaks,
</span></span><span class="line"><span class="cl">        -clang-analyzer-security.insecureAPI.rand,
</span></span><span class="line"><span class="cl">        -clang-diagnostic-implicit-int-float-conversion,
</span></span><span class="line"><span class="cl">        -google-readability-avoid-underscore-in-googletest-name,
</span></span><span class="line"><span class="cl">        -modernize-avoid-c-arrays,
</span></span><span class="line"><span class="cl">        -modernize-use-nodiscard,
</span></span><span class="line"><span class="cl">        -readability-convert-member-functions-to-static,
</span></span><span class="line"><span class="cl">        -readability-identifier-length,
</span></span><span class="line"><span class="cl">        -readability-function-cognitive-complexity,
</span></span><span class="line"><span class="cl">        -readability-magic-numbers,
</span></span><span class="line"><span class="cl">        -readability-make-member-function-const,
</span></span><span class="line"><span class="cl">        -readability-qualified-auto,
</span></span><span class="line"><span class="cl">        -readability-identifier-naming,
</span></span><span class="line"><span class="cl">        -readability-redundant-access-specifiers,
</span></span><span class="line"><span class="cl">        -bugprone-exception-escape,
</span></span><span class="line"><span class="cl">        -performance-avoid-endl,
</span></span><span class="line"><span class="cl">        -readability-use-anyofallof,
</span></span><span class="line"><span class="cl">        &#39;
</span></span><span class="line"><span class="cl">CheckOptions:
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.FunctionCase,        value: CamelCase  }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.MemberCase,          value: lower_case }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.MemberSuffix,        value: _          }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.UnionCase,           value: CamelCase  }
</span></span><span class="line"><span class="cl">  - { key: readability-identifier-naming.VariableCase,        value: lower_case }
</span></span><span class="line"><span class="cl">WarningsAsErrors: &#39;*&#39;
</span></span><span class="line"><span class="cl">HeaderFilterRegex: &#39;/(src|test)/include&#39;
</span></span><span class="line"><span class="cl">AnalyzeTemporaryDtors: true</span></span></code></pre></div></div>
<p>下面则是 <strong>.clang-format</strong> 的内容</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">BasedOnStyle: Google
</span></span><span class="line"><span class="cl">ColumnLimit: 80</span></span></code></pre></div></div>
<p>我对代码格式化还没有什么太高的需求，等我以后再好好研究如何更好的格式化吧。</p>
<h2 id="doxygen-使用"><code>doxygen</code> 使用</h2>
<p><code>doxygen</code> 是一个根据源文件的注释生成项目 API 文档的软件。我认为一定程度上这逼迫者我写注释😶‍🌫️。这个文档格式可以是 HTML，LaTeX，man pages 等，</p>
<p><code>doxygen</code> 是根据 <strong>Doxyfile</strong> 生成相关文档的。在项目的根目录下打开终端输入 <code>doxygen -g</code> 即可产生一份带有注释信息的 <strong>Doxyfile</strong>，可以根据注释了解一下 <strong>Doxyfile</strong> 的写法。</p>
<p>下面是我 <strong>Doxyfile</strong> 的内容：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Doxyfile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">PROJECT_NAME</span>           <span class="p">=</span> <span class="s">&#34;ReleaseButler&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">PROJECT_NUMBER</span>         <span class="p">=</span> <span class="s">&#34;1.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">PROJECT_BRIEF</span>          <span class="p">=</span> <span class="s">&#34;😙 package manager on GitHub 😙&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">Project</span> <span class="nx">section</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">BRIEF_MEMBER_DESC</span> <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">HTML_STYLESHEET</span> <span class="p">=</span> <span class="nx">doc</span><span class="o">/</span><span class="nx">doxygen</span><span class="o">-</span><span class="nx">awesome</span><span class="o">-</span><span class="nx">css</span><span class="o">/</span><span class="nx">doxygen</span><span class="o">-</span><span class="nx">awesome</span><span class="p">.</span><span class="nx">css</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">输入</span>
</span></span><span class="line"><span class="cl"><span class="nx">INPUT</span>                  <span class="p">=</span> <span class="nx">src</span> <span class="nx">README</span><span class="p">.</span><span class="nx">md</span> <span class="nx">README_ZH_CN</span><span class="p">.</span><span class="nx">md</span>
</span></span><span class="line"><span class="cl"><span class="nx">FILE_PATTERNS</span>          <span class="p">=</span> <span class="o">*</span><span class="p">.</span><span class="nx">cpp</span> <span class="o">*</span><span class="p">.</span><span class="nx">h</span>
</span></span><span class="line"><span class="cl"><span class="nx">RECURSIVE</span>              <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">输出格式</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_HTML</span>          <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl"><span class="nx">HTML_OUTPUT</span>            <span class="p">=</span> <span class="nx">doc</span><span class="o">/</span><span class="nx">html</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_LATEX</span>         <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_XML</span>           <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_RTF</span>           <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_MAN</span>           <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl"><span class="nx">MAN_OUTPUT</span>            <span class="p">=</span> <span class="nx">doc</span><span class="o">/</span><span class="nx">man</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">文档风格</span>
</span></span><span class="line"><span class="cl"><span class="nx">OUTPUT_LANGUAGE</span>        <span class="p">=</span> <span class="nx">English</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">文档内容</span>
</span></span><span class="line"><span class="cl"><span class="nx">EXTRACT_ALL</span>            <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">注释风格</span>
</span></span><span class="line"><span class="cl"><span class="nx">JAVADOC_AUTOBRIEF</span>      <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl"><span class="nx">QT_AUTOBRIEF</span>           <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nx">其他</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_TREEVIEW</span>      <span class="p">=</span> <span class="nx">YES</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_LATEX</span>         <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">GENERATE_HTMLHELP</span>      <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">DISTRIBUTE_GROUP_DOC</span>   <span class="p">=</span> <span class="nx">NO</span>
</span></span><span class="line"><span class="cl"><span class="nx">USE_MDFILE_AS_MAINPAGE</span> <span class="p">=</span> <span class="nx">README</span><span class="p">.</span><span class="nx">md</span></span></span></code></pre></div></div>
<p><code>doxygen</code> 生成的 HTML 网页好难看啊😢，所以我特地找了一个主题 <a href="https://github.com/jothepro/doxygen-awesome-css" target="_blank" rel="noopener noreffer ">doxygen-awesome-css</a>，这样还能相对好看一些。</p>
<p><code>doxygen</code> 对注释格式也有些要求，这是我写的一个注释：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @brief Simple encapsulation of std::getenv
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param name Name of the environment variable
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @return The value of the environment variable
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="na">[[nodiscard]]</span> <span class="k">auto</span> <span class="n">get_env2str</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string_view</span> <span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span></span></span></code></pre></div></div>
<p><code>@brief</code> 是简要说明，<code>@param</code> 是参数说明，<code>@return</code> 是对返回值的说明。其实还有 <code>@note</code> 等字段，也可以用来标示一种信息。</p>
<p>而且实际上 <code>clangd</code> 目前不支持对 Doxygen 这样格式的注释的解析，导致 Visual Studio Code 读自己写的注释是没有什么好渲染的。
不过貌似微软官方的 C/C++ 插件可以解析 Doxygen 的注释，并渲染出来，但我习惯使用 <code>clangd</code> 了。</p>]]></description>
</item>
<item>
    <title>为什么你应该(不)使用 GNU/Linux 作为日用操作系统</title>
    <link>http://localhost:1313/posts/whywinorlinux/</link>
    <pubDate>Sat, 13 Apr 2024 11:58:25 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/whywinorlinux/</guid>
    <description><![CDATA[<h1 id="为什么你应该不使用-gnulinux-作为日用操作系统">为什么你应该(不)使用 GNU/Linux 作为日用操作系统</h1>
<hr>
<blockquote>
<ul>
<li>2025 05 02 更新:
<ul>
<li>删除了一些不合适的评价，修改了一些语句不通顺的地方</li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<p>本章关于使用 GNU/Linux 作为个人日用桌面操作系统做了一些评价，主要是从是否应该使用两方面来评价。</p>
<h2 id="为什么不应该使用">为什么不应该使用</h2>
<h3 id="从应用软件的层面来看">从应用软件的层面来看</h3>
<p>直到 2023 年初，腾讯才正式推出 Linux 版本的 QQ，并且开发进度落后于 Windows 和 Mac 端，不过几乎所有发行版都可以使用，不过还会存在一些小 BUG。</p>
<p>直到 2024 年 3 月，腾讯才正式推出 Linux 版本的微信，大致上的该有的功能基本都有，但是原生只能安装在部分国产操作系统上。如果使用的是其他的 Linux 发行版，可以使用 bwrap 套一层绕过检测。</p>
<p>直到 2024 年 10 月，腾讯才推出可以在其他发行版上使用的微信。</p>
<p>网易云音乐已经不再分发官方的 Linux 版本的软件包了，如果需要使用可以选择安装其他的第三方网易云音乐客户端。</p>
<p>Microsoft office 365 没有 Linux 的版本，目前要么用 WPS。要么用 onlyoffice。很多 Linux 用户貌似会用 libreoffice？</p>
<p>只有部分游戏是提供了原生的 Linux 版本（其中有一部分大概是因为 Steam Deck，Steam Deck 上的操作系统 Steam OS 是一个 GNU/Linux 发行版）。不过 Valve 公司开发了 Proton 兼容层以运行只支持 Windows 的游戏。</p>
<p>很多专业的软件可能处于没有 Linux 版本的状态。我又不是任何领域的专业人士，这个还是需要自己去搜集。如果是计算机相关还是有很多平替的，可以参考网站 <a href="https://alternativeto.net/" target="_blank" rel="noopener noreffer ">AlternativeTo</a>，这个网站列出了一些软件的替代品可供参考。</p>
<h3 id="从硬件的层面来看">从硬件的层面来看</h3>
<p>芯片厂商对于 Linux 的支持总是落后于 Windows 的。</p>
<p>对于硬件视频加速来说，Firefox 的支持还可以，Chromium 只是实验性支持（不过貌似也可以用）。这里 Intel 和 AMD 都会使用 VAAPI，NVIDIA 开发了一套 VDPAU 和 NVDEC。不过貌似 VDPAU 的 driver 好久不开发了，NVIDIA 可以安装 nvidia-vaapi-driver，这样可以将 NVDEC 转成 VAAPI 供 Firefox 使用。虽然 nvidia-vaapi-driver 只支持解码，不支持编码，但视频播放器，录屏软件都支持 NVIDIA 原有的编解码格式，所以也还好。</p>
<h3 id="从安全的角度来看">从安全的角度来看</h3>
<p>这个其实不好说，从开源的角度来说，可以审查理论上下限不会太低，但是<a href="https://en.wikipedia.org/wiki/XZ_Utils_backdoor" target="_blank" rel="noopener noreffer ">xz 的投毒事件</a>也可以看出这个安全性也么那么绝对</p>
<blockquote>
<p>今天有人提到 Lasse Collin 对于 xz 项目早就疲惫不堪，Jia Tan 是极少数愿意真正贡献代码的“开发者”，这都是这场悲剧不可或缺的背景条件。</p>
<p>在无人关心的角落，Florian Westphal 最近辞去了内核 netfilter co-maintainer，所以现在 nf 只剩 Pablo Neira Ayuso 一人维护。这可是无数人每天使用的 netfilter。</p>
<p>在无人关心的角落，我最爱的工具之一 strace 依然只由一个捷克人 Dmitry V. Levin 默默维护。</p>
<p>在无人关心的角落，tcpdump/libpcap 在由 the-tcpdump-group 持续更新，其中一位 Denis Ovsienko 的自我介绍是 sometimes I work jobs for living, sometimes I contribute pro bono to free and open source software projects, often I do both，给人一种很孤独的感觉。</p>
<p>在无人关心的角落，bash group 只有三位 active members，其中一位 Bob Proulx 有个古典博客，里面有记录他和妻子的平静生活。</p>
<p>我以前赞美人月神话，但我现在更关心默默无闻的开发者们，就像 vim 作者 Bram Moolenaar 一生没有和任何人建立亲密关系，我只想问，你这一生过得开心吗？</p>
</blockquote>
<p>上面这段话转自<a href="https://www.zhihu.com/question/650826484/answer/3451699113" target="_blank" rel="noopener noreffer ">知乎的一个回答</a></p>
<p>基础开源软件组件有些是几个人的为爱发电。但基础组件一旦出现了安全问题，影响还是挺大的。</p>
<p>从安全角度来讲，</p>
<ul>
<li>你不应该使用原版的 linux-kernel，而是 <a href="https://github.com/anthraxx/linux-hardened" target="_blank" rel="noopener noreffer ">linux-hardened</a>
<ul>
<li>这样的 kernel 使用了基本内核加固补丁集和更多安全相关的编译时配置选项</li>
<li>还应该使用 sysctl 更加细粒度的调整一些安全相关的参数</li>
<li>或者至少应该自己编译内核，删除不必要的 module，选择更安全的内核编译选项。</li>
</ul>
</li>
<li>不应该使用 pulseaudio 这个音频服务，而是使用 pipewire
<ul>
<li>这一点还好，现在应该都在使用 pipewire</li>
</ul>
</li>
<li>应该使用 SELinux 或者 AppArmor 这样的软件更细致的管控文件权限</li>
<li>flatpak 安装的软件，应该使用 flatseal 用于管理软件的权限</li>
<li>使用 sudo 应该只允许用户执行部分软件而不是直接允许执行全部软件</li>
<li>硬盘/文件系统应该加密</li>
<li>grub 这个 bootloader 也应该加密，BIOS 也应该加密</li>
<li>一些文件目录挂载的时候可以禁用读写权限或者执行权限之类的</li>
<li>应该尝试使用 firejail 或者 bwrap 这样的沙盒程序
<ul>
<li>bwrap 貌似比 firejail 更好一些</li>
</ul>
</li>
<li>不应该使用 Xorg，应该使用 Wayland
<ul>
<li>这一点还好，现在大部分的桌面环境都带有 Wayland 的支持，最新版本的 KDE Plasma 和 GNOME 甚至默认就是 Wayland 会话</li>
</ul>
</li>
</ul>
<p>这里还存在一个问题是——是否要选择 <em>使用源码分发的包管理器</em> 的发行版。</p>
<p>这种发行版的软件分发的是其源代码，软件的编译工作是跑在用户的机器上这样的好处是可以控制软件的功能的选择，软件的体积减小，攻击面理论上也会少一些。并且由于编译是跑在用户自己的机器上，你可以开很多为了安全考虑的编译选项。甚至编译工具链也可以选择。</p>
<h2 id="为什么应该使用">为什么应该使用</h2>
<h3 id="从应用软件的角度来看">从应用软件的角度来看</h3>
<p>我认为，终端通过 shell 将系统的细节暴露给用户，使得用户可以做很多事情。尤其 Linux 更大限度的暴露细节。</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Stallman" target="_blank" rel="noopener noreffer ">Richard Stallman</a> 因为认为当时黑客文化式微，发起了 GNU 项目，组织了自由软件基金会并发起了自由软件运动。</p>
<p>我认为这一定程度上影响了一批人，导致开发者会用开源软件并回馈开源社区。</p>
<p>当然这样的大牛不止这一位，比如 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreffer ">Linus Torvalds</a> 技术很强，但是还没有 Richard Stallman 的观点那么偏激（这句话不代表我认为 Richard Stallman 的观点偏激，我只是用偏激作为对比的词汇），Linus Torvalds 也吸引了很多 hacker。</p>
<p>一定程度上，由于开发者目前使用的很多软件都是开源的，开源软件目前互相之间的配合还是可以的，所以作为同样是开源软件的 linux，它们之间的工作会更加顺畅。我认为这一定程度上也算是形成了一个圈子🤪。</p>
<h3 id="从安全的角度来讲">从安全的角度来讲</h3>
<p>单纯从批判商业公司闭源软件可能有自留后门的角度来说，开源软件这样的风险少一些（我并不是说开源软件一定不会有风险）。</p>
<p>我目前认为只有上述这个角度能说明使用 GNU/Linux 作为日用操作系统会比使用诸如 Windows 更加安全了，还有就是可能 Linux 会有一些更加强劲的安全权限控制软件。</p>
<h2 id="结论">结论</h2>
<p>目前应该还是更适合编程开发。</p>
<p>应用程序角度来看，目前 GNU/Linux 最友好的桌面环境应该是 KDE Plasma。目前国内软件大部分都可以在 Linux 找到官方分发的软件包，就算没有也有非官方的开源实现。部分软件没有 Linux 的版本，也许会有替代品，但效果可能会差一些。</p>
<p>硬件上来看，NVIDIA 显卡的支持目前还是不错，不过还是有些小毛病，其他的芯片我不太了解，应该都还好。</p>
<p>安全性还说，默认的还是不行，用户还是需要一定的自设定。我一直认为，如果真的追求安全性，应该装 QubesOS 这个操作系统。</p>
]]></description>
</item>
<item>
    <title>我的 NixOS 安装记录</title>
    <link>http://localhost:1313/posts/nixos_install_rec/</link>
    <pubDate>Sat, 06 Apr 2024 12:59:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/nixos_install_rec/</guid>
    <description><![CDATA[<p>我这次安装 NixOS 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用 WM 用的是 Hyprland</p>
<h1 id="我的-nixos-安装记录">我的 NixOS 安装记录</h1>
<h2 id="背景">背景</h2>
<p>在上个月，我还在使用着 Gentoo Linux，那时我还在想应该可以一直使用下去，结果后来有个组件需要用到 <code>systemd</code>，于是我准备从 <code>openrc</code> 换到 <code>systemd</code>，同时因为 <code>pipewire</code> 也很依赖 <code>systemd</code>，我用 <code>openrc</code> 的同时用 <code>pipewire</code> 总有一点不太得劲。但是我的环境也许有些独特了，或者是我自身实力不够，反正我无法以一种较为优雅的方式从 <code>openrc</code> 换到 <code>systemd</code>。</p>
<p>后来我就想到了 NixOS，曾经我被它那些新鲜的特性搞得不知道从何下手（虽然现在我也不太能下手）。</p>
<h2 id="关于-uefi">关于 UEFI</h2>
<p>我不好评价为什么我改成 <code>grub</code> 之后，<code>grub-install</code> 根本没有写入，我改回了 <code>systemd-boot</code> 就行了。后来我在搜相关问题的时候发现有人指出需要这个设置：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span></span></span></code></pre></div></div>
<p>由于我这个电脑现在是 Windows 11 + NixOS，所以我需要使用 <code>grub</code> 才可以</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">systemd-boot</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">grub</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">device</span> <span class="o">=</span> <span class="s2">&#34;nodev&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">efiSupport</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">useOSProber</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>Hyprland 默认就是 Wayland，但是对于一些尚未完全准备充分的（比如 Chromium 内核的软件）软件需要加 <code>environment.sessionVariables.NIXOS_OZONE_WL = &quot;1&quot;;</code>。但是对于老版本的 Electorn 应用来说，哪怕这个环境变量启用了也于事无补。</p>
<p>众所周知，Chromium 目前启用了 Wayland 之后就需要附加命令行参数的方式才能正常使用输入法。目前我只使用了 Brave 和 vscodium 需要这一点。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="err">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">brave</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-features=UseOzonePlatform&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># &#34;--use-gl=egl&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">overrideAttrs</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">old</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># inherit (pkgs.guangtao-sources.brave) src pname version;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">programs</span><span class="o">.</span><span class="n">vscode</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableExtensionUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">extensions</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">vscode-extensions</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">yzhang</span><span class="o">.</span><span class="n">markdown-all-in-one</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkief</span><span class="o">.</span><span class="n">material-icon-theme</span>
</span></span><span class="line"><span class="cl">    <span class="n">llvm-vs-code-extensions</span><span class="o">.</span><span class="n">vscode-clangd</span>
</span></span><span class="line"><span class="cl">    <span class="n">vadimcn</span><span class="o">.</span><span class="n">vscode-lldb</span>
</span></span><span class="line"><span class="cl">    <span class="n">usernamehw</span><span class="o">.</span><span class="n">errorlens</span>
</span></span><span class="line"><span class="cl">    <span class="n">astro-build</span><span class="o">.</span><span class="n">astro-vscode</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">userSettings</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;window.titleBarStyle&#34;</span> <span class="o">=</span> <span class="s2">&#34;custom&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontFamily&#34;</span> <span class="o">=</span> <span class="s2">&#34;Intel One Mono&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontSize&#34;</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;telemetry.telemetryLevel&#34;</span> <span class="o">=</span> <span class="s2">&#34;off&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.iconTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;material-icon-theme&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.colorTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;Quiet Light&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">package</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">vscodium</span><span class="o">.</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform-hint=auto&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这里可以看到使用的是 vscode，而不是 vscodium，因为 vscodium 还没有这些配置选项，所以就用 vscode，替换掉 vscode 的 package 这样用了。</p>
<p>我将我自己在使用 NixOS 时的 <em>configuration.nix</em> 等文件上传到了 GitHub 仓库中: <a href="https://github.com/suoyuan666/NixOS_configfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/NixOS_configfiles</a></p>]]></description>
</item>
<item>
    <title>我写的 Gentoo Linux 安装指南</title>
    <link>http://localhost:1313/posts/gentooinstall_ng/</link>
    <pubDate>Thu, 28 Mar 2024 20:05:47 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/gentooinstall_ng/</guid>
    <description><![CDATA[<p>我这次安装 Gentoo Linux 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用的 init 是 openrc，WM 用的是 Hyprland</p>
<h1 id="我写的-gentoo-linux-安装指南">我写的 Gentoo Linux 安装指南</h1>
<h2 id="背景">背景</h2>
<p>我这次安装主要因为 Gentoo Linux 在我看来真的很有趣，并且我想尝试一些新的东西试试，虽然我用 Arch Linux 应该不会遇到滚挂的问题，但我还是有些疑虑。</p>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
<h2 id="profile-选择">profile 选择</h2>
<p>根据 <a href="https://www.gentoo.org/support/news-items/2024-03-22-new-23-profiles.html" target="_blank" rel="noopener noreffer ">Gentoo Linux 在 24 年 3 月发布的 news</a>，profile 17.1 等版本已经过时了，最好应该更新到 23.0。如果你的 stage3 包下载的是 systemd 什么的，那就直接 enable 23.0 的 profile，如果你上来就选择了 openrc 相关的 profile，貌似还是 17.1 的。你需要更换到对应 23.0 中的那些 split-usr 的 profile。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ eselect profile list <span class="p">|</span> grep 23.0
</span></span><span class="line"><span class="cl">  <span class="o">[</span>21<span class="o">]</span>  default/linux/amd64/23.0 <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>22<span class="o">]</span>  default/linux/amd64/23.0/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>23<span class="o">]</span>  default/linux/amd64/23.0/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>24<span class="o">]</span>  default/linux/amd64/23.0/desktop/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>25<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>26<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>27<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>28<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>29<span class="o">]</span>  default/linux/amd64/23.0/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>30<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>31<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>32<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>33<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>34<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>35<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>36<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>37<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>38<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>39<span class="o">]</span>  default/linux/amd64/23.0/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>40<span class="o">]</span>  default/linux/amd64/23.0/llvm/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>41<span class="o">]</span>  default/linux/amd64/23.0/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>42<span class="o">]</span>  default/linux/amd64/23.0/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>43<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>44<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>45<span class="o">]</span>  default/linux/amd64/23.0/split-usr <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>46<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>47<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>48<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>49<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>50<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>51<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>52<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>53<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>54<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>55<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>56<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>57<span class="o">]</span>  default/linux/amd64/23.0/split-usr/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>58<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>59<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>62<span class="o">]</span>  default/linux/amd64/23.0/x32 <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>63<span class="o">]</span>  default/linux/amd64/23.0/x32/systemd <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>64<span class="o">]</span>  default/linux/amd64/23.0/split-usr/x32 <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>69<span class="o">]</span>  default/linux/amd64/23.0/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>70<span class="o">]</span>  default/linux/amd64/23.0/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>71<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>72<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>73<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>74<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>75<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>76<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span></span></span></code></pre></div></div>
<p>为什么这里说 <em>split-usr</em>，在 <a href="https://wiki.gentoo.org/wiki/Merge-usr" target="_blank" rel="noopener noreffer ">merge-usr</a> 这篇 wiki 中指出，merge-usr 对于&gt;=systemd 255 来说是必需的，对于其他 init 系统来说是可选的。23.0 的除了标明 <em>split-usr</em> 默认都是 <em>merge-usr</em> 的，所以如果我目前使用的是 openrc，文件的布局默认就是 <em>split-usr</em>，也就先不更改了。</p>
<p>对我来说，我除了要 enable desktop 的 profile 之外，我还想要 enable hardened 的 profile 以带来安全上的提升。可以在<a href="https://wiki.gentoo.org/wiki/Profile_%28Portage%29#Example_1:_Combining_multiple_profiles_from_the_Gentoo_ebuild_repository" target="_blank" rel="noopener noreffer ">Gentoo Wiki 上关于 profile 的介绍中</a>查看到如何将两个 profile 同时 enable</p>
<p>说起安全性，Gentoo Linux 目前跟的是 LTS 的内核，版本目前在 6.6，不过 6.7 在安全性貌似有很多改进（存疑），所以我选择跟进 stable 的脚步（</p>
<p><a href="https://wiki.gentoo.org/wiki/Project:Hardened" target="_blank" rel="noopener noreffer ">Project:Hardened</a> 这个项目主页介绍了 Gentoo Hardened profile 的一些细节，但是这篇文档质量貌似不是很好。</p>
<h2 id="wm-选择">WM 选择</h2>
<p>使用的是 openrc，但我网络方面依旧选择的是 networkmanager，主要因为习惯了，其他的像 iwd，或者 wpa_supplicant 这样的 WiFi 连接工具我用的都不是很习惯（主要我是要用桌面环境的，这俩我都不知道有 tui 或者 gui 组件）。音频服务方面选择的是 pipewire，我并不想用 pulseaudio，所以只能选择 pipewire 了。根据<a href="https://wiki.gentoo.org/wiki/PipeWire" target="_blank" rel="noopener noreffer ">Gentoo Wiki 关于 PipeWire 的描述</a>，可以看出这东西还有点依赖 systemd，难绷。虽然 wiki 中关于 openrc 也给了使用它的方法。</p>
<p>DE 方面，我本来是想用 GNOME 的，虽然 GNOME 依赖于 systemd，但是 Gentoo Linux 做了一些工作使得可以在 openrc 上使用 GNOME，但是 GNOME 需要编译好多软件，我真的受不了了。我基于 “我真的喜欢用 Wayland” 的心理，选择使用了 Hyprland，WM 向来要比 DE 默认少装很多软件。</p>
<p>关于 Hyprland 的启动，我还是推荐 <code>dbus-run-session Hyprland</code> 这样启动，而不是直接 <code>Hyprland</code>。状态栏我是用的是 waybar，通知组件用的是 mako，程序启动器使用的是 wofi，Terminal 使用的是 kitty。输入法使用的是 fcitx5。</p>
<p>在 GNOME 中，使用 chromium 内核的软件以 Wayland 启动的话就无法使用中文输入法，需要附加 <code>--gtk-version=4</code> 这个 flag 才能使用，但是 Electron 的应用目前还不支持 gtk4 导致附加了 flag 也不好使。</p>
<p>但是在 Hyprland 中就没有这个问题，就像是 KDE Plasma 中也不会存在这个问题一样。只需要附加 <code>--enable-wayland-ime</code> 这个 flag 就可以了。</p>
<p>Chromium 内核的软件以 Wayland 启动的话会很模糊，附加 <code>--use-gl=egl</code> 就好了。</p>
<p>Hyprland 没有太好的主题设置软件，我选择的是使用 <code>gsettings</code> 这个软件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface font-name
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Noto Sans Mono 11&#39;</span>
</span></span><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface icon-theme
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Tela&#39;</span></span></span></code></pre></div></div>
<p>如果把 <code>get</code> 改成 <code>set</code> 就是设置字体和主题了。</p>]]></description>
</item>
</channel>
</rss>
