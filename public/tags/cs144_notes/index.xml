<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CS144_notes - Tag - 索元的博客</title>
        <link>http://localhost:1313/tags/cs144_notes/</link>
        <description>CS144_notes - Tag - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Mon, 12 Aug 2024 22:28:09 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/cs144_notes/" rel="self" type="application/rss+xml" /><item>
    <title>TCP 的错误检测 &amp; 流量控制 &amp; 状态转换</title>
    <link>http://localhost:1313/posts/cs144_notes_004/</link>
    <pubDate>Mon, 12 Aug 2024 22:28:09 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_notes_004/</guid>
    <description><![CDATA[<p>CS114 课程的课程笔记</p>
<h1 id="tcp-的错误检测--流量控制--状态转换">TCP 的错误检测 &amp; 流量控制 &amp; 状态转换</h1>
<h2 id="错误检测">错误检测</h2>
<p>通常使用三种检测手段：校验和，循环冗余码CRC和消息认证码。例如，Ethernet 附加循环冗余码，TLS 附加消息认证，IP 附加校验和</p>
<ul>
<li>校验和
<ul>
<li>计算快速，由软件做校验和运算也不会有太大的消耗</li>
<li>并不可靠，如果两个错误的码相互抵消，比如一个位错误地加 2，另一个位错误地减 2，校验和就捕获不到这个错误。</li>
</ul>
</li>
<li>CRC
<ul>
<li>很多链路层会使用，计算代价更加大</li>
<li>比校验和更可靠</li>
<li>一般来说，链路层使用了 CRC，TCP/IP 甚至可以不使用校验和，n 位的 CRC 可以检测任何小于等于 n 位长度的错误。</li>
</ul>
</li>
<li>消息验证码 (message authentication code，MAC)
<ul>
<li>就是消息摘要算法</li>
<li>TLS 使用</li>
<li>很可靠，但不容易排错</li>
</ul>
</li>
</ul>
<h3 id="校验和">校验和</h3>
<p>IP，TCP，UDP 都使用补码校验和，一些较老一些的计算机使用的是二进制算数版本。</p>
<p>将校验和字段设为 0，后取数据包的 16 bit 相加，0x8000 + 0x8000 = 0x0001。最后取反，如果结果为 0xffff，那就不取反，直接用 0xffff。0 表示没有校验和。</p>
<p>校验的时候是将校验和和数据都再加一次，看看是不是 0xffff。</p>
<p>早期 Internet 通过软件实现校验和</p>
<h3 id="crc">CRC</h3>
<p>如果是 n 为的数据，需要以某种方式分成 c 为错误检测数据，c 比 n 小得多。</p>
<p>如果有 1500 字节的 Ethernet 就携带 4 字节 32 bit CRC，USB 和蓝牙使用 16 bit。</p>
<p>CRC 无法检测所有错误，有 $2^{-c}$ 几率无法检测到。例如对于 8 bit的 CRC 而言，两个不同的数据的 CRC 相同的概率就是 $\frac{1}{256}$，即 0.4%。</p>
<p>对于一个多项式 M，其每一位都是 1 的系数，即 <code>M = 1001 = x^4 + 1</code>。</p>
<p>当计算 CRC 时，需要使用 CRC 算法定义的生成多项式 G。例如 CRC-16 算法的生成多项式 0x8005 = x^16 + x^15 + x^2 + 1。由于历史原因，生成多项式的比其位数长一位（其第一项始终为 1）。</p>
<p>计算 CRC：获许消息 M，用 CRC 长度的 0 填充它，将这个值和 G 相除，其余数就是 CRC。将 CRC 附加到消息上，得到 M&rsquo; = M + CRC。如果 M&rsquo; 和 G 的余数是 0，则通过测试。</p>
<h3 id="mac">MAC</h3>
<ol>
<li>不同长度的输入，产生固定长度的输出</li>
<li>散列后的密文不可逆</li>
<li>散列后的结果唯一（不太严谨）</li>
<li>哈希碰撞</li>
<li>一般用于检验数据完整性（签名sign）</li>
<li>消息摘要算法也叫单向散列函数、哈希函数</li>
</ol>
<p>MAC 和其他消息摘要算法（如 MD5，SHA256 等）不同的是多了一个密钥。</p>
<h2 id="流量控制">流量控制</h2>
<p>流量控制要解决通信双方处理数据包的速度不一致的问题。最简单的就是 stop and wait，但现在都会选择 sliding window。</p>
<h3 id="stop-and-wait">stop and wait</h3>
<p>就是发送方发一个就等待这个包的 ack，超时了就重发。</p>
<h3 id="sliding-window">sliding window</h3>
<p>sliding window 就是维护一个 window，window size 就是一次性能发送或接收的数据包的数量。</p>
<p>并且可以只发一个 ack 包确认发送的所有数据包。</p>
<p>超时重发有两种选择:</p>
<ul>
<li>window 里的包全部重发</li>
<li>只重发第一个</li>
</ul>
<p>如果接收方的 window size 为 1 的话，就需要全部重发，因为接收方没有缓存。一般发送的量不多的时候会选择全部重发的策略。</p>
<h2 id="tcp-header">TCP header</h2>
<p></p>
<ul>
<li>window
告诉对方自己的 window size</li>
<li>Flags
<ul>
<li>U
<ul>
<li>表明该数据应该优先被处理</li>
</ul>
</li>
<li>P
<ul>
<li>表明应该立即将已接收的数据传递给应用程序，而不是等待缓冲区填满</li>
</ul>
</li>
<li>A,R,S,F
<ul>
<li>ack, reset, syn, fin</li>
</ul>
</li>
</ul>
</li>
<li>offset
<ul>
<li>tcp header 的长度</li>
</ul>
</li>
<li>padding
<ul>
<li>帮助 header 对齐</li>
</ul>
</li>
</ul>
<h2 id="tcp-状态图">TCP 状态图</h2>
<p></p>
<blockquote>
<p>图片来自 <a href="https://en.wikipedia.org/wiki/File:Tcp_state_diagram_fixed.svg" target="_blank" rel="noopener noreffer ">https://en.wikipedia.org/wiki/File:Tcp_state_diagram_fixed.svg</a></p>
</blockquote>
<p>蓝色的线表示服务器，红色的是客户端。</p>
<p>服务器打开就进入 <code>LISTEN</code> 状态，关闭就回到 <code>CLOSED</code> 状态</p>
<p>客户端先发送 SYN 进入 <code>SYN SENT</code> 状态，服务器收到后发送 SYN ACK 进入 <code>SYN RECEIVED</code> 状态。</p>
<p>客户端收到了 SYN ACK 再发送 ACK 并进入 <code>ESTABLISHED</code> 状态，服务器收到了 ACK 包后也会进入这个状态，自此双方建立连接。</p>
<p>但同时还有一种路径，就是虚线那条，服务器 <code>LISENSE</code> 状态可以主动发 SYN 包，客户端处于 <code>SYN SENT</code> 状态收到后再向服务器发送一个 <code>SYN ACK</code> 包，这样是双方都发送了 SYN，并收到了对方的 ACK。</p>
<p>下面的就是关于连接的关闭，服务器收到 FIN 之后回一个 ACK，服务器这里需要把数据发送完后 close，之后再发送 FIN。</p>
<p>客户端这里 close 之后就发送一个 FIN，并且再收到 FIN-ACK 或者 FIN 的时候就开始清理资源准备 close，如果只收到了 ACK，表示对方数据还没发送完，则继续等待</p>]]></description>
</item>
<item>
    <title>TCP &amp; UDP &amp; ICMP</title>
    <link>http://localhost:1313/posts/cs144_notes_003/</link>
    <pubDate>Fri, 26 Jul 2024 00:01:22 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_notes_003/</guid>
    <description><![CDATA[<p>CS114 课程的课程笔记</p>
<h2 id="tcp-服务">TCP 服务</h2>
<p>TCP (Transmission Control Protocol4) 提供了 可靠的，端到端的，双向的字节流服务。TCP 是传输层的协议。</p>
<p>将两个主机之间的 TCP 通信称为连接 (connection)。在连接的两端，TCP 会保留一个状态机去跟踪连接在做什么。</p>
<p>A 主机和 B 主机需要三次握手后建立 TCP 连接。</p>
<ol>
<li>A 向 B 发送一条信息表示 A 处的 TCP 层 希望和 B 建立连接，该消息称为 SYN 消息。因为 A 还会发送其将用来识别字节流中的字节的基数，如果发送 0 ，表示将会从 0 开始。</li>
<li>B 会回复一个 SYN-ACK，B 发出 SYN 信号，因为 B 确认 A 的请求并同意建立连接。B 的 TCP 层还会发送一个 SYN 给 A，以表示它希望建立连接，并且发送一个数字以表明字节流起始编号。</li>
<li>A 回复一个 ACK，表示它正在接收通信请求。</li>
</ol>
<p>当 A 和 B 完成相互之间的数据发送之后，它们需要关闭连接，并在之后都开始清理与状态机关联的状态。</p>
<ol>
<li>A 上的 TCP 层可以通过发送 FIN 信息以关闭连接。</li>
<li>B 确认 A 不再有要发送的数据，并停止从 A 中获取数据。
<ul>
<li>但 B 可能仍有新数据要发送，并且还没有准备管理连接，所以回复的 ACK 还可以将新数据从 B 发送到 A。B 可以一致向 A 发送新数据。</li>
<li>等 B 把数据都发送完了，就发送自己的 FIN 给 A。</li>
</ul>
</li>
<li>A 再发送一个 ACK 进行确认，以确认连接现已关闭。</li>
</ol>
<p>现在就是正式关闭，状态也可以安全移除。</p>
<p>通过以下四个方式保证了可靠地发送:</p>
<ol>
<li>当 TCP 层接收到数据时，它将确认 ACK 给发送方使其知道数据已送达。</li>
<li>checksum 检测损坏的数据，TCP header 带有一个 checksum，覆盖了报头和内部的数据，以检测在途中是否存坏。</li>
<li>序列号检测丢失的数据，每个段的 header 都包含字节序列中的序列号。例如双方都同一序列号从 1000 开始，则第一个段的序号就是 1000，如果这个段有 500 字节数据，那下一个段的序列号应该是 1500。
<ul>
<li>如果段丢失，就能通过序列号发现，这时候就需要发送方重发数据。</li>
</ul>
</li>
<li>流量控制以防止接收器超速运行。
<ul>
<li>防止 A 发包速度比 B 处理快多了，B 处理不过来的情况。</li>
<li>在 TCP 中，接收方不断询问发送方是否可以继续发送，也就是告诉发送方其缓冲区并还有多少空间可以接收新数据。</li>
</ul>
</li>
</ol>
<p>TCP 按照正确的顺序将数据传送到应用程序。</p>
<p>TCP 会尝试平衡所有 TCP 连接之间的网络容量，也就是 Congestion Control。</p>
<ul>
<li>Flag
<ul>
<li>ACK, 确认序列号有效</li>
<li>SYN, 正在发送同步信号，这是三次握手的一部分</li>
<li>FIN, 表示连接一个方向的关闭</li>
<li>PSH, 告诉另一端 TCP 立即传送数据，而不是等待更多的数据
<ul>
<li>对于携带与时间相关的数据（比如按键）来说有用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="udp-服务">UDP 服务</h2>
<p>UDP (User Datagram Protocol)并不保证可靠的到达，只提供简单的送达功能。</p>
<p>使用 IPV4 时，UDP 数据包中 checksum 字段是可选的，可以全为 0 表示不包含该字段。checksum 还会包含 IP
数据包中的一些信息，如源地址，目的地址，协议 ID 等。这违反了分层原理，这是为了允许 UDP 检测传递到错误地址的数据包。</p>
<p>UDP 不需要先建立连接，可以直接发包，所以更适合那些简单的请求-应答的服务，比如 DNS, DHCP, NTP 等。</p>
<h2 id="icmp-服务">ICMP 服务</h2>
<p>ICMP (Internet Control Message Protocol) 用于报错以及诊断问题。</p>
<ul>
<li>在主机间传达有关网络层的信息</li>
<li>报告错误，并帮助诊断错误</li>
</ul>
<p>ICMP位于 IP 之上，是一种传输层协议，并不可靠，它没有重发，也不会保留消息的状态。</p>
<p>假设 A 向 B 发包，但是路由器找不到 B，就会发送一个 ICMP 包给 A 表示找不到。</p>
<p>路由器会将 IP 数据报中的header 放到自己的 header 中。之后加上类型和 code 以标记错误。最后将这些放到新的 IP 数据报中。</p>
<ul>
<li>ping
<ul>
<li>ping 直接调用 ICMP，它发送 ICMP 回显请求。ping 了对方后，对方也会发送一个 ICMP 回来。</li>
</ul>
</li>
<li>tarceroute
<ul>
<li>traceroute 的目标是在 A 到 B 的路径中找到路由器，并测量从 A 到每个路由器的数据包的往返时间</li>
<li>这是通过 UDP 实现的。
<ul>
<li>A 发送 UDP 信息，并且这个 IP 数据报的 TTL 是 1，第一个路由器收到后递减 TTL 直接到 0，就会丢包，然后发回一个 ICMP 信息以通知 TTL 过期。这时就可以知道第一个路由器的信息，并且还可以测量时间。</li>
<li>之后再发送一个 TTL 为 2 的数据报，以此类推。</li>
<li>并且这个 UDP 包会请求对方的一个不太可能使用的端口，以让对方也是发送一个 ICMP 回来表示该端口无法访问。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="端到端原则">端到端原则</h2>
<p>1984 年， Saltzer, Reed, and Clark paper 的一篇文章指出：端到端原则指的是网络虽然可以完成更多的事情，但只是帮助，不能完全依靠网络，尽可能由终端主机实现功能。</p>
<p>在 IETF 的 <a href="https://www.rfc-editor.org/rfc/rfc1958#page-3" target="_blank" rel="noopener noreffer ">RFC 1958</a> 中有更简短的描述：网络的工作就是尽可能高效灵活地传输数据包，除此之外的工作都应该在主机上实现。</p>]]></description>
</item>
<item>
    <title>字节序 &amp; IPV4 地址 &amp; ARP 协议</title>
    <link>http://localhost:1313/posts/cs144_notes_002/</link>
    <pubDate>Thu, 25 Jul 2024 06:28:24 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_notes_002/</guid>
    <description><![CDATA[<p>CS114 课程的课程笔记</p>
<h1 id="字节序--ipv4-地址--arp-协议">字节序 &amp; IPV4 地址 &amp; ARP 协议</h1>
<h2 id="字节排版和格式">字节排版和格式</h2>
<p>假设要发送 1024 ，十六进制是 0x0400 来表示。</p>
<p>在小端法表示中，最低有效字节位于最低地址，也就是 0x00, 0x04 这么存储。</p>
<p>在大端法表示中，最高有效字节位于最低地址，也就是 0x04, 0x00 这么存储。</p>
<p>但通信双方处理器使用的的字节序未必一致。例如 Intel 和 AMD x86 处理器使用小端法，不过一些处理器支持双端法，然后由操作系统决定到底用小端还是大端。</p>
<p>协议规范规定了使用大端，互联网所有协议都使用大端字节序。</p>
<p>如果自身机器是小端字节序的话，可以写个测试:</p>
<p>假设 TCP 端口为 80，存一个变量 <code>http_port = 80</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="n">http_port</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">packet</span><span class="o">-&gt;</span><span class="n">port</span> <span class="o">==</span> <span class="n">http_port</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// ERROR
</span></span></span></code></pre></div></div>
<p>此时就可以比对，<code>http_port</code> 是小端存储，但 <code>packet-&gt;port</code> 则是大端，虽然实际上要存储的值都是 80，但测试失败。</p>
<p>为了简化这个过程，C 提供了一些库函数: <code>htons()</code>, <code>ntohs()</code>, <code>htonl()</code>, <code>ntohl()</code></p>
<ul>
<li>htons: host to network short</li>
<li>ntohl: network to host long</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">uint</span> <span class="n">http_port</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint16_t</span> <span class="n">packet_port</span> <span class="o">=</span> <span class="nf">ntohs</span><span class="p">(</span><span class="n">packet</span><span class="o">-&gt;</span><span class="n">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">packet_port</span> <span class="o">==</span> <span class="n">http_port</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// OK
</span></span></span></code></pre></div></div>
<p>对于小端字节序表示来说，<code>ntohs()</code> 和 <code>htons()</code> 会调换字节的顺序，对于大端字节序来说，二者什么也不做，只是将参数返回。</p>
<h2 id="ipv4-地址">IPV4 地址</h2>
<p>IPV4 地址长度为 32 位。通常分成4组写，例如: 192.168.1.1</p>
<p>除了 IP 地址的标示，还有网络掩码 (netmask)。例如网络掩码 255.255.255.0，表示 IP 地址 和自己的前三个八位字节匹配的在同一网络中。而 255.255.252.0 则表示前 22 位相同的和自己在同一网络中。</p>
<p>这就可以对两个 IP 地址和它们自己的掩码按位与来判断是否在同一网络中</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="n">A</span> <span class="o">&amp;</span> <span class="n">netmask</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">B</span> <span class="o">&amp;</span> <span class="n">netmask</span><span class="p">))</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span></span></span></code></pre></div></div>
<p>可以使用 <code>ip addr</code> 查看自己的 IP 地址，有些发行版默认不装 <a href="https://net-tools.sourceforge.io/" target="_blank" rel="noopener noreffer ">net-tools</a> 也就无法使用 <code>ipconfig</code>，但应该会带 <a href="https://git.kernel.org/pub/scm/network/iproute2/iproute2.git" target="_blank" rel="noopener noreffer ">iproute2</a>。</p>
<h3 id="地址结构">地址结构</h3>
<p>传统分为三种</p>
<ul>
<li>0 network(1 -&gt; 7) host(8 -&gt; 31)</li>
<li>1 0 network(2 -&gt; 15) host(16 -&gt; 31)</li>
<li>1 1 0 network(3 -&gt; 23) host(24 -&gt; 31)</li>
</ul>
<p>其中，network 部分表示为 administrative domain，比如 MIT，Stanford，host 部分具体指是该网络的哪个设备。</p>
<p>但这种方式无法应对早就膨胀的互联网主机数量。</p>
<p>现在 IPV4 已经结构化，称为 CIDR (Classless Inter-Domain Routing)。CIDR 可以自定义前缀长度，其大小为 2 的幂次。当说到 CIDR 地址时，也就是在说就是网络掩码的长度，例如 <code>192.168.1.0/24</code>，表示长度为 24 的网络掩码，表示其容纳了 256 个地址，<code>/16</code> 是长度为16的网络掩码，描述了 65536 个地址。</p>
<p><a href="https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority" target="_blank" rel="noopener noreffer ">IANA</a> (Internet Assigned Numbers Authority)组织负责分配 IP 地址，其背后是 <a href="https://en.wikipedia.org/wiki/ICANN" target="_blank" rel="noopener noreffer ">ICANN</a> (Internet Corporation for Assigned Names and Numbers)，ICANN 将工作委托给了 IANA。IANA 向区域互联网注册机构 (Regional Internet Registries, RIRs)分发了 <code>/8</code> (1600 万个地址)，每个州有自己的 RIR，目前总共有五个 RIR。</p>
<blockquote>
<ul>
<li>美洲互联网号码注册管理机构（American Registry for Internet Numbers，ARIN）管理北美、南极洲和部分加勒比地区事务</li>
<li>欧洲IP网络资源协调中心（RIPE Network Coordination Centre，RIPE NCC）管理欧洲、中东和中亚地区事务</li>
<li>亚太网络信息中心（Asia-Pacific Network Information Centre，APNIC）管理亚洲和太平洋地区事务</li>
<li>拉丁美洲及加勒比地区互联网地址注册管理机构（Latin American and Caribbean Internet Address Registry，LACNIC）管理拉丁美洲和部分加勒比地区事务</li>
<li>非洲网络信息中心（African Network Information Centre，AfriNIC）管理非洲事务</li>
</ul>
</blockquote>
<h2 id="longest-prefix-match">Longest Prefix Match</h2>
<p>路由器通过转发表决定转发数据包的链路，当数据包到达时，路由器会在转发表找到和该地址最匹配的条目，并以此决定转发链路。</p>
<p>最长前缀匹配 (Longest Prefix Match, LPM)是 IP 路由用来决定转发地址的算法。</p>
<h2 id="arp-address-resolution-protocol">ARP, Address Resolution Protocol</h2>
<p>ARP 协议是网络层使用，用于发现与其直连的网络地址的 link 地址。设备自己有 IP 地址，但是它需要将数据报发送到哪个 link 上，ARP 协议解决了这个问题。每一层服务都有每一层用于标识的地址，IP 是网络层的地址，而 link 地址标示了特定的网卡，例如，Ethernet 地址是 48 bit。</p>
<p>48 bit 的 Ethernet 地址以冒号分隔的 6 个组形式写入，例如: <code>0:18:e7:f3:ce:1a</code>。</p>
<p>假设下面这个场景:</p>
<p></p>
<p>中间的网关有两个网卡，分别连 A 和 B 两个主机。网关本身就是位于 A 所属的这部分网络中，但网关在只有一个 IP 地址的情况下无法正常工作。所以网卡或路由器具有多个接口，也就具有多个 IP 地址。</p>
<p></p>
<p>假设 A 要向 B 发送数据包。首先判断目的地是否和自己处于同一网络内，网络掩码会表明这一点。
所以 A 需要通过网关来发包，该数据报网络层目标是 <code>171.43.22.5</code>，但链路层的目标为网关的地址 <code>0:18:e7:f3:ce:1a</code>。当网关收到数据报后，网关会为它的下一跳确定为节点 B，然后将其放到 B 的链路层帧中。</p>
<p>这里存在一个问题，A 知道需要通过 <code>192.168.0.1</code> 的网关发送数据包，所以它需要有和 <code>192.168.0.1</code> 关联的 link 地址，但如何获取这个地址。</p>
<p>这里通过一种方式将网络层地址映射到其对应的链路层地址。这里使用的就是 ARP 协议执行此操作。</p>
<p>ARP 是一种简单的 &ldquo;request-reply&rdquo; 的协议。</p>
<p>每个节点都保留在网络中 IP 地址到链路层地址映射的缓存，如果节点需要将数据报发送到它没有映射的 IP 地址，就需要发送一个请求，内容类似 “谁的 IP 地址是 XXX”，对应 IP 地址的节点再给出回应“我是这个地址”，这个回应就带着链路层地址。收到这个回复后，节点就可以建立映射缓存并发包。一个节点发出请求，网络中的每个节点都会收到该数据包。</p>
<p>ARP 请求时包含请求者的 IP 地址和链路层地址，以便于收到的一方可以插入或更新自己的映射缓存。这种映射缓存保存的时间取决于其操作系统。</p>
<p></p>
<ul>
<li>Hardware: 此请求或响应应用于哪个链路层</li>
<li>Protocol: 此请求或响应针对的网络协议</li>
<li>opcode: 该数据报是请求还是响应</li>
<li>length 指长度，比如 Ethernet 48 bit 长度就是 6，而 IPV4 地址长度则是 4。</li>
</ul>
<p>这些字段都会以大端字节序来存储。</p>
<p>最开始 ARP 规范认为回应者应该单播发给请求者，但现在广播更加普遍。</p>]]></description>
</item>
<item>
    <title>网络应用协议 &amp; 网络分层模型 &amp; 设计原则</title>
    <link>http://localhost:1313/posts/cs144_notes_001/</link>
    <pubDate>Mon, 22 Jul 2024 00:31:31 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_notes_001/</guid>
    <description><![CDATA[<p>CS114 课程的课程笔记</p>
<h1 id="网络应用协议--网络分层模型--设计原则">网络应用协议 &amp; 网络分层模型 &amp; 设计原则</h1>
<h2 id="网络应用所使用的协议简介">网络应用所使用的协议简介</h2>
<h3 id="world-wide-web-http">World Wide Web (HTTP)</h3>
<p>万维网使用 HTTP (Hypertext Transfer Protocol) 通信。</p>
<p>在 HTTP 中，客户端打开到服务器的连接并发送命令</p>
<h3 id="bittorrent">BitTorrent</h3>
<p>BitTorrent 是一种允许人们共享大文件的程序。</p>
<p>不同于 Web，BitTorrent 中是客户端像其他客户端申请。BitTorrent 将文件分为称为 pieces 的数据块，一个客户端从另一个客户端下载了一个块后，它会告诉其他客户端自己拥有这个块，这种协作的客户端的集合被称为群集(swarms)。</p>
<p>当用户想要下载某个文件时，他需要先下载 torrent 文件（这通常是通过互联网找到的），这个 torrent 文件描述了要下载的文件的相关信息，还有这个 torrent 的 tracker 信息（tracker 是一个保持 track 群集的成员的节点）。</p>
<p>加入一个 torrent，自己这个客户端会连接到 tracker，并请求其他客户端的列表，本机就会尝试连接到其他客户端并开始下载文件</p>
<h3 id="skype">Skype</h3>
<p>简单情况下就是客户端A和客户端B都能互相访问，那么也没什么可做的。</p>
<p>如果引入了 NAT (Network Address Translator，就像无线路由器就是NAT) 就会复杂一些。自己的设备会在 NAT 的后面，这就导致自己的设备可以通过 NAT 连接互联网，但互联网上的设备不能直接访问到自己的设备。</p>
<p>假设 B 在 NAT 后方，那么 A 就无法直接连接 B。</p>
<p>Skype 通过使用一种被称为 Rendezvous 服务器的东西解决了这个问题。</p>
<p>一开始 A 和 B 都会和 Rendezvous 服务器建立连接，当 A 想要连接 B 的时候，这个请求会通过 Rendezvous 服务器发送到B这里，如果B同意就由 B 尝试连接到 A。这里被称为反向连接。</p>
<p>如果 A 和 B 都在 NAT 后面，Skype 通过使用 Relay 服务器处理这个情况。</p>
<h2 id="网络分层模型">网络分层模型</h2>
<p></p>
<p>整个互联网本身就由主机，链接和路由组成，数据以数据包的形式在每个链接中跳转传递。数据包包含数据和一段头部信息，这个信息包含数据包的来路和去向。</p>
<h3 id="链路层">链路层</h3>
<p>链路层的工作就是将数据在链接中不断的跳转。链路层的应用的例子就是以太网和 WiFi 等</p>
<h3 id="网络层">网络层</h3>
<p>网络层的工作是在互联网中将数据端对端的传送给对方。网络层的数据包(也叫数据报, datagram)的 header 会附带源地址和目标地址的信息。网络层会将数据包给链路层，让链路层通过第一个链接传递数据。链路层会将它跳到路由，路由的链路层接收到之后再传递给路由的网络层，这里的网络层会检查这个数据报的目标地址，并将其向目标地址跳一下。路由再传递到路由，直到到达目标地址。</p>
<p>链路层的具体实现方式并不是一种（例如以太网或 WiFi ），但网络层通过接口传递数据报，这种分离的效果使得网络层无需关注链路层的细节。</p>
<p>在网络层中，通过 Internet 传递数据就需要用到 IP 协议 (Internet Protocol)。</p>
<ul>
<li>IP 尽可能尝试将数据报传递到目的地，但其本身并不保证这一点。</li>
<li>IP 数据报可能会丢失，传递不按顺序，也可能会损坏，它没有保证这些。</li>
</ul>
<h3 id="传输层">传输层</h3>
<p>最常见的传输层的协议就是 TCP (Transmission Control Protocol)。TCP 确保了数据会以正确的顺序并传递过去，并且传输过程中数据报丢失了的话会重发。TCP 保证了运行在网络层之上的服务是的网络连接是可靠的。</p>
<p>相应的，有不保证顺序，也不会在丢失的时候重发的 UDP (User Datagram Protocol) 协议。UDP 只是将应用层的数据送到网络层。</p>
<p>常用的就是 TCP 和 UDP 了，但实际上还有其他的协议(比如 RTP )。</p>
<h3 id="应用层">应用层</h3>
<p>应用层就是常见的那些 http, smtp, ssh, ftp 之类的了。</p>
<h3 id="iso七层模型">ISO七层模型</h3>
<p></p>
<h3 id="ip-服务">IP 服务</h3>
<p>当传输层需要传输数据的时候，传输层将数据发送到下一层——网络层。网络层会将数据放到 IP 数据报中，IP 的工作就是将它发送到另一端。IP 数据包需要通过链路层进行传输，所以它要将数据包发送给链路层，链路层将其放到数据帧(frame)中(例如以太网数据包)，然后送到第一个路由器中。</p>
<p>IP 并不可靠，它不保证数据报一定到达，更不会保证到达的顺序，甚至在必要的时候会丢弃数据报（比如路由器中的数据报队列满了）。</p>
<p>这么设计是为了以下几点</p>
<ul>
<li>更加简单，容易维护，消费更低，速度更快。</li>
<li>端到端原则：尽可能在端测主机实现功能，而不是在网络硬件中。</li>
<li>允许顶层构建可能可靠或不可靠的服务。</li>
<li>对下层的链路层要求更低，对链路层没有太多的假设条件。</li>
</ul>
<h4 id="ip-服务的细节">IP 服务的细节</h4>
<ul>
<li>IP 尝试阻止数据报永远循环。
<ul>
<li>由于路由器转发表错误，可能导致数据报一直在循环发送。</li>
<li>引入了 TTL 字段解决这个问题，TTL 每通过一个路由器都递减一次，如果到 0 了，就认为处于循环的状态，由路由器丢弃它。</li>
</ul>
</li>
<li>IP 会对太长的数据报分段
<ul>
<li>IP 被设计为各种链路工作，不同链路对数据报大小的要求不一致。
<ul>
<li>比如 Ethernet 携带的数据报长度不能超过 1500 字节。</li>
</ul>
</li>
<li>IP 的 header 包含一些字段用于帮助路由器将一个数据报分开，并向对面主机提供信息需要重组数据。</li>
</ul>
</li>
<li>IP 数据报 header 包含一个校验和字段，以确保数据报到达正确的位置。</li>
<li>IP 有两种版本
<ul>
<li>IPV4: 当前广泛使用，32 bit 的地址</li>
<li>IPV6: 128 bit 地址。</li>
</ul>
</li>
<li>IP 允许新字段加入数据报 header 中。</li>
</ul>
<h4 id="ipv4-数据报-header-的细节">IPV4 数据报 header 的细节</h4>
<p></p>
<ul>
<li>Destination IP Address: 目标地址。</li>
<li>Source IP Address: 源地址。</li>
<li>Protocol ID: 数据字段的内容。允许目标主机对包解开并复用，如果 Portocal ID 是6，则该数据就包含一个 TCP 段。<a href="https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority" target="_blank" rel="noopener noreffer ">IANA</a> 定义了 140+种不同的协议值。</li>
<li>Version: IP 当前的版本，V4 还是 V6。</li>
<li>Total Packet Length: 数据报总长度。</li>
<li>TTL: 防止数据报永远处于循环状态。</li>
<li>Packet ID, Flags, Fragment Offset: 帮助路由器将 IP 数据报分成小份。</li>
<li>Type of Service: 向路由器提示该数据报的重要性。</li>
<li>Header Length: header 的长度，帮助自定义 header 字段。</li>
<li>Checksum: 防止发送到错误的地方。</li>
</ul>
<h3 id="数据包的一生">数据包的一生</h3>
<p>互联网四层模型中，从应用层获取数据流，传输层将其可靠地传递给另一台计算机上的应用程序。传输层将这些作为网络层数据包发送，网络层将其传递给另一台计算机。</p>
<h4 id="以-tcp-流为例">以 TCP 流为例</h4>
<p>客户端通过三次握手和服务器连接:</p>
<ol>
<li>当客户端发送服务器一个 synchronize 信息，通常称为 SYN。</li>
<li>服务端收到 SYN 后，发送一个确认连接消息，通常称为 SYN-ACK。</li>
<li>客户端收到后，再回复一个确认信息 ACK。</li>
</ol>
<p>为了标示将数据报传送给哪个应用程序，存在 TCP prot 用于标识。</p>
<p>客户端第一步跳到 WiFi 接入点，接入点存在一个 broader Ethernet 有线连接，所以数据报强制沿着线路跳。路由器连接很多链路，当数据报到达时，路由器决定将其发送到哪个链路。</p>
<p>路由器有 IP 地址，所以它可能不为了一个包，而是用自己的软件发送。例如使用 TCP 登录路由器时，IP 数据报将被发送到路由器自己的 IP 地址。这是通过转发表实现。</p>
<p>数据报到达后，路由器检查那个转发条目和数据报最匹配。</p>
<p>可以使用 Wireshark 验证这一过程。</p>
<p></p>
<hr>
<p>我认为现在没有什么网站是 HTTP 的了，我这里访问的是 BiliBili 所以三次握手后还有专属于 HTTPS 的 TLS 握手。</p>
<p><code>traceroute</code> 可以 trace 数据包传递的每一跳的信息，但是貌似对方可以设置不回显，这样返回不了信息。</p>
<hr>
<h2 id="设计原则">设计原则</h2>
<h3 id="原则数据包切换">原则：数据包切换</h3>
<p>这是构建网络的常用做法。</p>
<p>独立每个到达的数据包，选择将其传出链路，如果该链路空闲就发送，否则保存并等待。</p>
<ol>
<li>交换机可以为每个数据包单独做决定，不需要保留额外的数据包，它只需要负责转发。
<ul>
<li>例如语音电话由多个连续的数据包组成，它们属于同一组通信，将这种数据包序列称为流 (flow)。</li>
<li>由于各个数据包是独立的，所以交换机不需要处理整个流。</li>
<li>交换机不需要担心添加或删除流的状态，交换机会在合适的时候完成转发。交换机不会存储状态信息，因为交换机必须快速，将该状态存储到高速内存中的代价昂贵。</li>
<li>如果手机发出一个 web 请求后没电了，交换机将保存请求的 &ldquo;per-flow state&rdquo;，但如果其中一个节点创建状态失败后，交换机需要知道如何清除它，否则你可能面临被一堆流量占内存的情况。对于数据报切换来说，交换机不存储 &ldquo;per-flow state&rdquo;，如果手机没电了，交换机只会停止接收来自它的数据包。</li>
<li>因此，交换机在功能上就独立于发送流量的计算机。</li>
</ul>
</li>
<li>更有效的共享链接
<ul>
<li>考虑到一点，用户使用的网络服务都是突发性的，不会以固定的频率发送和接收特定的数据。</li>
<li>将所有流量都视作数据包，可以做到：假如 A 在阅读网页，B 在加载网页，路由器可以将A的容量都放B的数据包。如果 A 和 B 都在使用，那么路由器在二者之间共享。</li>
<li>采取单一资源并以概率方式在多个用户之间共享的想法被称为统计复用。每个用户都会获得基于多少用户正在使用的资源的统计份额。例如 A 正在阅读，B 就可以使用所有的链路，如果两个人都在加载页面，那都得到一半的链路容量。</li>
</ul>
</li>
</ol>
<h3 id="分层原则">分层原则</h3>
<p>就是模块化，每层只为它的上层，抽象接口。</p>
<h3 id="封装原则">封装原则</h3>
<p>封装是将分层和数据报切换结合发生的结果。</p>
<p>发送一个数据包时，每个数据包都包含来自多个层的数据。例如 TCP 段位于 IP 数据包内，而 IP 数据包又会在以太网帧内。封装就是这个原则。</p>
<p>关于封装的数据包，有两种画法:</p>
<p></p>
<p>第一种是硬件的视角，header 在右边，右边也是第一位，离开交换机的第一位是最右边的位。</p>
<p></p>
<p>第二种是软件的视角，header 在左边，许多文档和协议都这么画，这么画的出发点是数据包的开头是地址0，而左边是地址0，所以 header 在左边。</p>
<h4 id="vpn-服务示例">VPN 服务示例</h4>
<p>VPN (Virtual Private Network)</p>
<p>当你与互联网通信并发送 IP 数据包而不是正常发送它们时，它们会被发送到 VPN 连接中，以便 IP 数据包到达私有网络内。</p>
<p>在这种路线中，HTTP 被 TCP 封装，TCP 被 IP 封装，IP 被 TLS 封装，而 TLS 再被 TCP 封装，这个 TCP 被 IP 封装。</p>
<p>外层的 TCP/IP 都是用于到达 VPN 网关而用，内部的 TCP/IP 用来访问具体的 web server。</p>]]></description>
</item>
</channel>
</rss>
