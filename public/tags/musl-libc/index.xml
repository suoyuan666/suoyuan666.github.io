<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Musl Libc - Tag - 索元的博客</title>
        <link>http://localhost:1313/tags/musl-libc/</link>
        <description>Musl Libc - Tag - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Mon, 07 Apr 2025 01:42:21 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/musl-libc/" rel="self" type="application/rss+xml" /><item>
    <title>musl libc 阅读记录: malloc</title>
    <link>http://localhost:1313/posts/musl_malloc/</link>
    <pubDate>Mon, 07 Apr 2025 01:42:21 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/musl_malloc/</guid>
    <description><![CDATA[<h1 id="musl-libc-中-malloc-的实现">musl libc 中 malloc 的实现</h1>
<p>本文说的 musl libc 是 musl libc 1.25，截止到 2025 年 4 月 6 日，该版本依旧是最新版。</p>
<h2 id="介绍">介绍</h2>
<p>malloc 是 C 语言中用于在内存中动态分配内存块的标准库函数</p>
<p>musl libc 的 malloc 默认使用的是 src/malloc/mallocng 文件夹下的实现，在 configure 脚本中可以看到:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">srcdir</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">prefix</span><span class="o">=</span>/usr/local/musl
</span></span><span class="line"><span class="cl"><span class="nv">exec_prefix</span><span class="o">=</span><span class="s1">&#39;$(prefix)&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">bindir</span><span class="o">=</span><span class="s1">&#39;$(exec_prefix)/bin&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">libdir</span><span class="o">=</span><span class="s1">&#39;$(prefix)/lib&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">includedir</span><span class="o">=</span><span class="s1">&#39;$(prefix)/include&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">syslibdir</span><span class="o">=</span><span class="s1">&#39;/lib&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">tools</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">tool_libs</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">build</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">target</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">optimize</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">debug</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">warnings</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">shared</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">static</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">wrapper</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">gcc_wrapper</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">clang_wrapper</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">malloc_dir</span><span class="o">=</span>mallocng</span></span></code></pre></div></div>
<p>这些都是默认的选项，其中 <code>malloc_dir</code> 被指定为 mallocng。该脚本支持 <code>--with-malloc=</code> 指定 musl libc 的另一个 malloc 实现</p>
<h2 id="malloc-实现">malloc 实现</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">malloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">size_overflows</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint32_t</span> <span class="n">mask</span><span class="p">,</span> <span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">ctr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">MMAP_THRESHOLD</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">wrlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nf">step_seq</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">			<span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">sc</span> <span class="o">=</span> <span class="nf">size_to_class</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">rdlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// use coarse size classes initially when there are not yet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// any groups of desired size. this allows counts of 2 or 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to be allocated at first rather than having to start with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 7 or 5, the min counts for even size classes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&gt;=</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&lt;</span><span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">!=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">sc</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if a new group may be allocated, count it toward
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// usage in deciding if we can use coarse class.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">avail_mask</span>
</span></span><span class="line"><span class="cl">		    <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">freed_mask</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="n">usage</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">usage</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">sc</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">mask</span> <span class="o">=</span> <span class="n">g</span> <span class="o">?</span> <span class="n">g</span><span class="o">-&gt;</span><span class="nl">avail_mask</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span> <span class="o">=</span> <span class="n">mask</span><span class="o">&amp;-</span><span class="n">mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">RDLOCK_IS_EXCLUSIVE</span> <span class="o">||</span> <span class="o">!</span><span class="n">MT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">a_cas</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">)</span><span class="o">!=</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">idx</span> <span class="o">=</span> <span class="nf">a_ctz_32</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">upgradelock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">idx</span> <span class="o">=</span> <span class="nf">alloc_slot</span><span class="p">(</span><span class="n">sc</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">success</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctr</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">enframe</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ctr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>上面就是 malloc 的具体实现了，函数上来先判断了申请的内存是否超出了能申请的上界，如果确实超过，就返回 0。</p>
<p>之后则是经典的判断临界点了，它会判断 <code>n</code> 是否超过了 <code>MMAP_THRESHOLD</code> 宏，这个宏的值是 <code>131051</code>，也就是 <code>0x1ffec</code>，所以接下来有分两路，<code>n</code> 的值是否大于 <code>MMAP_THRESHOLD</code>。</p>
<h3 id="如果-n-大于-mmap_threshold">如果 <code>n</code> 大于 <code>MMAP_THRESHOLD</code></h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">wrlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nf">step_seq</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">goto</span> <span class="n">success</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这是全部代码逻辑，如果你有点听说过 malloc 的实现，那么对这段可能有点眼熟，大概就是分配空间，填充元数据，之后跳到统一处理函数的工作。</p>
<p>这里申请内存的部分就是这两句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这里计算了申请大小+元数据的大小，之后使用 <code>mmap</code> 分配一块内存区域。之后就涉及到了元数据的分配</p>
<h4 id="元数据的分配">元数据的分配</h4>
<p>元数据的分配，需要知道以下几个数据结构</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="err">```</span><span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">prev</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">group</span> <span class="o">*</span><span class="n">mem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">volatile</span> <span class="kt">int</span> <span class="n">avail_mask</span><span class="p">,</span> <span class="n">freed_mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">last_idx</span><span class="p">:</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">freeable</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">sizeclass</span><span class="p">:</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">maplen</span><span class="p">:</span><span class="mi">8</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="o">-</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta_area</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">check</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta_area</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">nslots</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="n">slots</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">malloc_context</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef PAGESIZE
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>	<span class="kt">size_t</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>	<span class="kt">int</span> <span class="n">init_done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">free_meta_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">avail_meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">avail_meta_count</span><span class="p">,</span> <span class="n">avail_meta_area_count</span><span class="p">,</span> <span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta_area</span> <span class="o">*</span><span class="n">meta_area_head</span><span class="p">,</span> <span class="o">*</span><span class="n">meta_area_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">active</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">usage_by_class</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">unmap_seq</span><span class="p">[</span><span class="mi">32</span><span class="p">],</span> <span class="n">bounces</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">seq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="n">brk</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>分配函数如下:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="nf">alloc_meta</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">init_done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef PAGESIZE
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">pagesize</span> <span class="o">=</span> <span class="nf">get_page_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">secret</span> <span class="o">=</span> <span class="nf">get_random_secret</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">init_done</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">PGSZ</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">4096</span><span class="p">)</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">m</span> <span class="o">=</span> <span class="nf">dequeue_head</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">.</span><span class="n">free_meta_head</span><span class="p">)))</span> <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">&amp;&amp;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">uintptr_t</span> <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">need_guard</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="nf">brk</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// some ancient kernels returned _ebss
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// instead of next page as initial brk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+=</span> <span class="o">-</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nf">brk</span><span class="p">(</span><span class="n">new</span><span class="p">)</span> <span class="o">!=</span> <span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="n">need_guard</span><span class="p">)</span> <span class="nf">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="n">PROT_NONE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="n">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">new</span> <span class="o">-</span> <span class="n">pagesize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			    <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">			<span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>如果不考虑一些特殊情况的话，简单来看，那就是初始化完毕的 <code>ctx</code>，查询是否有 freelist 的存在，有就从这里分配，如果没有就看自己是否还可以分配，可以的话就通过下边这段代码获取新的元数据存储区</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">m</span><span class="p">;</span></span></span></code></pre></div></div>
<p>所以这里存在两个特殊情况，一个是这个 <code>ctx</code> 的初始化，另一个就是 <code>ctx.avail_meta_count</code> 为 0 的情况。</p>
<p><strong>如果 <code>ctx.avail_meta_count</code> 为 0</strong></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">&amp;&amp;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uintptr_t</span> <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="nf">brk</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// some ancient kernels returned _ebss
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// instead of next page as initial brk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+=</span> <span class="o">-</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">brk</span><span class="p">(</span><span class="n">new</span><span class="p">)</span> <span class="o">!=</span> <span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">need_guard</span><span class="p">)</span> <span class="nf">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">PROT_NONE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="n">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">new</span> <span class="o">-</span> <span class="n">pagesize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span></span></span></code></pre></div></div>
<p>上面这些就是处理逻辑了。</p>
<p>在 <code>ctx.avail_meta_area_count</code> 还不为 0 的时候，就不需要考虑那两个 <code>if</code> 判断，先看如果 <code>ctx</code> 的 <code>meta_area</code> 还有空位的情况。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span></span></span></code></pre></div></div>
<p>如果有空位，就分 4096 字节过去，然后判断 <code>ctx.meta_area_tail</code> 这个尾节点是否存在，存在的话直接追加，不存在把拿到的这个地址设为头节点。</p>
<p>之后就是剩余元信息的计数的计算: <code>(4096 - sizeof(struct meta_area)) / sizeof *m</code></p>
<p>这里剪去 <code>sizeof(struct meta_area)</code> 的原因是为了把 <code>slots</code> 之前的那些数据减掉，这里涉及到一个较为冷门概念 —— 柔性数组，这种不指定存储个数的数组被定义为结构体定义的最后一个成员的时候，<code>sizeof</code> 计算是不会算上这个数组的大小，这种数组需要运行时动态分配空间，也就是现在这样。</p>
<p>接下来就是 <code>ctx.avail_meta_area_count</code> 为 0 的情况了。</p>
<p>先看第二个 if 判断。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这段代码很容易看懂，就是分配一块内存给 <code>ctx.avail_meta_areas</code> 使用。</p>
<p>书接上回，回到 <code>malloc()</code> 那里，在 <code>g</code> 被刚刚讲的 <code>alloc_meta()</code> 函数分配空间之后，就到了写这次 <code>malloc()</code> 元数据的部分</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">goto</span> <span class="n">success</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里的 needed + 4095 是为了向上取整。</p>
<p>等元数据写完后，就跳到了 <code>success</code> 这个 label</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nl">success</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctr</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">enframe</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ctr</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这里值得一说的就是 <code>enframe()</code> 了</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">enframe</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">stride</span> <span class="o">=</span> <span class="nf">get_stride</span><span class="p">(</span><span class="n">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">slack</span> <span class="o">=</span> <span class="p">(</span><span class="n">stride</span><span class="o">-</span><span class="n">IB</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="o">/</span><span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span> <span class="o">+</span> <span class="n">stride</span><span class="o">*</span><span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">p</span><span class="o">+</span><span class="n">stride</span><span class="o">-</span><span class="n">IB</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// cycle offset within slot to increase interval to address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// reuse, facilitate trapping double-free.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">off</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">?</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">ctr</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">off</span> <span class="o">&gt;</span> <span class="n">slack</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">m</span> <span class="o">=</span> <span class="n">slack</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span> <span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">;</span> <span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">off</span> <span class="o">&amp;=</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">off</span> <span class="o">&gt;</span> <span class="n">slack</span><span class="p">)</span> <span class="n">off</span> <span class="o">-=</span> <span class="n">slack</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">assert</span><span class="p">(</span><span class="n">off</span> <span class="o">&lt;=</span> <span class="n">slack</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">off</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// store offset in unused header at offset zero
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// if enframing at non-zero offset.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span><span class="o">&lt;&lt;</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span> <span class="o">+=</span> <span class="n">UNIT</span><span class="o">*</span><span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// for nonzero offset there is no permanent check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// byte, so make one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span><span class="p">)</span><span class="o">/</span><span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">set_size</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>该函数的返回值当然不难猜出，就是用户最终得到的地址，所以函数就是根据传入的 <code>g</code> 等参数，计算一个用户可访问的地址，并将其返回。</p>
<p>现在还有一个问题，为什么 <code>mmap</code> 分配的时候，分配的是 <code>n + IB + UNIT</code> 而不是 <code>n</code>。</p>
<p>一方面，可以从代码中看出来，在该函数的开头有这样一句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span> <span class="o">+</span> <span class="n">stride</span><span class="o">*</span><span class="n">idx</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这个 <code>p</code> 是最终要返回的值，可以看出 <code>p</code> 是用 <code>g-&gt;mem-&gt;storage</code> 再加上偏移量得到的，所以多申请的 <code>IB + UNIT</code> 大概率和 <code>g-&gt;mem</code> 有关</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">group</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="nl">active_idx</span><span class="p">:</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="n">pad</span><span class="p">[</span><span class="n">UNIT</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">storage</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这个结构体就是 <code>g-&gt;mem</code> 中 <code>mem</code> 的类型定义。其中 <code>pad</code> 占 7 字节，加上之前的一个指针和一个位域，总共占 16 字节，但 <code>IB</code> 是 4，<code>UNIT</code> 是 16。</p>
<p>这个 <code>pad</code> 成员的作用就是把 <code>struct group</code> 的大小填充为 16 字节，和 <code>UNIT</code> 一致。</p>
<h3 id="如果-n-小于-mmap_threshold">如果 <code>n</code> 小于 <code>MMAP_THRESHOLD</code></h3>
<p>对于只分配一小块内存的情况， malloc 的处理逻辑如下所示</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">sc</span> <span class="o">=</span> <span class="nf">size_to_class</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">rdlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// use coarse size classes initially when there are not yet
</span></span></span><span class="line"><span class="cl"><span class="c1">// any groups of desired size. this allows counts of 2 or 3
</span></span></span><span class="line"><span class="cl"><span class="c1">// to be allocated at first rather than having to start with
</span></span></span><span class="line"><span class="cl"><span class="c1">// 7 or 5, the min counts for even size classes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&gt;=</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&lt;</span><span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">!=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">sc</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if a new group may be allocated, count it toward
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// usage in deciding if we can use coarse class.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">avail_mask</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">freed_mask</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">usage</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">usage</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sc</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mask</span> <span class="o">=</span> <span class="n">g</span> <span class="o">?</span> <span class="n">g</span><span class="o">-&gt;</span><span class="nl">avail_mask</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">first</span> <span class="o">=</span> <span class="n">mask</span><span class="o">&amp;-</span><span class="n">mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">RDLOCK_IS_EXCLUSIVE</span> <span class="o">||</span> <span class="o">!</span><span class="n">MT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="nf">a_cas</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">)</span><span class="o">!=</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="nf">a_ctz_32</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">upgradelock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="nf">alloc_slot</span><span class="p">(</span><span class="n">sc</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span></span></span></code></pre></div></div>
<p>TODO: 等待更新</p>
]]></description>
</item>
<item>
    <title>在 Gentoo Linux 上尝试 musl libc &#43; llvm 环境</title>
    <link>http://localhost:1313/posts/gentoo_musl_llvm/</link>
    <pubDate>Mon, 05 Aug 2024 09:34:33 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/gentoo_musl_llvm/</guid>
    <description><![CDATA[<p>尝试使用选择了 musl/llvm 的 profile 的 Gentoo Linux 作为日常使用的桌面操作系统</p>
<h1 id="在-gentooo-linux-上尝试-musl-libc--llvm-环境">在 Gentooo Linux 上尝试 musl libc + llvm 环境</h1>
<h2 id="背景">背景</h2>
<p>以前就有听说过 musl libc 了，一个体积小，并且完全按照标准实现的 libc，但一直没想过使用这个 libc。前几天看到 Gentoo Linux 对于 musl libc 有很多 profile 可以使用（不过都是实验性的，而非 stable）。</p>
<p>一定程度上这完成了<a href="../gentooinstall_ng/" rel="">之前安装 Gentoo Linux 的文章</a>中的目标:</p>
<blockquote>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
</blockquote>
<p>之前那次我没有实现这些目标，只是使用了 openrc，这次我使用这个 profile 确实实现了这一点，因为 systemd 依赖于 glibc，所以我选择使用 openrc，默认编译工具链就是 clang/llvm，甚至 C++ 标准库使用的也是提供的 <a href="https://libcxx.llvm.org/" target="_blank" rel="noopener noreffer ">libc++</a>，因为默认用 clang/llvm 编译，所以我直接默认就开启了 thinlto。</p>
<h2 id="安装前">安装前</h2>
<p><a href="https://www.etalabs.net/compare_libcs.html" target="_blank" rel="noopener noreffer ">musl libc 的作者提供了一个 musl uClibc glibc dietlibc 之间的比较</a>，musl libc 体积上确实小，不过部分库函数的性能不如 glibc。并且由于 glibc 中存在 GNU 的一些扩展，导致 musl libc 和 glibc 不能完全兼容，一些依赖于 glibc 的闭源发行二进制软件包的程序可能无法运行在 musl libc 上，不过可以尝试使用flatpak 运行。</p>
<p>Chromium 浏览器无法使用 musl libc 编译，electorn 的也无法使用。一定程度上，这迫使一直用 Visual Studio Code 的我开始使用 neovim。</p>
<p>musl libc 支持的 locale 还不是很多：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">  [1]   C
</span></span><span class="line"><span class="cl">  [2]   C.UTF-8
</span></span><span class="line"><span class="cl">  [3]   sr_RS.UTF-8
</span></span><span class="line"><span class="cl">  [4]   cs_CZ.UTF-8
</span></span><span class="line"><span class="cl">  [5]   nb_NO.UTF-8
</span></span><span class="line"><span class="cl">  [6]   de_DE.UTF-8
</span></span><span class="line"><span class="cl">  [7]   sv_SE.UTF-8
</span></span><span class="line"><span class="cl">  [8]   nl_NL.UTF-8
</span></span><span class="line"><span class="cl">  [9]   fr_FR.UTF-8
</span></span><span class="line"><span class="cl">  [10]  fi_FI.UTF-8
</span></span><span class="line"><span class="cl">  [11]  en_GB.UTF-8
</span></span><span class="line"><span class="cl">  [12]  it_IT.UTF-8
</span></span><span class="line"><span class="cl">  [13]  pt_PT.UTF-8
</span></span><span class="line"><span class="cl">  [14]  en_US.UTF-8 *
</span></span><span class="line"><span class="cl">  [15]  de_CH.UTF-8
</span></span><span class="line"><span class="cl">  [16]  es_ES.UTF-8
</span></span><span class="line"><span class="cl">  [17]  pt_BR.UTF-8
</span></span><span class="line"><span class="cl">  [18]  ru_RU.UTF-8</span></span></code></pre></div></div>
<p>这里没有 zh_CN.UTF-8。</p>
<p>musl libc 设置时区的方式也会有所不同，需要在 <strong>/etc/env.d/00musl</strong> 文件中写好 <code>TZ</code> 环境变量。</p>
<p>以上关于 locale 和时区的设置，<a href="https://wiki.gentoo.org/wiki/Musl_usage_guide" target="_blank" rel="noopener noreffer ">Gentoo wiki</a> 都有说明。在 <a href="https://wiki.gentoo.org/wiki/Musl_porting_notes" target="_blank" rel="noopener noreffer ">Gentoo 的另一篇 wiki</a> 记录了一些常见的 musl libc 编译可能遇到的问题（即编译那些一定程度上依赖于 glibc 的软件）。</p>
<h2 id="安装时遇到的问题">安装时遇到的问题</h2>
<p>一开始装完后，进入 grub，进入 openrc 后就没后续了，之后重新装一编就没有遇到这个问题。不好评价这个问题的原因。</p>
<p>不知道是不是我这个内核版本的原因，我用 openrc 从来没有正常关机过，直接死在那里，后来我换到 stable 内核就没有这个问题了。</p>
<p>firefox-115 esr 版本无法正常编译，会报一些错误类似: <code>ld.lld: error: undefined hidden symbol</code>。详情可以参考 GitHub 上 <a href="https://github.com/llvm/llvm-project/issues/79027" target="_blank" rel="noopener noreffer ">LLVM 的 issue</a> 以及 <a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=276746" target="_blank" rel="noopener noreffer ">FreeBSD Bugzilla</a> 上的讨论。而且 <code>rust</code> 编译的部分也会出现问题。</p>
<p>我参考了 FreeBSD 上的解法，首先是 <code>rust</code> 那里，根据 FreeBSD Bugzilla 上的讨论，原因是:</p>
<blockquote>
<p>rust-bindgen uses some tricks to generate bindings for C++ components, but gets confused by some new constructs in libc++ 18 headers, causing it to generate faulty binding code.</p>
</blockquote>
<p>该问题已经被<a href="https://hg.mozilla.org/mozilla-central/rev/9e96d1447f6c" target="_blank" rel="noopener noreffer ">今年 1 月份的补丁</a> 解决，对此我选择不用 esr 版本，用 stable 的版本。</p>
<p>其次对于 undefined hidden symbol 的问题，则是为 firefox 的编译单独创建一个环境。在 <strong>/etc/portage/env/</strong> 目录下创建一个 <strong>compiler-clang-firefox</strong> 文件，文件内容是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">COMMON_FLAGS=&#34;-O2 -march=x86-64-v3 -pipe -fvisibility=hidden -fvisibility-inlines-hidden&#34;
</span></span><span class="line"><span class="cl">CLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CC=&#34;clang&#34;
</span></span><span class="line"><span class="cl">CXX=&#34;clang++&#34;
</span></span><span class="line"><span class="cl">CPP=&#34;clang-cpp&#34;
</span></span><span class="line"><span class="cl">AR=&#34;llvm-ar&#34;
</span></span><span class="line"><span class="cl">NM=&#34;llvm-nm&#34;
</span></span><span class="line"><span class="cl">RANLIB=&#34;
</span></span><span class="line"><span class="cl">llvm-ranlib&#34;</span></span></code></pre></div></div>
<p>也就是 CXXFLAGS 加上 <code>-fvisibility=hidden -fvisibility-inlines-hidden</code></p>
<p>新建 <strong>/etc/portage/package.env/</strong> 目录，在其中新建一个文件写入:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">www-client/firefox compiler-clang-firefox</span></span></code></pre></div></div>
<p>这样就可以使用指定的编译环境编译了。</p>
<p>对于 <a href="https://packages.gentoo.org/packages/dev-libs/darts" target="_blank" rel="noopener noreffer ">dev-libs/darts</a> 来说，由于 <strong>src/lexicon.h</strong> 中的 <code>std::random_shuffle</code> 在 <code>std</code> 中已经不存在，<a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" target="_blank" rel="noopener noreffer ">cppreference</a> 中也可以看到，该函数 从 C++ 17 开始就废除了。所以我给它写了个 patch。</p>
<p>在 <strong>/etc/portage/</strong> 目录下新建一个 <strong>patches</strong> 的文件夹，然后在 <strong>patches</strong> 里新建 <strong>dev-libs/darts</strong> 这两级文件夹，之后把补丁放进去，安装的时候会自动 patch。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl"><span class="gh">diff --git a/src/lexicon.h b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gh">index a2935f4..2a30d1b 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+// clang-format off
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #ifndef DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl"> #define DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">@@ -7,6 +8,7 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span> #include &lt;ctime&gt;
</span></span><span class="line"><span class="cl"> #include &lt;iostream&gt;
</span></span><span class="line"><span class="cl"> #include &lt;limits&gt;
</span></span><span class="line"><span class="cl"><span class="gi">+#include &lt;random&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;vector&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> #include &#34;./mersenne-twister.h&#34;
</span></span><span class="line"><span class="cl"><span class="gu">@@ -58,9 +60,9 @@ class Lexicon {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>   }
</span></span><span class="line"><span class="cl">   // randomize() shuffles keys. Values are not affected.
</span></span><span class="line"><span class="cl">   void randomize() {
</span></span><span class="line"><span class="cl"><span class="gd">-    Darts::MersenneTwister mt(
</span></span></span><span class="line"><span class="cl"><span class="gd">-        static_cast&lt;Darts::MersenneTwister::int_type&gt;(std::time(NULL)));
</span></span></span><span class="line"><span class="cl"><span class="gd">-    std::random_shuffle(keys_.begin(), keys_.end(), mt);
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    std::random_device rd;
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::mt19937 g(rd());
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::shuffle(keys_.begin(), keys_.end(), g);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   void split();
</span></span></code></pre></div></div>
<p>我开头有 <code>// clang-format off</code> 的原因是我的 neovim 会保存时候自动调用 clang-format 格式化。</p>
<p>如果遇到了 Hyprland 0.42 编译失败的情况，报错是 <code>copy_if</code> 等函数没有找到，可以使用我找到的这个 patch</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl">From eb42adc4c090918ad6be9fcb24066da8cdfd9bd0 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Serenity Braesch &lt;Serenity.Braesch@proton.me&gt;
</span></span><span class="line"><span class="cl">Date: Sat, 24 Aug 2024 01:53:08 -0600
</span></span><span class="line"><span class="cl">Subject: [PATCH] Fix missing include needed by clang
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">---
</span></span></span><span class="line"><span class="cl"><span class="gs"></span> src/managers/XCursorManager.cpp | 1 +
</span></span><span class="line"><span class="cl"> 1 file changed, 1 insertion(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">diff --git a/src/managers/XCursorManager.cpp b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gh">index 7fc21a28..1e7ca535 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+#include &lt;algorithm&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;cstring&gt;
</span></span><span class="line"><span class="cl"> #include &lt;dirent.h&gt;
</span></span><span class="line"><span class="cl"> #include &lt;filesystem&gt;
</span></span><span class="line"><span class="cl"><span class="gd">-- 
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>2.44.2
</span></span></code></pre></div></div>
<p>这已经被 <a href="https://github.com/hyprwm/Hyprland/pull/7490" target="_blank" rel="noopener noreffer ">合并到 Hyprland 主线</a> 里了，等下一个版本应该就没这个事情了。</p>
<h2 id="后记">后记</h2>
<p>我没有尝试什么桌面环境，本身我这台计算机的性能就没强到哪去，所以我安装了 sway，还算正常。后来还是用了 Hyprland，xdg-desktop-portal-hyprland 这个软件是 guru 仓库内的，好家伙。</p>]]></description>
</item>
<item>
    <title>musl libc 阅读记录: printf</title>
    <link>http://localhost:1313/posts/musl_libc_printf/</link>
    <pubDate>Sat, 22 Apr 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/musl_libc_printf/</guid>
    <description><![CDATA[<p>不自量力阅读 musl libc的记录</p>
<h1 id="printf">printf</h1>
<h2 id="printf-function">printf function</h2>
<p>函数原型</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span></span></span></code></pre></div></div>
<p>这里是使用了可变参数，<code>printf()</code>函数的大部分也是在对可变参数做处理，把处理好的结果传给另一个函数。关于处理可变参数的那些函数的作用可以在Linux manual pages中查到。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ man <span class="m">3</span> va_list
</span></span><span class="line"><span class="cl">$ man <span class="m">3</span> stdarg</span></span></code></pre></div></div>
<blockquote>
<p>The va_start() macro initializes ap for subsequent use by va_arg() and va_end(), and must be called first.</p>
</blockquote>
<p>处理了可变参数后，随即就调用了<code>vfprintf()</code>函数，通过传参的方式把处理的结果传过去了。</p>
<h2 id="vfprintf-function">vfprintf function</h2>
<p>函数原型</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">vfprintf</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">f</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fmt</span><span class="p">,</span> <span class="n">va_list</span> <span class="n">ap</span><span class="p">);</span></span></span></code></pre></div></div>
<p>函数内部首先定义了一批局部变量，随即使用<code>va_copy()</code>去复制一个ap出来，随即使用<code>printf_core()</code>向文件描述符0写数据从而测试参数是否存在什么问题。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">va_copy</span><span class="p">(</span><span class="n">ap2</span><span class="p">,</span> <span class="n">ap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">printf_core</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">fmt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ap2</span><span class="p">,</span> <span class="n">nl_arg</span><span class="p">,</span> <span class="n">nl_type</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">va_end</span><span class="p">(</span><span class="n">ap2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<hr>
<p>关于我说的这个第一次<code>printf_core()</code>函数的作用，有人发邮件问过musl libc的开发者，开发者给出的回复是：</p>
<blockquote>
<p>First call to printf_core() checks to see if there are any major problems with the format string.</p>
</blockquote>
<p>当说到第二次的调用也可以做到check的效果时，开发者回复：</p>
<blockquote>
<p>POSIX says that to the extent possible, all functions are supposed to either fail with no side effects or succeed with side effects. There are some functions that can fail with side effects, but we make some effort to minimize that. By testing the format string first, if it is broken, we can fail without side effects. If only the second call tested that, you would get a partial output before failure.</p>
</blockquote>
<hr>
<p>至于为什么要使用<code>va_copy()</code>再整个va_list出来，我认为大抵是为了保证函数内部的封闭性，我这里说的封闭性就是尽量不使用外部的变量，va_list传进来貌似是指针形式传递进来的，为了不影响到外部的变量，故而复制一份出来。</p>
<p>之后便是给f上个锁，再保存一下之前的错误位，然后把错误位设置为0</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">FLOCK</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">olderr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">F_ERR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">F_ERR</span><span class="p">;</span></span></span></code></pre></div></div>
<p>而后看f的buf size是否为0，为0的话就临时把之前定义好的intelnal_buf作为f的buf使用。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">buf_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">saved_buf</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">f</span><span class="o">-&gt;</span><span class="n">buf</span> <span class="o">=</span> <span class="n">internal_buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">f</span><span class="o">-&gt;</span><span class="n">buf_size</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="n">internal_buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wbase</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span></span></span></code></pre></div></div>
<p>之后再做一个判断，就要开始真正往stdout写数据了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">&amp;&amp;</span> <span class="nf">__towrite</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="n">ret</span> <span class="o">=</span> <span class="nf">printf_core</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">fmt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ap2</span><span class="p">,</span> <span class="n">nl_arg</span><span class="p">,</span> <span class="n">nl_type</span><span class="p">);</span></span></span></code></pre></div></div>
<p>之后就是对f原本buf的恢复</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">saved_buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="nf">write</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span><span class="p">)</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="n">buf</span> <span class="o">=</span> <span class="n">saved_buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="n">buf_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wbase</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>然后再判一遍f的error，并恢复错误位</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">ferror</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">olderr</span><span class="p">;</span></span></span></code></pre></div></div>
<p>最后解开f的锁，结束掉ap2，然后return。</p>
<h3 id="printf_core-function">printf_core function</h3>
<p>函数原型</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">printf_core</span><span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="n">va_list</span> <span class="o">*</span><span class="n">ap</span><span class="p">,</span> <span class="k">union</span> <span class="n">arg</span> <span class="o">*</span><span class="n">nl_arg</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">nl_type</span><span class="p">);</span></span></span></code></pre></div></div>
<p>首先依旧是定义了一批局部变量，然后开始循环处理参数</p>
<p>首先判断l和cnt时候会造成整数溢出</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">INT_MAX</span> <span class="o">-</span> <span class="n">cnt</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span></span></span></code></pre></div></div>
<p>然后更新cnt，并且判断s是否为0</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">cnt</span> <span class="o">+=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="n">s</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span></span></span></code></pre></div></div>
<p>之后是处理**%%**这样的情况</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">s</span><span class="p">;</span> <span class="o">*</span><span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">s</span><span class="o">!=</span><span class="sc">&#39;%&#39;</span><span class="p">;</span> <span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">s</span><span class="p">;</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;%&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;%&#39;</span><span class="p">;</span> <span class="n">z</span><span class="o">++</span><span class="p">,</span> <span class="n">s</span><span class="o">+=</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">z</span><span class="o">-</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">INT_MAX</span><span class="o">-</span><span class="n">cnt</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">l</span> <span class="o">=</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="nf">out</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span></span></span></code></pre></div></div>
<p>随后是对参数位置的处理</p>
<p>对此，Linux manual pages上是这么写的：</p>
<blockquote>
<p>By default, the arguments are used in the order given, where each &lsquo;*&rsquo; (see Field width and Precision  below)  and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).  One can also specify explicitly which argument is taken, at each place where an argument is required, by writing &ldquo;%m$&rdquo; instead of &lsquo;%&rsquo; and &ldquo;*m$&rdquo; instead of &lsquo;*&rsquo;, where the decimal integer m denotes the position in the argument list of the desired argument, indexed  starting from 1.</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">isdigit</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">l10n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">argpos</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">s</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">argpos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里的l10n变量是表示是否启用本地化</p>
<p>之后是对flags的读取</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">fl</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="o">*</span><span class="n">s</span><span class="o">-</span><span class="sc">&#39; &#39;</span><span class="o">&lt;</span><span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">FLAGMASK</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1U</span><span class="o">&lt;&lt;*</span><span class="n">s</span><span class="o">-</span><span class="sc">&#39; &#39;</span><span class="p">));</span> <span class="n">s</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">fl</span> <span class="o">|=</span> <span class="mi">1U</span><span class="o">&lt;&lt;*</span><span class="n">s</span><span class="o">-</span><span class="sc">&#39; &#39;</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里的FLAGMASK是define的宏：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define FLAGMASK (ALT_FORM | ZERO_PAD | LEFT_ADJ | PAD_POS | MARK_POS | GROUPED)</span></span></span></code></pre></div></div>
<p>其中像ALT_FORM这样的也都是define的宏，整个展开就是：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define FLAGMASK ((1U &lt;&lt; &#39;#&#39; - &#39; &#39;) | (1U &lt;&lt; &#39;0&#39; - &#39; &#39;) | (1U &lt;&lt; &#39;-&#39; - &#39; &#39;) | (1U &lt;&lt; &#39; &#39; - &#39; &#39;) |
</span></span></span><span class="line"><span class="cl"><span class="cp"></span> <span class="p">(</span><span class="mi">1U</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;+&#39;</span> <span class="o">-</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1U</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">-</span> <span class="sc">&#39; &#39;</span><span class="p">))</span></span></span></code></pre></div></div>
<p>然后读取field width</p>
<blockquote>
<p>An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the left-adjustment flag has been given).  Instead of a decimal digit string one may write &ldquo;*&rdquo; or &ldquo;*m$&rdquo; (for some decimal integer  m)  to  specify that the field width is given in the next argument, or in the m-th argument, respectively, which must be of type int.</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">isdigit</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">l10n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span> <span class="n">nl_type</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">INT</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="n">w</span> <span class="o">=</span> <span class="n">nl_arg</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">].</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">s</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">l10n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">w</span> <span class="o">=</span> <span class="n">f</span> <span class="o">?</span> <span class="nf">va_arg</span><span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">goto</span> <span class="n">inval</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">w</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="n">fl</span><span class="o">|=</span><span class="n">LEFT_ADJ</span><span class="p">,</span> <span class="n">w</span><span class="o">=-</span><span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">w</span><span class="o">=</span><span class="nf">getint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span></span></span></code></pre></div></div>
<p>可以看到，除了精度，它还处理了改变参数顺序的一种方法，并通过三目运算符判断f时候为0来决定是做测试还是正常work，这样的处理在后面也有用到。</p>
<p>之后是处理精度</p>
<blockquote>
<p>An  optional  precision,  in the form of a period (&rsquo;.&rsquo;)  followed by an optional decimal digit string.  Instead of a decimal digit string one may write &ldquo;*&rdquo; or &ldquo;*m$&rdquo; (for some decimal integer m) to specify that the precision is given in the next argument, or in the m-th argument, respectively, which must be of type int.  If the  precision is given as just &lsquo;.&rsquo;, the precision is taken to be zero.</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">==</span><span class="sc">&#39;.&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">isdigit</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span> <span class="n">nl_type</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">INT</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="n">p</span> <span class="o">=</span> <span class="n">nl_arg</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">].</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">s</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">l10n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span> <span class="o">=</span> <span class="n">f</span> <span class="o">?</span> <span class="nf">va_arg</span><span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">s</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">goto</span> <span class="n">inval</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">xp</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">==</span><span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="nf">getint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">xp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">xp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>之后对处理format</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">st</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">OOB</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">))</span> <span class="k">goto</span> <span class="n">inval</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">ps</span><span class="o">=</span><span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">st</span><span class="o">=</span><span class="n">states</span><span class="p">[</span><span class="n">st</span><span class="p">]</span><span class="nf">S</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">st</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">STOP</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">)</span> <span class="k">goto</span> <span class="n">inval</span><span class="p">;</span></span></span></code></pre></div></div>
<p>states是一个二维数组，如果format没有经过修饰（只是d, f这样的）就不会有第二次循环，修饰了就会再次进入循环。</p>
<p>之后检查参数类型是否有效，并保存参数的值</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="o">==</span><span class="n">NOARG</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">argpos</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">inval</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">argpos</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span> <span class="n">nl_type</span><span class="p">[</span><span class="n">argpos</span><span class="p">]</span><span class="o">=</span><span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="n">arg</span><span class="o">=</span><span class="n">nl_arg</span><span class="p">[</span><span class="n">argpos</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="nf">pop_arg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">ap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>可以这里先判了一手，如果参数类型没啥问题再判断参数位置是否被设定过。</p>
<p>这里的<code>pop_arg()</code>函数就是读取参数到arg里。</p>
<p>之后判断这次调用只是做测试还是真的要打印，并且判一回f是否有问题</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">ferror</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span></span></span></code></pre></div></div>
<p>再做一些处理，再此之前先定义一波变量</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">z</span> <span class="o">=</span> <span class="n">buf</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;-+   0X0x&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">pl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span></span></span></code></pre></div></div>
<p>处理的是将ls, lc干成S, C
因为&rsquo;-&lsquo;和'0&rsquo;是互斥的，所以也要处理一下。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ps</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">t</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">)</span><span class="o">==</span><span class="mi">3</span><span class="p">)</span> <span class="n">t</span><span class="o">&amp;=~</span><span class="mi">32</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">fl</span> <span class="o">&amp;</span> <span class="n">LEFT_ADJ</span><span class="p">)</span> <span class="n">fl</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">ZERO_PAD</span><span class="p">;</span></span></span></code></pre></div></div>
<p>之后就是针对不同类型的处理了，由于类型太多，源码就不贴过来了，我也不准备都看一遍类型都是怎么处理的。</p>
<p>比如这里关于整数的处理</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;d&#39;</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;i&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">pl</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">i</span><span class="o">&gt;</span><span class="n">INTMAX_MAX</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">arg</span><span class="p">.</span><span class="n">i</span><span class="o">=-</span><span class="n">arg</span><span class="p">.</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fl</span> <span class="o">&amp;</span> <span class="n">MARK_POS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">prefix</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fl</span> <span class="o">&amp;</span> <span class="n">PAD_POS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">prefix</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="n">pl</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="sc">&#39;u&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="nf">fmt_u</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">i</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">xp</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">xp</span><span class="p">)</span> <span class="n">fl</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">ZERO_PAD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">arg</span><span class="p">.</span><span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">a</span><span class="o">=</span><span class="n">z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="nf">MAX</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span> <span class="o">+</span> <span class="o">!</span><span class="n">arg</span><span class="p">.</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">break</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里首先处理一波溢出的情况，然后就是对flag的处理。</p>
<p>switch那块完事了之后，回接着再做一些判断</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="p">)</span> <span class="n">p</span> <span class="o">=</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&gt;</span> <span class="n">INT_MAX</span><span class="o">-</span><span class="n">pl</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">&lt;</span> <span class="n">pl</span><span class="o">+</span><span class="n">p</span><span class="p">)</span> <span class="n">w</span> <span class="o">=</span> <span class="n">pl</span><span class="o">+</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">&gt;</span> <span class="n">INT_MAX</span><span class="o">-</span><span class="n">cnt</span><span class="p">)</span> <span class="k">goto</span> <span class="n">overflow</span><span class="p">;</span></span></span></code></pre></div></div>
<p>最后终于是要输出了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">pad</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">pl</span><span class="o">+</span><span class="n">p</span><span class="p">,</span> <span class="n">fl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">out</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">pl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">pad</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">pl</span><span class="o">+</span><span class="n">p</span><span class="p">,</span> <span class="n">fl</span><span class="o">^</span><span class="n">ZERO_PAD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">pad</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">out</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">pad</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">pl</span><span class="o">+</span><span class="n">p</span><span class="p">,</span> <span class="n">fl</span><span class="o">^</span><span class="n">LEFT_ADJ</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这次是针对各种flag和width的填充，当然在倒数第二步输出了真正的data。</p>
<h3 id="out-function">out function</h3>
<p><code>out()</code>就一行代码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nf">ferror</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="nf">__fwritex</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span></span></span></code></pre></div></div>
<p>可以看到这里调用了<code>__fwritex()</code>函数，这是一个hidden的函数，实现在<strong>fwrite.c</strong>中。</p>
<h3 id="__fwritex-function">__fwritex function</h3>
<p>首先再次做了一波判断</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">&amp;&amp;</span> <span class="nf">__towrite</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span></span></span></code></pre></div></div>
<p>其次先判断f是否有足够的空间容纳要写的数据，如果没有调用write syscall</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wend</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">wpos</span><span class="p">)</span> <span class="k">return</span> <span class="n">f</span><span class="o">-&gt;</span><span class="nf">write</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">);</span></span></span></code></pre></div></div>
<p>如果有足够的空间，就先判断一手f的行缓冲模式(line buf flag)是否设置，如果是行缓冲模式，会先把数据写到buf里，如果遇到了<code>\n</code>就写到f里，换行符后面的部分会通过调用<code>memcpy</code>写入buf里。如果不是行缓冲，就先把数据都写入buf里。</p>
<p>关于刚刚说的这个，可以在iSO C标准中找到，下面这个摘抄自我找的C17标准文档：</p>
<blockquote>
<p>When a stream is line buffered, characters are intended to be transmitted to or from the host environment as a block when a new-line character is encountered.</p>
</blockquote>
<p>行缓冲里有个关于n和i的判断，这里为什么有小于关系，下面是Linux manual pages</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ man <span class="m">2</span> write</span></span></code></pre></div></div>
<blockquote>
<p>Note that a successful write() may transfer fewer than count bytes. Such partial writes can occur for various reasons; for example, because there was insufficient space on  the  disk  device  to  write  all of the requested bytes, or because a blocked write() to a socket, pipe, or similar was interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.</p>
</blockquote>
<p>如果数据被写入了buf里面，就只能等到f被关闭的时候（如果源码中没有指定大抵就是程序退出的时候）就会把buf里的数据写出去</p>
<blockquote>
<p>A file may be disassociated from a controlling stream by closing the file. Output streams are flushed (any unwritten buffer contents are transmitted to the host environment) before the stream is disassociated from the file.</p>
</blockquote>
<blockquote>
<p>If the main function returns to its original caller, or if the exit function is called, all open files are closed (hence all output streams are flushed) before program termination.</p>
</blockquote>
<p>上面这段同样摘抄自我找的C17标准文档</p>]]></description>
</item>
</channel>
</rss>
