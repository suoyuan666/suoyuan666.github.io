<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>索元的博客</title>
        <link>http://localhost:1313/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Mon, 15 Sep 2025 08:44:40 &#43;0000</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>威胁建模: 你到底想做到什么</title>
    <link>http://localhost:1313/posts/threat_modeling/</link>
    <pubDate>Mon, 15 Sep 2025 08:44:40 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/threat_modeling/</guid>
    <description><![CDATA[<h1 id="威胁模型-你到底想做什么">威胁模型: 你到底想做什么</h1>
<p>事实上在我看来，威胁模型的提出就是为了平衡，因为很多时候大家是身不由己的，很难做到所谓绝对的安全隐私防范。威胁模型就是针对你个人安全和影视最具威胁的清单，我们应该只关注那些最有可能存在你身边的威胁。</p>
<h2 id="创建威胁模型">创建威胁模型</h2>
<p>威胁模型通常通过以下五个问题的答案得出:</p>
<ol>
<li>我想保护什么?</li>
<li>我想保护它免受谁的侵害?</li>
<li>我需要保护它的可能性有多大?</li>
<li>如果我失败了，后果会有多严重?</li>
<li>我愿意经历多少麻烦去避免出现潜在的后果?</li>
</ol>
<p><strong>1. 我想保护什么</strong></p>
<p><del>答案自然是想要保护的东西（这句话疑似废话</del> 你需要知道你想保护的资产到底是什么，邮件、个人位置、通信信息还是什么。</p>
<p><strong>2. 我想保护它免受谁的侵害</strong></p>
<p>你需要确定你的对手到底是谁，所谓是知己知彼，百战不殆。这里的对手可能是你认识的人，也可能是互联网上的&quot;黑客&quot;，或者是你的竞争对手之类。</p>
<p><strong>3. 我需要保护它的可能性有多大</strong></p>
<p>这里指的是你所保护的资产发生某些威胁的可能性，因为并不是所有威胁都很有可能发生（比如说房屋倒塌）。</p>
<p><strong>4. 如果我失败了，后果会有多严重</strong></p>
<p>你需要知道如果你想保护的资产最终被攻击者窃取，那么到底会发生什么。因为攻击者窃取到了数据后的行为并不完全一致，他可能简单的公开，或者敲诈勒索，或者是售卖&hellip;&hellip;这些都有可能。</p>
<p><strong>5. 我愿意经历多少麻烦去避免出现潜在的后果</strong></p>
<p>你为了保护你的资产到底能做到哪一步？需要认识到的是，几乎所有的防范手段都需要牺牲一些东西，所以这里指出的就是你到底能为了这份保护牺牲多少。</p>
<h2 id="常见威胁">常见威胁</h2>
<p>这里列出常见的威胁，用于帮助你回答上述问题</p>
<ul>
<li>匿名威胁
<ul>
<li>指威胁到你网络活动中对个人真实身份的保护</li>
</ul>
</li>
<li>针对性攻击
<ul>
<li>有&quot;黑客&quot;试图访问你的私密数据或设备</li>
</ul>
</li>
<li>供应链攻击
<ul>
<li>即不是你直接接触的硬件或软件有问题，而是这些东西的直接或间接依赖有问题</li>
</ul>
</li>
<li>被动攻击
<ul>
<li>针对所有用户的病毒等恶意软件的攻击</li>
</ul>
</li>
<li>服务提供商的监控
<ul>
<li>经典的例子就是一些网络流量中转时经过的节点，免受它们的监控</li>
</ul>
</li>
<li>大规模监控
<ul>
<li>这里指的是部分组织会进行的全体监控行为</li>
</ul>
</li>
</ul>
<p><strong>匿名威胁</strong></p>
<p>虽然匿名威胁经常被认为和隐私保护可以划成等号，但二者并不完全一致。</p>
<p>隐私指的是你不希望对方在使用或共享你的数据时肆无忌惮，而匿名要求你的网络行动要和真实身份完全分离。</p>
<p>很多人其实未必需要考虑到这一点，除非他是什么政治活动家、记者之类</p>
<p><strong>被动攻击</strong></p>
<p>这里就不得不提到经典的论调了，即安全和隐私并不是一回事。</p>
<p>首先，我们应该在足够安全的情况下再考虑隐私的问题 <del>（废话，要是不设防那还考虑什么隐私</del>，但是悲哀的是，目前我们公认的安全做的比较好的一些服务提供商都是一些大型商业公司，面对它们你很难说隐私得到了尊重。</p>
<p>所以我们需要在安全和隐私中做取舍。</p>
<p>一般来说，我们很难说自己正在使用的操作系统是绝对安全的，我们无法保证以后不会受到恶意软件的攻击，所以只能尽量采用一些安全手段避免。</p>
<p><strong>服务提供商的监控</strong></p>
<p>这里不单单说的是互联网服务提供商（<a href="https://en.wikipedia.org/wiki/Internet_service_provider" target="_blank" rel="noopener noreffer ">ISP</a>），而是各种服务提供商。</p>
<p>我们目前使用的各种软件提供了很多服务，一个经典的例子就是聊天，有关聊天软件的安全隐私讨论你能找到很多，并且有很多小众软件旨在提供一个尽可能保证安全和隐私的即时聊天服务。</p>
<p>但这种小众软件的悲哀是自己身边人不使用从而导致自己也很难一直使用。</p>
<p><strong>大规模监控</strong></p>
<p>大规模监控的经典案例就是<a href="https://en.wikipedia.org/wiki/2010s_global_surveillance_disclosures" target="_blank" rel="noopener noreffer ">由 Edward Snowden 曝光的全球监控计划</a></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://www.privacyguides.org/en/basics/threat-modeling/" target="_blank" rel="noopener noreffer ">Threat Modeling</a></li>
</ul>
]]></description>
</item>
<item>
    <title>musl libc 阅读记录: malloc</title>
    <link>http://localhost:1313/posts/musl_malloc/</link>
    <pubDate>Mon, 07 Apr 2025 01:42:21 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/musl_malloc/</guid>
    <description><![CDATA[<h1 id="musl-libc-中-malloc-的实现">musl libc 中 malloc 的实现</h1>
<p>本文说的 musl libc 是 musl libc 1.25，截止到 2025 年 4 月 6 日，该版本依旧是最新版。</p>
<h2 id="介绍">介绍</h2>
<p>malloc 是 C 语言中用于在内存中动态分配内存块的标准库函数</p>
<p>musl libc 的 malloc 默认使用的是 src/malloc/mallocng 文件夹下的实现，在 configure 脚本中可以看到:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">srcdir</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">prefix</span><span class="o">=</span>/usr/local/musl
</span></span><span class="line"><span class="cl"><span class="nv">exec_prefix</span><span class="o">=</span><span class="s1">&#39;$(prefix)&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">bindir</span><span class="o">=</span><span class="s1">&#39;$(exec_prefix)/bin&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">libdir</span><span class="o">=</span><span class="s1">&#39;$(prefix)/lib&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">includedir</span><span class="o">=</span><span class="s1">&#39;$(prefix)/include&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">syslibdir</span><span class="o">=</span><span class="s1">&#39;/lib&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">tools</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">tool_libs</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">build</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">target</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">optimize</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">debug</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">warnings</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">shared</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">static</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">wrapper</span><span class="o">=</span>auto
</span></span><span class="line"><span class="cl"><span class="nv">gcc_wrapper</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">clang_wrapper</span><span class="o">=</span>no
</span></span><span class="line"><span class="cl"><span class="nv">malloc_dir</span><span class="o">=</span>mallocng</span></span></code></pre></div></div>
<p>这些都是默认的选项，其中 <code>malloc_dir</code> 被指定为 mallocng。该脚本支持 <code>--with-malloc=</code> 指定 musl libc 的另一个 malloc 实现</p>
<h2 id="malloc-实现">malloc 实现</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">malloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">size_overflows</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint32_t</span> <span class="n">mask</span><span class="p">,</span> <span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">ctr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">MMAP_THRESHOLD</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">wrlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nf">step_seq</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">			<span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">sc</span> <span class="o">=</span> <span class="nf">size_to_class</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">rdlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// use coarse size classes initially when there are not yet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// any groups of desired size. this allows counts of 2 or 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to be allocated at first rather than having to start with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 7 or 5, the min counts for even size classes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&gt;=</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&lt;</span><span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">!=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">sc</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if a new group may be allocated, count it toward
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// usage in deciding if we can use coarse class.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">avail_mask</span>
</span></span><span class="line"><span class="cl">		    <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">freed_mask</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="n">usage</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">usage</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">sc</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">mask</span> <span class="o">=</span> <span class="n">g</span> <span class="o">?</span> <span class="n">g</span><span class="o">-&gt;</span><span class="nl">avail_mask</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span> <span class="o">=</span> <span class="n">mask</span><span class="o">&amp;-</span><span class="n">mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">RDLOCK_IS_EXCLUSIVE</span> <span class="o">||</span> <span class="o">!</span><span class="n">MT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">a_cas</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">)</span><span class="o">!=</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">idx</span> <span class="o">=</span> <span class="nf">a_ctz_32</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">upgradelock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">idx</span> <span class="o">=</span> <span class="nf">alloc_slot</span><span class="p">(</span><span class="n">sc</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">success</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctr</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">enframe</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ctr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>上面就是 malloc 的具体实现了，函数上来先判断了申请的内存是否超出了能申请的上界，如果确实超过，就返回 0。</p>
<p>之后则是经典的判断临界点了，它会判断 <code>n</code> 是否超过了 <code>MMAP_THRESHOLD</code> 宏，这个宏的值是 <code>131051</code>，也就是 <code>0x1ffec</code>，所以接下来有分两路，<code>n</code> 的值是否大于 <code>MMAP_THRESHOLD</code>。</p>
<h3 id="如果-n-大于-mmap_threshold">如果 <code>n</code> 大于 <code>MMAP_THRESHOLD</code></h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">wrlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nf">step_seq</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">goto</span> <span class="n">success</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这是全部代码逻辑，如果你有点听说过 malloc 的实现，那么对这段可能有点眼熟，大概就是分配空间，填充元数据，之后跳到统一处理函数的工作。</p>
<p>这里申请内存的部分就是这两句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">size_t</span> <span class="n">needed</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">IB</span> <span class="o">+</span> <span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">needed</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这里计算了申请大小+元数据的大小，之后使用 <code>mmap</code> 分配一块内存区域。之后就涉及到了元数据的分配</p>
<h4 id="元数据的分配">元数据的分配</h4>
<p>元数据的分配，需要知道以下几个数据结构</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="err">```</span><span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">prev</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">group</span> <span class="o">*</span><span class="n">mem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">volatile</span> <span class="kt">int</span> <span class="n">avail_mask</span><span class="p">,</span> <span class="n">freed_mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">last_idx</span><span class="p">:</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">freeable</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">sizeclass</span><span class="p">:</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="nl">maplen</span><span class="p">:</span><span class="mi">8</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="o">-</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta_area</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">check</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta_area</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">nslots</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="n">slots</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">malloc_context</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint64_t</span> <span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef PAGESIZE
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>	<span class="kt">size_t</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>	<span class="kt">int</span> <span class="n">init_done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">free_meta_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">avail_meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">avail_meta_count</span><span class="p">,</span> <span class="n">avail_meta_area_count</span><span class="p">,</span> <span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta_area</span> <span class="o">*</span><span class="n">meta_area_head</span><span class="p">,</span> <span class="o">*</span><span class="n">meta_area_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">active</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">usage_by_class</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">unmap_seq</span><span class="p">[</span><span class="mi">32</span><span class="p">],</span> <span class="n">bounces</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uint8_t</span> <span class="n">seq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">uintptr_t</span> <span class="n">brk</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>分配函数如下:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="nf">alloc_meta</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">init_done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef PAGESIZE
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">pagesize</span> <span class="o">=</span> <span class="nf">get_page_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>		<span class="n">ctx</span><span class="p">.</span><span class="n">secret</span> <span class="o">=</span> <span class="nf">get_random_secret</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">init_done</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">PGSZ</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">4096</span><span class="p">)</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">m</span> <span class="o">=</span> <span class="nf">dequeue_head</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ctx</span><span class="p">.</span><span class="n">free_meta_head</span><span class="p">)))</span> <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">&amp;&amp;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">uintptr_t</span> <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">need_guard</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="nf">brk</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// some ancient kernels returned _ebss
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// instead of next page as initial brk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+=</span> <span class="o">-</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nf">brk</span><span class="p">(</span><span class="n">new</span><span class="p">)</span> <span class="o">!=</span> <span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="n">need_guard</span><span class="p">)</span> <span class="nf">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="n">PROT_NONE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="n">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">new</span> <span class="o">-</span> <span class="n">pagesize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			    <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">			<span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>如果不考虑一些特殊情况的话，简单来看，那就是初始化完毕的 <code>ctx</code>，查询是否有 freelist 的存在，有就从这里分配，如果没有就看自己是否还可以分配，可以的话就通过下边这段代码获取新的元数据存储区</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">m</span><span class="p">;</span></span></span></code></pre></div></div>
<p>所以这里存在两个特殊情况，一个是这个 <code>ctx</code> 的初始化，另一个就是 <code>ctx.avail_meta_count</code> 为 0 的情况。</p>
<p><strong>如果 <code>ctx.avail_meta_count</code> 为 0</strong></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">&amp;&amp;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uintptr_t</span> <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">need_guard</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="nf">brk</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// some ancient kernels returned _ebss
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// instead of next page as initial brk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+=</span> <span class="o">-</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">new</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">brk</span><span class="p">(</span><span class="n">new</span><span class="p">)</span> <span class="o">!=</span> <span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">need_guard</span><span class="p">)</span> <span class="nf">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ctx</span><span class="p">.</span><span class="n">brk</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">PROT_NONE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="n">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">new</span> <span class="o">-</span> <span class="n">pagesize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span></span></span></code></pre></div></div>
<p>上面这些就是处理逻辑了。</p>
<p>在 <code>ctx.avail_meta_area_count</code> 还不为 0 的时候，就不需要考虑那两个 <code>if</code> 判断，先看如果 <code>ctx</code> 的 <code>meta_area</code> 还有空位的情况。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">pagesize</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">need_unprotect</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">need_unprotect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">mprotect</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOSYS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_head</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">secret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_count</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">nslots</span>
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="p">(</span><span class="mi">4096</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta_area</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_area_tail</span><span class="o">-&gt;</span><span class="n">slots</span><span class="p">;</span></span></span></code></pre></div></div>
<p>如果有空位，就分 4096 字节过去，然后判断 <code>ctx.meta_area_tail</code> 这个尾节点是否存在，存在的话直接追加，不存在把拿到的这个地址设为头节点。</p>
<p>之后就是剩余元信息的计数的计算: <code>(4096 - sizeof(struct meta_area)) / sizeof *m</code></p>
<p>这里剪去 <code>sizeof(struct meta_area)</code> 的原因是为了把 <code>slots</code> 之前的那些数据减掉，这里涉及到一个较为冷门概念 —— 柔性数组，这种不指定存储个数的数组被定义为结构体定义的最后一个成员的时候，<code>sizeof</code> 计算是不会算上这个数组的大小，这种数组需要运行时动态分配空间，也就是现在这样。</p>
<p>接下来就是 <code>ctx.avail_meta_area_count</code> 为 0 的情况了。</p>
<p>先看第二个 if 判断。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2UL</span> <span class="o">&lt;&lt;</span> <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nf">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">*</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANON</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">MAP_FAILED</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_areas</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">pagesize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">avail_meta_area_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">pagesize</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ctx</span><span class="p">.</span><span class="n">meta_alloc_shift</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这段代码很容易看懂，就是分配一块内存给 <code>ctx.avail_meta_areas</code> 使用。</p>
<p>书接上回，回到 <code>malloc()</code> 那里，在 <code>g</code> 被刚刚讲的 <code>alloc_meta()</code> 函数分配空间之后，就到了写这次 <code>malloc()</code> 元数据的部分</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="nf">alloc_meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">munmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">needed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">maplen</span> <span class="o">=</span> <span class="p">(</span><span class="n">needed</span><span class="o">+</span><span class="mi">4095</span><span class="p">)</span><span class="o">/</span><span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// use a global counter to cycle offset in
</span></span></span><span class="line"><span class="cl"><span class="c1">// individually-mmapped allocations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">goto</span> <span class="n">success</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里的 needed + 4095 是为了向上取整。</p>
<p>等元数据写完后，就跳到了 <code>success</code> 这个 label</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nl">success</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">ctr</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">mmap_counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">enframe</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ctr</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这里值得一说的就是 <code>enframe()</code> 了</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">enframe</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">stride</span> <span class="o">=</span> <span class="nf">get_stride</span><span class="p">(</span><span class="n">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">size_t</span> <span class="n">slack</span> <span class="o">=</span> <span class="p">(</span><span class="n">stride</span><span class="o">-</span><span class="n">IB</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="o">/</span><span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span> <span class="o">+</span> <span class="n">stride</span><span class="o">*</span><span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">p</span><span class="o">+</span><span class="n">stride</span><span class="o">-</span><span class="n">IB</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// cycle offset within slot to increase interval to address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// reuse, facilitate trapping double-free.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">off</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">?</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">ctr</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assert</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">off</span> <span class="o">&gt;</span> <span class="n">slack</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">size_t</span> <span class="n">m</span> <span class="o">=</span> <span class="n">slack</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span> <span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">;</span> <span class="n">m</span> <span class="o">|=</span> <span class="n">m</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">off</span> <span class="o">&amp;=</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">off</span> <span class="o">&gt;</span> <span class="n">slack</span><span class="p">)</span> <span class="n">off</span> <span class="o">-=</span> <span class="n">slack</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">assert</span><span class="p">(</span><span class="n">off</span> <span class="o">&lt;=</span> <span class="n">slack</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">off</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// store offset in unused header at offset zero
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// if enframing at non-zero offset.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span><span class="o">&lt;&lt;</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">p</span> <span class="o">+=</span> <span class="n">UNIT</span><span class="o">*</span><span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// for nonzero offset there is no permanent check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// byte, so make one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">p</span><span class="o">-</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span><span class="p">)</span><span class="o">/</span><span class="n">UNIT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">set_size</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>该函数的返回值当然不难猜出，就是用户最终得到的地址，所以函数就是根据传入的 <code>g</code> 等参数，计算一个用户可访问的地址，并将其返回。</p>
<p>现在还有一个问题，为什么 <code>mmap</code> 分配的时候，分配的是 <code>n + IB + UNIT</code> 而不是 <code>n</code>。</p>
<p>一方面，可以从代码中看出来，在该函数的开头有这样一句:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">mem</span><span class="o">-&gt;</span><span class="n">storage</span> <span class="o">+</span> <span class="n">stride</span><span class="o">*</span><span class="n">idx</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这个 <code>p</code> 是最终要返回的值，可以看出 <code>p</code> 是用 <code>g-&gt;mem-&gt;storage</code> 再加上偏移量得到的，所以多申请的 <code>IB + UNIT</code> 大概率和 <code>g-&gt;mem</code> 有关</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">group</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="nl">active_idx</span><span class="p">:</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="n">pad</span><span class="p">[</span><span class="n">UNIT</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">meta</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">storage</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这个结构体就是 <code>g-&gt;mem</code> 中 <code>mem</code> 的类型定义。其中 <code>pad</code> 占 7 字节，加上之前的一个指针和一个位域，总共占 16 字节，但 <code>IB</code> 是 4，<code>UNIT</code> 是 16。</p>
<p>这个 <code>pad</code> 成员的作用就是把 <code>struct group</code> 的大小填充为 16 字节，和 <code>UNIT</code> 一致。</p>
<h3 id="如果-n-小于-mmap_threshold">如果 <code>n</code> 小于 <code>MMAP_THRESHOLD</code></h3>
<p>对于只分配一小块内存的情况， malloc 的处理逻辑如下所示</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">sc</span> <span class="o">=</span> <span class="nf">size_to_class</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">rdlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// use coarse size classes initially when there are not yet
</span></span></span><span class="line"><span class="cl"><span class="c1">// any groups of desired size. this allows counts of 2 or 3
</span></span></span><span class="line"><span class="cl"><span class="c1">// to be allocated at first rather than having to start with
</span></span></span><span class="line"><span class="cl"><span class="c1">// 7 or 5, the min counts for even size classes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&gt;=</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">&lt;</span><span class="mi">32</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">!=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">sc</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">usage_by_class</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if a new group may be allocated, count it toward
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// usage in deciding if we can use coarse class.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">avail_mask</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="o">|</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">freed_mask</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">usage</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">usage</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sc</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mask</span> <span class="o">=</span> <span class="n">g</span> <span class="o">?</span> <span class="n">g</span><span class="o">-&gt;</span><span class="nl">avail_mask</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">first</span> <span class="o">=</span> <span class="n">mask</span><span class="o">&amp;-</span><span class="n">mask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">first</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">RDLOCK_IS_EXCLUSIVE</span> <span class="o">||</span> <span class="o">!</span><span class="n">MT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="nf">a_cas</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">avail_mask</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">mask</span><span class="o">-</span><span class="n">first</span><span class="p">)</span><span class="o">!=</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="nf">a_ctz_32</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nf">upgradelock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="nf">alloc_slot</span><span class="p">(</span><span class="n">sc</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">active</span><span class="p">[</span><span class="n">sc</span><span class="p">];</span></span></span></code></pre></div></div>
<p>TODO: 等待更新</p>
]]></description>
</item>
<item>
    <title>字节跳动 基础架构 一面</title>
    <link>http://localhost:1313/posts/bytedance_test_interview_1/</link>
    <pubDate>Sun, 06 Apr 2025 07:29:02 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/bytedance_test_interview_1/</guid>
    <description><![CDATA[<p>首先是自我介绍，然后紧接着是一道很简单的算法题:</p>
<p>统计字符串中出现的单词的个数和单词的长度</p>
<p>然后就是八股拷打了</p>
<ul>
<li>对 shell 命令有了解吗
<ul>
<li>假设要查找一个名为 abc 的文件，应该怎么做</li>
<li>匹配一个文件中 abc 开头的那一行，应该怎么做</li>
</ul>
</li>
<li>用户态的代码进入到内核态有哪些方式</li>
<li>进程间通信有哪些方式</li>
<li>关于 make 这个工具，如果没有指定目标，默认构建哪个目标</li>
<li>知道进程地址空间的概念吗，介绍一下</li>
<li>环境变量存在哪个地方，就是程序运行时的环境变量存在哪里</li>
<li>gdb 相关
<ul>
<li>如何看当前调试的程序停在了哪个函数上面</li>
<li>如何查看某个变量的值</li>
<li>如何附加到进程调试它</li>
</ul>
</li>
<li>了解缓冲区溢出攻击的概念吗
<ul>
<li>如何防范该攻击</li>
</ul>
</li>
<li>musl libc 和 glibc 有什么区别</li>
<li>了解 linux kernel 的工作原理吗，任何一个子系统都可以说下</li>
<li>了解静态扫描吗</li>
<li>参与过什么开源社区吗</li>
<li>介绍一下冒泡排序
<ul>
<li>冒泡排序有什么优化空间吗</li>
</ul>
</li>
<li>代码编写时，什么情况下容易出现数据类型的隐式转换</li>
<li>用户程序是如何获取到内存的
<ul>
<li>假如说我的 <code>malloc()</code> 要申请 10MB 大小的内存，它也会调用 <code>sbrk()</code> 系统调用吗</li>
<li>你看过 musl libc 的内存分配函数吗</li>
</ul>
</li>
<li>在你编码的时候，或者做一个项目的时候，如何让你的代码的可维护性更好</li>
</ul>
<p>这里会问到 musl libc 的原因是我自我介绍时说我阅读过 musl libc 的代码，但难绷的点是我没读过内存分配的部分</p>
]]></description>
</item>
<item>
    <title>腾讯云智 后台开发 一面</title>
    <link>http://localhost:1313/posts/tencent_cloud_interview_1/</link>
    <pubDate>Fri, 28 Mar 2025 11:38:22 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/tencent_cloud_interview_1/</guid>
    <description><![CDATA[<p>首先当然是自我介绍了，然后就是：</p>
<h2 id="八股">八股</h2>
<ol>
<li>死锁产生条件</li>
<li>内核态和用户态之间是如何切换的，通过了什么方式</li>
<li>进程和线程之间的区别</li>
<li>线程崩溃是否会影响到进程</li>
<li>TCP 和 UDP 的区别，哪个是面向流的</li>
<li>TCP 的拥塞控制</li>
<li>介绍一下 TCP 的四次挥手，可以改成三次吗</li>
<li>了解 IO 多路复用吗，epoll 和 select 的区别是什么</li>
<li>堆栈的区别</li>
<li>Linux 中，栈上的数据需要被显示回收吗</li>
<li>Linux 中，僵尸进程、孤儿进程和守护进程都是什么</li>
<li>如何解决僵尸进程和孤儿进程</li>
<li>对关系型数据库和非关系数据库有了解吗，用过 Hadoop 吗</li>
</ol>
<h2 id="算法">算法</h2>
<ol>
<li>二分法求根号二</li>
<li>二叉树的后序遍历</li>
</ol>
<h2 id="后记">后记</h2>
<p>第一个算法题是在八股的中间考的。</p>
<p>我准备的相当不充分，我承认这些八股都不难，但是我有的确实没答出来，我的问题。</p>
<p>所以虽然结果还没出来，但我认为应该是不会过了。</p>
]]></description>
</item>
<item>
    <title>正在读的文章</title>
    <link>http://localhost:1313/posts/reading/</link>
    <pubDate>Fri, 14 Mar 2025 10:27:26 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/reading/</guid>
    <description><![CDATA[<h2 id="c">C</h2>
<ul>
<li><a href="https://queue.acm.org/detail.cfm?id=3212479" target="_blank" rel="noopener noreffer ">C Is Not a Low-level Language</a></li>
<li><a href="https://thephd.dev/c23-is-coming-here-is-what-is-on-the-menu" target="_blank" rel="noopener noreffer ">C23 is Finished: Here is What is on the Menu</a></li>
</ul>
<h2 id="c-1">C++</h2>
<ul>
<li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener noreffer ">Google C++ Style Guide</a></li>
<li><a href="https://ykiko.me/zh-cn/articles/682031684/" target="_blank" rel="noopener noreffer ">The History of constexpr in C++! (Part One)</a></li>
<li><a href="https://ykiko.me/zh-cn/articles/692886292/" target="_blank" rel="noopener noreffer ">彻底理解 C++ ABI</a></li>
<li><a href="https://ykiko.me/zh-cn/articles/669360731/" target="_blank" rel="noopener noreffer ">使用 Clang 工具自由的支配 C++ 代码吧</a></li>
<li><a href="https://ykiko.me/zh-cn/articles/659510753/" target="_blank" rel="noopener noreffer ">C++ 成员指针完全解析</a></li>
<li><a href="https://ykiko.me/zh-cn/articles/646752343/" target="_blank" rel="noopener noreffer ">C++ 禁忌黑魔法：STMP （上）</a></li>
<li><a href="https://lewissbaker.github.io/2017/09/25/coroutine-theory" target="_blank" rel="noopener noreffer ">Coroutine Theory</a></li>
</ul>
<h2 id="kernel">kernel</h2>
<ul>
<li><a href="https://martins3.github.io/kernel/learn-linux-kernel.html" target="_blank" rel="noopener noreffer ">内核学习经验</a></li>
<li><a href="https://jia.je/software/2024/12/10/linux-perf-pmu/" target="_blank" rel="noopener noreffer ">Linux 的性能分析（Perf）实现探究</a></li>
</ul>
<h2 id="debug">Debug</h2>
<ul>
<li><a href="https://martins3.github.io/linux/gdb.html" target="_blank" rel="noopener noreffer ">Debugger 的理念，原理和使用</a></li>
<li><a href="https://maskray.me/blog/2024-12-30-skipping-boring-functions-in-debuggers" target="_blank" rel="noopener noreffer ">Skipping boring functions in debuggers</a></li>
</ul>
<h2 id="cs">CS</h2>
<ul>
<li><a href="https://jia.je/hardware/2024/09/04/memory-model-and-memory-ordering/" target="_blank" rel="noopener noreffer ">内存模型和内存序</a></li>
<li><a href="https://jia.je/software/2025/03/30/glibc-allocator/" target="_blank" rel="noopener noreffer ">glibc 内存分配器实现探究</a></li>
<li><a href="https://jia.je/software/2025/04/07/tls-internals/" target="_blank" rel="noopener noreffer ">Thread Local Storage (TLS) 实现探究</a></li>
<li><a href="https://jia.je/software/2024/02/18/write-a-linker-1/" target="_blank" rel="noopener noreffer ">开发一个链接器（1）</a></li>
<li><a href="https://martins3.github.io/qemu/introduction.html" target="_blank" rel="noopener noreffer ">QEMU 概述</a></li>
<li><a href="https://martins3.github.io/linux/musl.html" target="_blank" rel="noopener noreffer ">阅读 musl 学到的一些东西</a></li>
</ul>
<h2 id="security">Security</h2>
<ul>
<li><a href="https://thiscute.world/posts/an-incomplete-guide-to-data-security/" target="_blank" rel="noopener noreffer ">个人数据安全不完全指南</a></li>
<li><a href="https://madaidans-insecurities.github.io/guides/linux-hardening.html" target="_blank" rel="noopener noreffer ">Linux Hardening Guide</a></li>
<li><a href="https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C&#43;&#43;.html" target="_blank" rel="noopener noreffer ">Compiler Options Hardening Guide for C and C++</a></li>
</ul>
<h2 id="linux-使用">Linux 使用</h2>
<ul>
<li><a href="https://ivonblog.com/posts/linux-nvidia-driver-issues/" target="_blank" rel="noopener noreffer ">浅谈Linux的Nvidia闭源驱动问题，以及nvidia-open、Nouveau、NVK驱动的选择</a></li>
<li><a href="https://sh.alynx.one/posts/GNOME-IBus-Wayland-IME/" target="_blank" rel="noopener noreffer ">GNOME 和 IBus 和 Wayland 输入法</a></li>
<li><a href="https://blog.plz.ac/posts/gentoo-kvm-pci-passthrough/" target="_blank" rel="noopener noreffer ">Gentoo PCI KVM设备直通</a></li>
</ul>
]]></description>
</item>
<item>
    <title>xv6-riscv 源码阅读 —— 内核态: 虚拟化</title>
    <link>http://localhost:1313/posts/xv6_riscv_read_kernel_virtual/</link>
    <pubDate>Fri, 24 Jan 2025 13:55:50 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/xv6_riscv_read_kernel_virtual/</guid>
    <description><![CDATA[<h1 id="虚拟化">虚拟化</h1>
<blockquote>
<p>虚拟内存是一种内存管理技术，它提供了“给定机器上实际可用的存储资源的理想化抽象”，它“给用户创造了一个拥有全部内存的错觉”。</p>
<p>计算机操作系统结合使用硬件和软件，将程序使用的内存地址（称为虚拟地址）映射到计算机内存中的物理地址。从进程或任务的角度来看，主存储表现为连续的地址空间或连续段的集合。操作系统管理虚拟地址空间以及实内存到虚拟内存的分配。 CPU 中的地址转换硬件通常称为内存管理单元 (MMU)，可自动将虚拟地址转换为物理地址。</p>
<p>虚拟内存的主要好处包括使应用程序不必管理共享内存空间，能够在进程之间共享库使用的内存，由于内存隔离而提高安全性，以及能够在概念上使用比物理可用更多的内存，使用分页或分段技术。</p>
</blockquote>
<p>上面这段来自 <a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener noreffer ">WikiPedia</a></p>
<p>xv6 运行在 Sv39 RISC-V 上，也就是说它只使用 64 bit 虚拟地址的低 39 bit。xv6 通过三级页表来寻址</p>
<p>xv6 的 main.c 中，首先初始化了内核页表部分</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kinit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="s">&#34;kmem&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">freerange</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">PHYSTOP</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">freerange</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pa_start</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pa_end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="nf">PGROUNDUP</span><span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa_start</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;</span> <span class="n">p</span> <span class="o">+</span> <span class="n">PGSIZE</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pa_end</span><span class="p">;</span> <span class="n">p</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">kfree</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里是对锁的初始化，之后再把空间都 free 一遍</p>
<p>之后是初始化内核页表</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Initialize the one kernel_pagetable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kvminit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">kernel_pagetable</span> <span class="o">=</span> <span class="nf">kvmmake</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>kernel_pagetable 就是一 uint64 的指针</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Make a direct-map page table for the kernel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">pagetable_t</span>
</span></span><span class="line"><span class="cl"><span class="nf">kvmmake</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">pagetable_t</span> <span class="n">kpgtbl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">kpgtbl</span> <span class="o">=</span> <span class="p">(</span><span class="kt">pagetable_t</span><span class="p">)</span> <span class="nf">kalloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">memset</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// uart registers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">UART0</span><span class="p">,</span> <span class="n">UART0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// virtio mmio disk interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">VIRTIO0</span><span class="p">,</span> <span class="n">VIRTIO0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// PLIC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">PLIC</span><span class="p">,</span> <span class="n">PLIC</span><span class="p">,</span> <span class="mh">0x4000000</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// map kernel text executable and read-only.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">KERNBASE</span><span class="p">,</span> <span class="n">KERNBASE</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">etext</span><span class="o">-</span><span class="n">KERNBASE</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_X</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// map kernel data and the physical RAM we&#39;ll make use of.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">etext</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">etext</span><span class="p">,</span> <span class="n">PHYSTOP</span><span class="o">-</span><span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">etext</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// map the trampoline for trap entry/exit to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// the highest virtual address in the kernel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">TRAMPOLINE</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">trampoline</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_X</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// allocate and map a kernel stack for each process.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">proc_mapstacks</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">kpgtbl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>可以看出，这里首先分配了一个内核页表，之后填空 0，然后把地址映射过去，然后将其返回</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Allocate one 4096-byte page of physical memory.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns a pointer that the kernel can use.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns 0 if the memory cannot be allocated.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">kalloc</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memset</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span> <span class="c1">// fill with junk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// add a mapping to the kernel page table.
</span></span></span><span class="line"><span class="cl"><span class="c1">// only used when booting.
</span></span></span><span class="line"><span class="cl"><span class="c1">// does not flush TLB or enable paging.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kvmmap</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">kpgtbl</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">va</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">pa</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">sz</span><span class="p">,</span> <span class="kt">int</span> <span class="n">perm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">mappages</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">pa</span><span class="p">,</span> <span class="n">perm</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;kvmmap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Create PTEs for virtual addresses starting at va that refer to
</span></span></span><span class="line"><span class="cl"><span class="c1">// physical addresses starting at pa.
</span></span></span><span class="line"><span class="cl"><span class="c1">// va and size MUST be page-aligned.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns 0 on success, -1 if walk() couldn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1">// allocate a needed page-table page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">mappages</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">pagetable</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">va</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">size</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">pa</span><span class="p">,</span> <span class="kt">int</span> <span class="n">perm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">a</span><span class="p">,</span> <span class="n">last</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">va</span> <span class="o">%</span> <span class="n">PGSIZE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;mappages: va not aligned&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">size</span> <span class="o">%</span> <span class="n">PGSIZE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;mappages: size not aligned&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;mappages: size&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">a</span> <span class="o">=</span> <span class="n">va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">last</span> <span class="o">=</span> <span class="n">va</span> <span class="o">+</span> <span class="n">size</span> <span class="o">-</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">walk</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;mappages: remap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">PA2PTE</span><span class="p">(</span><span class="n">pa</span><span class="p">)</span> <span class="o">|</span> <span class="n">perm</span> <span class="o">|</span> <span class="n">PTE_V</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">last</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pa</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>mappages</code> 的核心部分就是下边那个 <code>for</code> 循环</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">last</span> <span class="o">=</span> <span class="n">va</span> <span class="o">+</span> <span class="n">size</span> <span class="o">-</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">walk</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;mappages: remap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">PA2PTE</span><span class="p">(</span><span class="n">pa</span><span class="p">)</span> <span class="o">|</span> <span class="n">perm</span> <span class="o">|</span> <span class="n">PTE_V</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">last</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">a</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pa</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Return the address of the PTE in page table pagetable
</span></span></span><span class="line"><span class="cl"><span class="c1">// that corresponds to virtual address va.  If alloc!=0,
</span></span></span><span class="line"><span class="cl"><span class="c1">// create any required page-table pages.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// The risc-v Sv39 scheme has three levels of page-table
</span></span></span><span class="line"><span class="cl"><span class="c1">// pages. A page-table page contains 512 64-bit PTEs.
</span></span></span><span class="line"><span class="cl"><span class="c1">// A 64-bit virtual address is split into five fields:
</span></span></span><span class="line"><span class="cl"><span class="c1">//   39..63 -- must be zero.
</span></span></span><span class="line"><span class="cl"><span class="c1">//   30..38 -- 9 bits of level-2 index.
</span></span></span><span class="line"><span class="cl"><span class="c1">//   21..29 -- 9 bits of level-1 index.
</span></span></span><span class="line"><span class="cl"><span class="c1">//   12..20 -- 9 bits of level-0 index.
</span></span></span><span class="line"><span class="cl"><span class="c1">//    0..11 -- 12 bits of byte offset within the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">pte_t</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">walk</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">pagetable</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="n">alloc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">va</span> <span class="o">&gt;=</span> <span class="n">MAXVA</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;walk&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">level</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">level</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">level</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">pte_t</span> <span class="o">*</span><span class="n">pte</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pagetable</span><span class="p">[</span><span class="nf">PX</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">va</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pagetable</span> <span class="o">=</span> <span class="p">(</span><span class="kt">pagetable_t</span><span class="p">)</span><span class="nf">PTE2PA</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">alloc</span> <span class="o">||</span> <span class="p">(</span><span class="n">pagetable</span> <span class="o">=</span> <span class="p">(</span><span class="kt">pde_t</span><span class="o">*</span><span class="p">)</span><span class="nf">kalloc</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nf">memset</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">PA2PTE</span><span class="p">(</span><span class="n">pagetable</span><span class="p">)</span> <span class="o">|</span> <span class="n">PTE_V</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">&amp;</span><span class="n">pagetable</span><span class="p">[</span><span class="nf">PX</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">va</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define PX(level, va) ((((uint64) (va)) &gt;&gt; PXSHIFT(level)) &amp; PXMASK)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PA2PTE(pa) ((((uint64)pa) &gt;&gt; 12) &lt;&lt; 10)</span></span></span></code></pre></div></div>
<p>上面的两个宏展开是下边这样</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">((((</span><span class="n">uint64</span><span class="p">)(</span><span class="n">va</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">12</span> <span class="o">+</span> <span class="p">(</span><span class="mi">9</span> <span class="o">*</span> <span class="p">(</span><span class="n">level</span><span class="p">))))</span> <span class="o">&amp;</span> <span class="mh">0x1FF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">((((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pagetable</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="p">)</span></span></span></code></pre></div></div>
<p>宏 <code>PTE_V</code> 表示该 PTE 是否已存在，所以找到了一个 PTE 就要查看它的 <code>PTE_V</code> 位，并且在之后还涉及到给它赋 <code>PTE_V</code>。宏 <code>PX</code> 用来取某个级的 PTE 出来，从这个展开的宏也能看出来，首先右移 <code>12 + 9 * level</code>，这是因为一级就要占 9 字节，再加上本身就有的 12 字节的偏移量，最后和 <code>0x1FF</code> 按位与取出最后 9 字节。而 <code>PA2PTE</code> 用来将物理地址转换成对应的 PTE，右移 12 字节为了取出偏移量，之后左移 10 字节是为了空出一些 flag</p>
<p>可以参考下边的图片来理解，图片来自 <a href="https://github.com/riscv/riscv-isa-manual" target="_blank" rel="noopener noreffer ">RISC-V 手册</a></p>
<p></p>
<p>还有一些 xv6-book 的图片，更多关于页表的解释也可以看我之前写的 <a href="../../tags/xv6_risc-v/" rel="">xv6-book 的翻译</a></p>
<p></p>
<p></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Allocate a page for each process&#39;s kernel stack.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Map it high in memory, followed by an invalid
</span></span></span><span class="line"><span class="cl"><span class="c1">// guard page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">proc_mapstacks</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">kpgtbl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">proc</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="n">NPROC</span><span class="p">];</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">pa</span> <span class="o">=</span> <span class="nf">kalloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">pa</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;kalloc&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint64</span> <span class="n">va</span> <span class="o">=</span> <span class="nf">KSTACK</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">proc</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="nf">kvmmap</span><span class="p">(</span><span class="n">kpgtbl</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="n">PTE_R</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>最后映射完后，再映射一遍进程的 kernel stack</p>
<p><code>KSTACK</code> 是一个宏函数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define KSTACK(p) (TRAMPOLINE - ((p) + 1) * 2 * PGSIZE)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// Expands to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(((</span><span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">12</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">-</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">-</span> <span class="p">(((</span><span class="kt">int</span><span class="p">)(</span><span class="n">p</span> <span class="o">-</span> <span class="n">proc</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">4096</span><span class="p">)</span></span></span></code></pre></div></div>
<h2 id="进程">进程</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// initialize the proc table.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">procinit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pid_lock</span><span class="p">,</span> <span class="s">&#34;nextpid&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wait_lock</span><span class="p">,</span> <span class="s">&#34;wait_lock&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">proc</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="n">NPROC</span><span class="p">];</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">,</span> <span class="s">&#34;proc&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">UNUSED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="o">-&gt;</span><span class="n">kstack</span> <span class="o">=</span> <span class="nf">KSTACK</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">proc</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这就是进程的初始化，这里涉及到对进程的出现 <code>struct proc</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">proc</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">spinlock</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// p-&gt;lock must be held when using these:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">enum</span> <span class="n">procstate</span> <span class="n">state</span><span class="p">;</span>        <span class="c1">// Process state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">chan</span><span class="p">;</span>                  <span class="c1">// If non-zero, sleeping on chan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">killed</span><span class="p">;</span>                  <span class="c1">// If non-zero, have been killed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">xstate</span><span class="p">;</span>                  <span class="c1">// Exit status to be returned to parent&#39;s wait
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>                     <span class="c1">// Process ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// wait_lock must be held when using this:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>         <span class="c1">// Parent process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// these are private to the process, so p-&gt;lock need not be held.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">uint64</span> <span class="n">kstack</span><span class="p">;</span>               <span class="c1">// Virtual address of kernel stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">uint64</span> <span class="n">sz</span><span class="p">;</span>                   <span class="c1">// Size of process memory (bytes)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">pagetable_t</span> <span class="n">pagetable</span><span class="p">;</span>       <span class="c1">// User page table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">trapframe</span> <span class="o">*</span><span class="n">trapframe</span><span class="p">;</span> <span class="c1">// data page for trampoline.S
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">context</span> <span class="n">context</span><span class="p">;</span>      <span class="c1">// swtch() here to run process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">ofile</span><span class="p">[</span><span class="n">NOFILE</span><span class="p">];</span>  <span class="c1">// Open files
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">inode</span> <span class="o">*</span><span class="n">cwd</span><span class="p">;</span>           <span class="c1">// Current directory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>               <span class="c1">// Process name (debugging)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span></span></span></code></pre></div></div>
<h2 id="exec">exec</h2>
<p>这时候就涉及到 syscall</p>
<p>RISC-V 的系统调用通过 ecall 来完成，ecall 会跳转到内核的一段处理程序中，这个处理程序的地址在 <code>stvec</code> 寄存器中</p>
<p>在 <code>main</code> 函数中，<code>stvec</code> 寄存器第一次初始化是指向来自内核的 trap 处理程序</p>
<blockquote>
<p>xv6 的 trap 处理程序大致分成两个——来自用户态的和来自内核态的</p>
<p>目前也没有什么用户空间的事，就先初始化内核态的。用户态的 trap 处理程序会在处理时将 <code>stvec</code> 寄存器改成内核态的，之后在返回时再改回用户态的。</p>
<p>这里说的 trap 是指 CPU 需要放下正在正常执行的指令，强制跳转到另一个处理该情况的代码。比如各种中断，系统调用等，都属于该情况。</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// set up to take exceptions and traps while in the kernel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">trapinithart</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_stvec</span><span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">kernelvec</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>在 <code>userinit()</code> 函数中，<code>p = allocproc();</code> 中的 <code>allocproc()</code> 函数涉及到了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Set up new context to start executing at forkret,
</span></span></span><span class="line"><span class="cl"><span class="c1">// which returns to user space.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">.</span><span class="n">ra</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">forkret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">.</span><span class="n">sp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">kstack</span> <span class="o">+</span> <span class="n">PGSIZE</span><span class="p">;</span></span></span></code></pre></div></div>
<p><code>forkret</code> 中调用了 <code>usertrapret()</code>，这个函数将 <code>stvec</code> 的值设置为了 kernel/trampoline.S 中的 <code>uservec</code></p>
<p>这里的 <code>ra</code> 寄存器保存了返回地址，和 x86 架构不同的是，RISC-V 有专门的寄存器保存返回地址，而不是像 x86 那样放在栈上，而 <code>ret</code> 指令会直接跳转到 <code>ra</code> 寄存器的值开始执行，所以 <code>ra</code> 寄存器属于被调用者保存寄存器，<code>context</code> 成员就是用来保存这些的寄存器的。</p>
<p>专门有一组汇编指令用来交换当前 CPU 和指定进程的 <code>context</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">swtch:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">ra</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">sp</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s0</span><span class="p">,</span> <span class="mi">16</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s1</span><span class="p">,</span> <span class="mi">24</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s2</span><span class="p">,</span> <span class="mi">32</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s3</span><span class="p">,</span> <span class="mi">40</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s4</span><span class="p">,</span> <span class="mi">48</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s5</span><span class="p">,</span> <span class="mi">56</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s6</span><span class="p">,</span> <span class="mi">64</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s7</span><span class="p">,</span> <span class="mi">72</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s8</span><span class="p">,</span> <span class="mi">80</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s9</span><span class="p">,</span> <span class="mi">88</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s10</span><span class="p">,</span> <span class="mi">96</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s11</span><span class="p">,</span> <span class="mi">104</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">ra</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">sp</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s0</span><span class="p">,</span> <span class="mi">16</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s1</span><span class="p">,</span> <span class="mi">24</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s2</span><span class="p">,</span> <span class="mi">32</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s3</span><span class="p">,</span> <span class="mi">40</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s4</span><span class="p">,</span> <span class="mi">48</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s5</span><span class="p">,</span> <span class="mi">56</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s6</span><span class="p">,</span> <span class="mi">64</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s7</span><span class="p">,</span> <span class="mi">72</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s8</span><span class="p">,</span> <span class="mi">80</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s9</span><span class="p">,</span> <span class="mi">88</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s10</span><span class="p">,</span> <span class="mi">96</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s11</span><span class="p">,</span> <span class="mi">104</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="nf">ret</span></span></span></code></pre></div></div>
<p>所以当调用了 <code>ret</code> 就会跳转到 <code>ra</code> 寄存器的地方开始执行，也就是之前写好的 <code>forkret()</code></p>
<p>这里有点跳跃了，因为 <code>userinit</code> 之后，初始化工作都完成了之后，<code>main()</code> 会调用 <code>scheduler()</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">scheduler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">cpu</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="nf">mycpu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">c</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// The most recent process to run may have had interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// turned off; enable them to avoid a deadlock if all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// processes are waiting.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">intr_on</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">proc</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="n">NPROC</span><span class="p">];</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">==</span> <span class="n">RUNNABLE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Switch to chosen process.  It is the process&#39;s job
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// to release its lock and then reacquire it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// before jumping back to us.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">RUNNING</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">swtch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Process is done running for now.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// It should have changed its p-&gt;state before coming back.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">c</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">found</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">found</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// nothing to run; stop running on this core until an interrupt.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nf">intr_on</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;wfi&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>scheduler</code> 涉及到对 <code>swtch()</code> 的调用，所以会执行到 <code>ret</code></p>
<p>可以看出 xv6 的调度也很简单，就是轮询着看</p>
<p><code>forkret()</code> 在最后会执行 <code>usertrapret()</code>，该函数会将当前 CPU 运行状态转换成用户态。</p>
<blockquote>
<p>切换到用户态是通过 <code>status</code> 寄存器和 <code>sret</code> 指令实现的，<code>sret</code> 会将当前运行模式调整到 <code>status</code> 的 SPP 位所指定的模式</p>
<p>When an SRET instruction is executed to return from the trap handler, the privilege level is set to user mode if the SPP bit is 0, or supervisor mode if the SPP bit is 1</p>
</blockquote>
<p><code>sret</code> 返回后，第一个程序就开始运行了 (?)</p>
<p>之后 trap 处理程序就被设定为了 <code>trampoline_uservec</code> 也就是用户态的 trap 处理程序，改代码会保存当前进程的状态，之后就跳转到 <code>usertrap()</code>，该函数会根据 <code>status</code> 寄存器的值判断应该怎么处理，而 syscall 就在这里被处理</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="nf">r_scause</span><span class="p">()</span> <span class="o">==</span> <span class="mi">8</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">killed</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// sepc points to the ecall instruction,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// but we want to return to the next instruction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="o">-&gt;</span><span class="n">epc</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// an interrupt will change sepc, scause, and sstatus,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// so enable only now that we&#39;re done with those registers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">intr_on</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">syscall</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>到了 <code>syscall()</code> 中，它会遍历一个函数指针数组</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="nf">uint64</span> <span class="p">(</span><span class="o">*</span><span class="n">syscalls</span><span class="p">[])(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_fork</span><span class="p">]</span>    <span class="n">sys_fork</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_exit</span><span class="p">]</span>    <span class="n">sys_exit</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_wait</span><span class="p">]</span>    <span class="n">sys_wait</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_pipe</span><span class="p">]</span>    <span class="n">sys_pipe</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_read</span><span class="p">]</span>    <span class="n">sys_read</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_kill</span><span class="p">]</span>    <span class="n">sys_kill</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_exec</span><span class="p">]</span>    <span class="n">sys_exec</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_fstat</span><span class="p">]</span>   <span class="n">sys_fstat</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_chdir</span><span class="p">]</span>   <span class="n">sys_chdir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_dup</span><span class="p">]</span>     <span class="n">sys_dup</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_getpid</span><span class="p">]</span>  <span class="n">sys_getpid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_sbrk</span><span class="p">]</span>    <span class="n">sys_sbrk</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_sleep</span><span class="p">]</span>   <span class="n">sys_sleep</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_uptime</span><span class="p">]</span>  <span class="n">sys_uptime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_open</span><span class="p">]</span>    <span class="n">sys_open</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_write</span><span class="p">]</span>   <span class="n">sys_write</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_mknod</span><span class="p">]</span>   <span class="n">sys_mknod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_unlink</span><span class="p">]</span>  <span class="n">sys_unlink</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_link</span><span class="p">]</span>    <span class="n">sys_link</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_mkdir</span><span class="p">]</span>   <span class="n">sys_mkdir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">SYS_close</span><span class="p">]</span>   <span class="n">sys_close</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>根据系统调用号，也就是宏 <code>SYS_exec</code>，会调用对应的函数 <code>sys_exec</code></p>
]]></description>
</item>
<item>
    <title>xv6-riscv 源码阅读 —— 内核态: 启动流程</title>
    <link>http://localhost:1313/posts/xv6_riscv_read_kernel_boot/</link>
    <pubDate>Tue, 21 Jan 2025 10:21:12 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/xv6_riscv_read_kernel_boot/</guid>
    <description><![CDATA[<h1 id="启动流程">启动流程</h1>
<p>从 Makefile</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Makefile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nf">$K/kernel</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OBJS</span><span class="k">)</span> $<span class="n">K</span>/<span class="n">kernel</span>.<span class="n">ld</span> $<span class="n">U</span>/<span class="n">initcode</span>
</span></span><span class="line"><span class="cl">	<span class="k">$(</span>LD<span class="k">)</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span> -T <span class="nv">$K</span>/kernel.ld -o <span class="nv">$K</span>/kernel <span class="k">$(</span>OBJS<span class="k">)</span> 
</span></span><span class="line"><span class="cl">	<span class="k">$(</span>OBJDUMP<span class="k">)</span> -S <span class="nv">$K</span>/kernel &gt; <span class="nv">$K</span>/kernel.asm
</span></span><span class="line"><span class="cl">	<span class="k">$(</span>OBJDUMP<span class="k">)</span> -t <span class="nv">$K</span>/kernel <span class="p">|</span> sed <span class="s1">&#39;1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d&#39;</span> &gt; <span class="nv">$K</span>/kernel.sym
</span></span></code></pre></div></div>
<p>可以看出这里特地使用了链接脚本 kernel/kernel.ld 用于对 kenrel 进行额外的处理</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ld">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">OUTPUT_ARCH( &#34;riscv&#34; )
</span></span><span class="line"><span class="cl">ENTRY( _entry )
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SECTIONS
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  /*
</span></span><span class="line"><span class="cl">   * ensure that entry.S / _entry is at 0x80000000,
</span></span><span class="line"><span class="cl">   * where qemu&#39;s -kernel jumps.
</span></span><span class="line"><span class="cl">   */
</span></span><span class="line"><span class="cl">  . = 0x80000000;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  .text : {
</span></span><span class="line"><span class="cl">    *(.text .text.*)
</span></span><span class="line"><span class="cl">    . = ALIGN(0x1000);
</span></span><span class="line"><span class="cl">    _trampoline = .;
</span></span><span class="line"><span class="cl">    *(trampsec)
</span></span><span class="line"><span class="cl">    . = ALIGN(0x1000);
</span></span><span class="line"><span class="cl">    ASSERT(. - _trampoline == 0x1000, &#34;error: trampoline larger than one page&#34;);
</span></span><span class="line"><span class="cl">    PROVIDE(etext = .);
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  .rodata : {
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.srodata .srodata.*) /* do not need to distinguish this from .rodata */
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.rodata .rodata.*)
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  .data : {
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.sdata .sdata.*) /* do not need to distinguish this from .data */
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.data .data.*)
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  .bss : {
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.sbss .sbss.*) /* do not need to distinguish this from .bss */
</span></span><span class="line"><span class="cl">    . = ALIGN(16);
</span></span><span class="line"><span class="cl">    *(.bss .bss.*)
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  PROVIDE(end = .);
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div></div>
<p>这里它将入口函数设置为了 <code>_entry</code>，这个函数来自 kernel/entry.S，然后是合并一些段</p>
<p>entry.S：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="na">.section</span> <span class="no">.text</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">_entry</span>
</span></span><span class="line"><span class="cl"><span class="nl">_entry:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># set up a stack for C.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1"># stack0 is declared in start.c,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1"># with a 4096-byte stack per CPU.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1"># sp = stack0 + (hartid * 4096)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">la</span> <span class="no">sp</span><span class="p">,</span> <span class="no">stack0</span>
</span></span><span class="line"><span class="cl">        <span class="nf">li</span> <span class="no">a0</span><span class="p">,</span> <span class="mi">1024</span><span class="p">*</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">        <span class="nf">csrr</span> <span class="no">a1</span><span class="p">,</span> <span class="no">mhartid</span>
</span></span><span class="line"><span class="cl">        <span class="nf">addi</span> <span class="no">a1</span><span class="p">,</span> <span class="no">a1</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mul</span> <span class="no">a0</span><span class="p">,</span> <span class="no">a0</span><span class="p">,</span> <span class="no">a1</span>
</span></span><span class="line"><span class="cl">        <span class="nf">add</span> <span class="no">sp</span><span class="p">,</span> <span class="no">sp</span><span class="p">,</span> <span class="no">a0</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># jump to start() in start.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">call</span> <span class="no">start</span>
</span></span><span class="line"><span class="cl"><span class="nl">spin:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">j</span> <span class="no">spin</span></span></span></code></pre></div></div>
<p>之后它调用了 kernel/start.c 中的 <code>start()</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// entry.S jumps here in machine mode on stack0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// set M Previous Privilege mode to Supervisor, for mret.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">r_mstatus</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">MSTATUS_MPP_MASK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span> <span class="o">|=</span> <span class="n">MSTATUS_MPP_S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_mstatus</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// set M Exception Program Counter to main, for mret.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// requires gcc -mcmodel=medany
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">w_mepc</span><span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">main</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// disable paging for now.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">w_satp</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// delegate all interrupts and exceptions to supervisor mode.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">w_medeleg</span><span class="p">(</span><span class="mh">0xffff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_mideleg</span><span class="p">(</span><span class="mh">0xffff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_sie</span><span class="p">(</span><span class="nf">r_sie</span><span class="p">()</span> <span class="o">|</span> <span class="n">SIE_SEIE</span> <span class="o">|</span> <span class="n">SIE_STIE</span> <span class="o">|</span> <span class="n">SIE_SSIE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// configure Physical Memory Protection to give supervisor mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// access to all of physical memory.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">w_pmpaddr0</span><span class="p">(</span><span class="mh">0x3fffffffffffffull</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_pmpcfg0</span><span class="p">(</span><span class="mh">0xf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// ask for clock interrupts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">timerinit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// keep each CPU&#39;s hartid in its tp register, for cpuid().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="nf">r_mhartid</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">w_tp</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// switch to supervisor mode and jump to main().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;mret&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里是先做了一些 machine 模式执行的一些操作，在默认调用 <code>mret</code> 指令换到特权级别</p>
<p>能换到是因为函数最开始就把 <code>mstatus</code> 寄存器的值改成了特权级别对应的值，调用 <code>mret</code> 会将模式设置成 <code>mstatus</code> 寄存器记录的模式</p>
<p>由于之前将 <code>main()</code> 函数的地址写到了 <code>mepc</code> 寄存器中，所以最后会跳到 <code>main()</code> 函数做后续的初始化工作。</p>
<p>kernel/main.c 中存放了 <code>main()</code> 函数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">cpuid</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">consoleinit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printfinit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xv6 kernel is booting</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">kinit</span><span class="p">();</span>         <span class="c1">// physical page allocator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">kvminit</span><span class="p">();</span>       <span class="c1">// create kernel page table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">kvminithart</span><span class="p">();</span>   <span class="c1">// turn on paging
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">procinit</span><span class="p">();</span>      <span class="c1">// process table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">trapinit</span><span class="p">();</span>      <span class="c1">// trap vectors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">trapinithart</span><span class="p">();</span>  <span class="c1">// install kernel trap vector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">plicinit</span><span class="p">();</span>      <span class="c1">// set up interrupt controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">plicinithart</span><span class="p">();</span>  <span class="c1">// ask PLIC for device interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">binit</span><span class="p">();</span>         <span class="c1">// buffer cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">iinit</span><span class="p">();</span>         <span class="c1">// inode table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">fileinit</span><span class="p">();</span>      <span class="c1">// file table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">virtio_disk_init</span><span class="p">();</span> <span class="c1">// emulated hard disk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">userinit</span><span class="p">();</span>      <span class="c1">// first user process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">started</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">started</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;hart %d starting</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">cpuid</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="nf">kvminithart</span><span class="p">();</span>    <span class="c1">// turn on paging
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">trapinithart</span><span class="p">();</span>   <span class="c1">// install kernel trap vector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">plicinithart</span><span class="p">();</span>   <span class="c1">// ask PLIC for device interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">scheduler</span><span class="p">();</span>        
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>简单看，就是让第一个 CPU 核完成初始化工作，如果还有其他的 CPU 核心，就等第一个先完成系统初始化之后再说。</p>
<p>这里先不把所有初始化都做了什么挨个说一遍，先说系统的第一个进程 —— init 进程</p>
<blockquote>
<p>init 是类 Unix 操作系统上的一个重要的进程，在操作系统启动时启动，负责系统服务等初始化工作</p>
<p>init 作为第一个启动的进程，是所有进程的祖先，PID 一般为 1，位于 /sbin/init 的位置下，不过现在一般都链接到 /lib/systemd/systemd，现在大多数的 Linux 发行版都使用了 systemd 作为 init 程序，非 systemd 的 init 现在基本没多少还在被使用的了，我印象中只有 openrc 和 BSD init （我其实不是很清楚 BSD 使用的 init 叫什么名字，反正默认不是用 systemd）</p>
<p>不比传统 init 进程所管理的范围，systemd 更加“现代化”，可管理的范围更大</p>
</blockquote>
<p>启动 init 进程的工作就是初始化工作的最后一步 <code>userinit()</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// a user program that calls exec(&#34;/init&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1">// assembled from ../user/initcode.S
</span></span></span><span class="line"><span class="cl"><span class="c1">// od -t xC ../user/initcode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">uchar</span> <span class="n">initcode</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0xef</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">,</span> <span class="mh">0x9f</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x6e</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Set up first user process.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">userinit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="nf">allocproc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">initproc</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// allocate one user page and copy initcode&#39;s instructions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// and data into it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">uvmfirst</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">initcode</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">initcode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">sz</span> <span class="o">=</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// prepare for the very first &#34;return&#34; from kernel to user.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="o">-&gt;</span><span class="n">epc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// user program counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="o">-&gt;</span><span class="n">sp</span> <span class="o">=</span> <span class="n">PGSIZE</span><span class="p">;</span>  <span class="c1">// user stack pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nf">safestrcpy</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="s">&#34;initcode&#34;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">cwd</span> <span class="o">=</span> <span class="nf">namei</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">RUNNABLE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>xv6-riscv 中的 init 进程的启动部分被直接在硬编码在这里</p>
<p>根据注释，这段二进制数据根据 user/initcode.S 得来</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="c1"># Initial process that execs /init.
</span></span></span><span class="line"><span class="cl"><span class="c1"># This code runs in user space.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">#include &#34;syscall.h&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># exec(init, argv)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="na">.globl</span> <span class="no">start</span>
</span></span><span class="line"><span class="cl"><span class="nl">start:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">la</span> <span class="no">a0</span><span class="p">,</span> <span class="no">init</span>
</span></span><span class="line"><span class="cl">        <span class="nf">la</span> <span class="no">a1</span><span class="p">,</span> <span class="no">argv</span>
</span></span><span class="line"><span class="cl">        <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_exec</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># for(;;) exit();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">exit:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_exit</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl">        <span class="nf">jal</span> <span class="no">exit</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># char init[] = &#34;/init\0&#34;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">init:</span>
</span></span><span class="line"><span class="cl">  <span class="na">.string</span> <span class="s">&#34;/init\0&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># char *argv[] = { init, 0 };
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="na">.p2align</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="nl">argv:</span>
</span></span><span class="line"><span class="cl">  <span class="na">.quad</span> <span class="no">init</span>
</span></span><span class="line"><span class="cl">  <span class="na">.quad</span> <span class="mi">0</span></span></span></code></pre></div></div>
<p>这段代码用于调用 <code>SYS_exec</code> 系统调用执行 init，init 在 user 目录下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;sh&#34;</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">pid</span><span class="p">,</span> <span class="n">wpid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="s">&#34;console&#34;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">mknod</span><span class="p">(</span><span class="s">&#34;console&#34;</span><span class="p">,</span> <span class="n">CONSOLE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">open</span><span class="p">(</span><span class="s">&#34;console&#34;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">dup</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// stdout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">dup</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// stderr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;init: starting sh</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pid</span> <span class="o">=</span> <span class="nf">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;init: fork failed</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">exec</span><span class="p">(</span><span class="s">&#34;sh&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;init: exec sh failed</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// this call to wait() returns if the shell exits,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// or if a parentless process exits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">wpid</span> <span class="o">=</span> <span class="nf">wait</span><span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">wpid</span> <span class="o">==</span> <span class="n">pid</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// the shell exited; restart it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">wpid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;init: wait returned an error</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// it was a parentless process; do nothing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>init 实现的也很简单，就是准备一下环境，之后 fork 一个进程执行 sh，之后等那个进程返回后就退出。</p>
]]></description>
</item>
<item>
    <title>xv6-riscv 源码阅读 —— mkfs</title>
    <link>http://localhost:1313/posts/xv6_riscv_read_mkfs/</link>
    <pubDate>Mon, 20 Jan 2025 05:38:31 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/xv6_riscv_read_mkfs/</guid>
    <description><![CDATA[<h1 id="mkfs">mkfs</h1>
<p>mkfs 用来生成硬盘镜像文件 fs.img</p>
<p>从 Makefile 中就可以看出，<code>make qemu</code> 只有两个依赖：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Makefile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nf">qemu</span><span class="o">:</span> $<span class="n">K</span>/<span class="n">kernel</span> <span class="n">fs</span>.<span class="n">img</span></span></span></code></pre></div></div>
<p>编译好的内核，以及一个 fs.img</p>
<p>其中，fs.img 这个目标是这样生成的：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Makefile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nf">fs.img</span><span class="o">:</span> <span class="n">mkfs</span>/<span class="n">mkfs</span> <span class="n">README</span> <span class="k">$(</span><span class="nv">UPROGS</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">	mkfs/mkfs fs.img README <span class="k">$(</span>UPROGS<span class="k">)</span>
</span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Disk layout:
</span></span><span class="line"><span class="cl">[ boot block | sb block | log | inode blocks | free bit map | data blocks ]</span></span></code></pre></div></div>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">rootino</span><span class="p">,</span> <span class="n">inum</span><span class="p">,</span> <span class="n">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">dirent</span> <span class="n">de</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">BSIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">dinode</span> <span class="n">din</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">static_assert</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">,</span> <span class="s">&#34;Integers must be 4 bytes!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Usage: mkfs fs.img files...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">assert</span><span class="p">((</span><span class="n">BSIZE</span> <span class="o">%</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">dinode</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">assert</span><span class="p">((</span><span class="n">BSIZE</span> <span class="o">%</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">dirent</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">fsfd</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_TRUNC</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">fsfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">die</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 1 fs block = 1 disk sector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">nmeta</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">nlog</span> <span class="o">+</span> <span class="n">ninodeblocks</span> <span class="o">+</span> <span class="n">nbitmap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">nblocks</span> <span class="o">=</span> <span class="n">FSSIZE</span> <span class="o">-</span> <span class="n">nmeta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">magic</span> <span class="o">=</span> <span class="n">FSMAGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">FSSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">nblocks</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">nblocks</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">ninodes</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">NINODES</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">nlog</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">nlog</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">logstart</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">inodestart</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="n">nlog</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sb</span><span class="p">.</span><span class="n">bmapstart</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="n">nlog</span><span class="o">+</span><span class="n">ninodeblocks</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="n">nmeta</span><span class="p">,</span> <span class="n">nlog</span><span class="p">,</span> <span class="n">ninodeblocks</span><span class="p">,</span> <span class="n">nbitmap</span><span class="p">,</span> <span class="n">nblocks</span><span class="p">,</span> <span class="n">FSSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">freeblock</span> <span class="o">=</span> <span class="n">nmeta</span><span class="p">;</span>     <span class="c1">// the first free block that we can allocate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">FSSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">wsect</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">zeroes</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">memset</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="nf">memmove</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sb</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">sb</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="nf">wsect</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">rootino</span> <span class="o">=</span> <span class="nf">ialloc</span><span class="p">(</span><span class="n">T_DIR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">assert</span><span class="p">(</span><span class="n">rootino</span> <span class="o">==</span> <span class="n">ROOTINO</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">de</span><span class="p">.</span><span class="n">inum</span> <span class="o">=</span> <span class="nf">xshort</span><span class="p">(</span><span class="n">rootino</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">strcpy</span><span class="p">(</span><span class="n">de</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s">&#34;.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">iappend</span><span class="p">(</span><span class="n">rootino</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">de</span><span class="p">.</span><span class="n">inum</span> <span class="o">=</span> <span class="nf">xshort</span><span class="p">(</span><span class="n">rootino</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">strcpy</span><span class="p">(</span><span class="n">de</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s">&#34;..&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">iappend</span><span class="p">(</span><span class="n">rootino</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// get rid of &#34;user/&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="o">*</span><span class="n">shortname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nf">strncmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">&#34;user/&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">shortname</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="n">shortname</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="nf">index</span><span class="p">(</span><span class="n">shortname</span><span class="p">,</span> <span class="sc">&#39;/&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">die</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Skip leading _ in name when writing to file system.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// The binaries are named _rm, _cat, etc. to keep the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// build operating system from trying to execute them
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// in place of system binaries like rm and cat.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">shortname</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;_&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">shortname</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="nf">strlen</span><span class="p">(</span><span class="n">shortname</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">DIRSIZ</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">inum</span> <span class="o">=</span> <span class="nf">ialloc</span><span class="p">(</span><span class="n">T_FILE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">de</span><span class="p">.</span><span class="n">inum</span> <span class="o">=</span> <span class="nf">xshort</span><span class="p">(</span><span class="n">inum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">strncpy</span><span class="p">(</span><span class="n">de</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">shortname</span><span class="p">,</span> <span class="n">DIRSIZ</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">iappend</span><span class="p">(</span><span class="n">rootino</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">de</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">de</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">((</span><span class="n">cc</span> <span class="o">=</span> <span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">iappend</span><span class="p">(</span><span class="n">inum</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">cc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// fix size of root inode dir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">rinode</span><span class="p">(</span><span class="n">rootino</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">din</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">off</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">off</span> <span class="o">=</span> <span class="p">((</span><span class="n">off</span><span class="o">/</span><span class="n">BSIZE</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">BSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">din</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">off</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">winode</span><span class="p">(</span><span class="n">rootino</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">din</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">balloc</span><span class="p">(</span><span class="n">freeblock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>其中，</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">nmeta</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">nlog</span> <span class="o">+</span> <span class="n">ninodeblocks</span> <span class="o">+</span> <span class="n">nbitmap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">nblocks</span> <span class="o">=</span> <span class="n">FSSIZE</span> <span class="o">-</span> <span class="n">nmeta</span><span class="p">;</span></span></span></code></pre></div></div>
<p><code>nmeta</code> 是元信息的数目，用 <code>FSSIZE</code> 减去 <code>nmeta</code> 则是用来得到具体数据存储区域的部分</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">uint</span>
</span></span><span class="line"><span class="cl"><span class="nf">xint</span><span class="p">(</span><span class="n">uint</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uchar</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">uchar</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>该函数作用是将传入的 uint 的字节序转换成小端，如果本身运行程序的平台就是小端的，则不会有任何改动</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">wsect</span><span class="p">(</span><span class="n">uint</span> <span class="n">sec</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">lseek</span><span class="p">(</span><span class="n">fsfd</span><span class="p">,</span> <span class="n">sec</span> <span class="o">*</span> <span class="n">BSIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">sec</span> <span class="o">*</span> <span class="n">BSIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">die</span><span class="p">(</span><span class="s">&#34;lseek&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">write</span><span class="p">(</span><span class="n">fsfd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">BSIZE</span><span class="p">)</span> <span class="o">!=</span> <span class="n">BSIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">die</span><span class="p">(</span><span class="s">&#34;write&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里就是先 seek 一段偏移量，之后在写入</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">iappend</span><span class="p">(</span><span class="n">uint</span> <span class="n">inum</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">xp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">xp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">fbn</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">dinode</span> <span class="n">din</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">BSIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">indirect</span><span class="p">[</span><span class="n">NINDIRECT</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">rinode</span><span class="p">(</span><span class="n">inum</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">din</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">off</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// printf(&#34;append inum %d at off %d sz %d\n&#34;, inum, off, n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">fbn</span> <span class="o">=</span> <span class="n">off</span> <span class="o">/</span> <span class="n">BSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">assert</span><span class="p">(</span><span class="n">fbn</span> <span class="o">&lt;</span> <span class="n">MAXFILE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">fbn</span> <span class="o">&lt;</span> <span class="n">NDIRECT</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">fbn</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">fbn</span><span class="p">]</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">freeblock</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">x</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">fbn</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">freeblock</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">rsect</span><span class="p">(</span><span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]),</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">indirect</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">indirect</span><span class="p">[</span><span class="n">fbn</span> <span class="o">-</span> <span class="n">NDIRECT</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">indirect</span><span class="p">[</span><span class="n">fbn</span> <span class="o">-</span> <span class="n">NDIRECT</span><span class="p">]</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">freeblock</span><span class="o">++</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wsect</span><span class="p">(</span><span class="nf">xint</span><span class="p">(</span><span class="n">din</span><span class="p">.</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]),</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">indirect</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">x</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">indirect</span><span class="p">[</span><span class="n">fbn</span><span class="o">-</span><span class="n">NDIRECT</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">n1</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="p">(</span><span class="n">fbn</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">BSIZE</span> <span class="o">-</span> <span class="n">off</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">rsect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bcopy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">buf</span> <span class="o">+</span> <span class="n">off</span> <span class="o">-</span> <span class="p">(</span><span class="n">fbn</span> <span class="o">*</span> <span class="n">BSIZE</span><span class="p">),</span> <span class="n">n1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">wsect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">-=</span> <span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">off</span> <span class="o">+=</span> <span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">+=</span> <span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">din</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="nf">xint</span><span class="p">(</span><span class="n">off</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">winode</span><span class="p">(</span><span class="n">inum</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">din</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>iappend</code> 用于将内容附加到 inode 中</p>
<blockquote>
<p>inode 是文件的抽象表示，每个文件都存在一个唯一编号 <code>i</code> 和文件数据</p>
<p><code>ls</code> 的 <code>-i</code> 参数用来显示文件的 inode 编号
在 xv6 中，inode 的前 <code>NDIRECT</code> 个数据块直接被 inode 结构体的成员引用，而之后的数据块被间接引用（<code>inode</code> 引用了一个数据块，它存放了真正存放数据的数据块的地址）</p>
</blockquote>
<p>使用十六进制编辑器查看 fs.img，可以印证之前看到的代码</p>
<p></p>
<p>这里就是 inode 数据，第一个 <code>.</code> 和第二个 <code>..</code> 之所以编号都为 1，因为在 <code>main</code> 函数中，编号都用的 <code>rootino</code>，而在调用 <code>iappend</code> 的时候大小传入的 <code>sizeof(de)</code> 为 16，这里也是两个文件信息占一行，也就是 32 字节。</p>
<p>这里的首地址是 0xb800，也就是 46 * 1024，这就是数据存储区域的开始，也是根目录这个 inode 的数据，而在下一个 block，也就是 47 * 1024 = 0xbc00 的位置，存放着第一个文件 README 的文本内容</p>
]]></description>
</item>
<item>
    <title>xv6-riscv 源码阅读 —— 用户态: libc</title>
    <link>http://localhost:1313/posts/xv6_riscv_read_user-libc/</link>
    <pubDate>Fri, 17 Jan 2025 11:45:06 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/xv6_riscv_read_user-libc/</guid>
    <description><![CDATA[<h1 id="ulibc">ulibc</h1>
<p>xv6-riscv 实现了一个简单基础的 libc</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Makefile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nv">ULIB</span> <span class="o">=</span> <span class="nv">$U</span>/ulib.o <span class="nv">$U</span>/usys.o <span class="nv">$U</span>/printf.o <span class="nv">$U</span>/umalloc.o
</span></span></code></pre></div></div>
<p>由此可知，其由 ulib.c、printf.c、umalloc.c 和 usys.pl 组成</p>
<h2 id="printfc">printf.c</h2>
<p>首先，<code>printf</code> 基本就是对可变参数进行了处理，并调用 <code>vprintf</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">va_list</span> <span class="n">ap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">va_start</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">fmt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">vprintf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">fmt</span><span class="p">,</span> <span class="n">ap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>va_list</code> 来自 <code>#include &lt;stdarg.h&gt;</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Print to the given fd. Only understands %d, %x, %p, %s.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">vprintf</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="n">va_list</span> <span class="n">ap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">c0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">c0</span> <span class="o">=</span> <span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span> <span class="o">=</span> <span class="sc">&#39;%&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">c0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">c1</span> <span class="o">=</span> <span class="n">c2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">c0</span><span class="p">)</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;d&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;d&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c2</span> <span class="o">==</span> <span class="sc">&#39;d&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c2</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;l&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c2</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printint</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">),</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;p&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printptr</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">uint64</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;s&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">((</span><span class="n">s</span> <span class="o">=</span> <span class="nf">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;(null)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span> <span class="n">s</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c0</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sc">&#39;%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Unknown % sequence.  Print it to draw attention.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sc">&#39;%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">c0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>ulib 实现的 <code>vprintf</code> 是比较简单的，只支持部分占位符</p>
<p><code>c0 = fmt[i] &amp; 0xff</code> 的用处我暂时还没清晰的看到，无论是否和 <code>0xff</code> 按位与，都是那个值。</p>
<p>之后看当前打印的字符是占位符的 <code>%</code> 还是正常字符，正常字符就调用 <code>putc</code>，<code>putc</code> 会直接调用 <code>write</code> 系统调用从而打印出来。</p>
<blockquote>
<p>系统调用</p>
<p>系统调用是操作系统内核暴露给应用程序的接口，Unix 通过 <code>write</code> 系统调用向指定的文件描述符写入内容</p>
<p>在自己的终端上执行 <code>man 2 write</code> 可以查看 Linux kernel 的 <code>write</code> 系统调用的接口描述</p>
<p>ssize_t write(int fd, const void buf[.count], size_t count);</p>
</blockquote>
<p>xv6-riscv 的系统调用和 libc 的函数原型都定义在了 user/user.h 文件中</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span></span></span></code></pre></div></div>
<p>如果是占位符，就将 <code>state</code> 的值修改，这样等下一轮循环的时候，就会根据 <code>state</code> 的值跳到正确的处理逻辑。</p>
<p>这里利用了 <code>printint(int fd, int xx, int base, int sgn)</code> 和 <code>va_arg(ap, type)</code> 完成将值根据占位符做格式转换并输出的目的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">printint</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">xx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">base</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sgn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">neg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">neg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">sgn</span> <span class="o">&amp;&amp;</span> <span class="n">xx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">neg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="n">xx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">xx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">digits</span><span class="p">[</span><span class="n">x</span> <span class="o">%</span> <span class="n">base</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">while</span><span class="p">((</span><span class="n">x</span> <span class="o">/=</span> <span class="n">base</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">neg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">putc</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>va_arg</code> 会根据参数指定的类型把参数列表的值返回出来。<code>base</code> 是指当前值的进制表示，<code>sgn</code> 指是否为 <code>signed</code></p>
<p>这个函数也比较简单，就是根据是否为 <code>signed</code> 从而判断是否存在负数的问题，之后把数字每一位都赋给 <code>buf</code>，然后遍历 <code>buf</code> 的每个字符，都调用一遍 <code>putc</code>。</p>
<h2 id="umallocc">umalloc.c</h2>
<p>这部分的代码实现来自 K&amp;R 的 malloc 的实现</p>
<p>涉及到了一些自定义的类型：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">long</span> <span class="n">Align</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">union</span> <span class="n">header</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">header</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Align</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">header</span> <span class="n">Header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">Header</span> <span class="n">base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="n">freep</span><span class="p">;</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">malloc</span><span class="p">(</span><span class="n">uint</span> <span class="n">nbytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Header</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">prevp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">nunits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">nunits</span> <span class="o">=</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">prevp</span> <span class="o">=</span> <span class="n">freep</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span> <span class="p">;</span> <span class="n">prevp</span> <span class="o">=</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">nunits</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">nunits</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">nunits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nunits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">freep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="nf">morecore</span><span class="p">(</span><span class="n">nunits</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>nunits</code> 的计算中，<code>(nbytes + sizeof(Header) -1)/sizeof(Header)</code> 是为了向上取整，再 <code>+1</code> 是给 <code>Header</code> 预留空间</p>
<p><code>(prevp = freep)</code> 会产生一个返回值，也就是赋的值，所以这段代码用来做初始化工作</p>
<p>之后的 <code>for</code> 循环中</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span> <span class="p">;</span> <span class="n">prevp</span> <span class="o">=</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">nunits</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">nunits</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">nunits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nunits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">freep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="nf">morecore</span><span class="p">(</span><span class="n">nunits</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里就是遍历释放的列表，然后如果能大小合适就给它，如果不合适的话，就调用 <code>morecore</code> 分配一次在 <code>free</code> 掉，之后在下一轮循环分配给它。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="n">Header</span><span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">morecore</span><span class="p">(</span><span class="n">uint</span> <span class="n">nu</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Header</span> <span class="o">*</span><span class="n">hp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">nu</span> <span class="o">&lt;</span> <span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">nu</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="nf">sbrk</span><span class="p">(</span><span class="n">nu</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">hp</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span><span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">hp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nu</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">free</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">hp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">freep</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里涉及到 <code>sbrk</code> 系统调用，用于获取内存空间</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Header</span> <span class="o">*</span><span class="n">bp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">bp</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span><span class="o">*</span><span class="p">)</span><span class="n">ap</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">freep</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span> <span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span> <span class="n">p</span> <span class="o">||</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">bp</span> <span class="o">+</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">bp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">freep</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>for</code> 循环用来找到要回收的地址的相近的节点</p>
<p>而之后的两组 <code>if</code> 都是为了回收这部分地址，我画了一个简单的草图用于方便理解</p>
<p></p>
<p>从这里需要 <code>-1</code> 也能看出之前计算 <code>nunits</code> 最后 <code>+1</code> 操作的用处</p>
<h2 id="ulibc-1">ulib.c</h2>
<p>ulib.c 中基本就是一些字符操作相关的函数了，比如 <code>strlen</code>、<code>memset</code>、<code>atoi</code> 之类的</p>
<p>基本都是一些简单的实现，没什么可说的</p>
<h2 id="usyspl">usys.pl</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-perl">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/perl -w</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate usys.S, the stubs for syscalls.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">print</span> <span class="s">&#34;# generated by usys.pl - do not edit\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">print</span> <span class="s">&#34;#include \&#34;kernel/syscall.h\&#34;\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entry</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$name</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="s">&#34;.global $name\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="s">&#34;${name}:\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="s">&#34; li a7, SYS_${name}\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="s">&#34; ecall\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="s">&#34; ret\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;fork&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;exit&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;wait&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;pipe&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;read&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;write&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;close&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;kill&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;exec&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;mknod&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;unlink&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;fstat&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;link&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;mkdir&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;chdir&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;dup&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;getpid&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;sbrk&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;sleep&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">entry</span><span class="p">(</span><span class="s">&#34;uptime&#34;</span><span class="p">);</span></span></span></code></pre></div></div>
<p>这涉及到一个古老的脚本语言 <a href="https://en.wikipedia.org/wiki/Perl" target="_blank" rel="noopener noreffer ">Perl</a></p>
<p>该脚本会生成一份汇编代码文件</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="c1"># generated by usys.pl - do not edit
</span></span></span><span class="line"><span class="cl"><span class="c1">#include &#34;kernel/syscall.h&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="na">.global</span> <span class="no">fork</span>
</span></span><span class="line"><span class="cl"><span class="nl">fork:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_fork</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">exit</span>
</span></span><span class="line"><span class="cl"><span class="nl">exit:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_exit</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">wait</span>
</span></span><span class="line"><span class="cl"><span class="nl">wait:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_wait</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">pipe</span>
</span></span><span class="line"><span class="cl"><span class="nl">pipe:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_pipe</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">read</span>
</span></span><span class="line"><span class="cl"><span class="nl">read:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_read</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">write</span>
</span></span><span class="line"><span class="cl"><span class="nl">write:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_write</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">close</span>
</span></span><span class="line"><span class="cl"><span class="nl">close:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_close</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">kill</span>
</span></span><span class="line"><span class="cl"><span class="nl">kill:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_kill</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">exec</span>
</span></span><span class="line"><span class="cl"><span class="nl">exec:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_exec</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">open</span>
</span></span><span class="line"><span class="cl"><span class="nl">open:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_open</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">mknod</span>
</span></span><span class="line"><span class="cl"><span class="nl">mknod:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_mknod</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">unlink</span>
</span></span><span class="line"><span class="cl"><span class="nl">unlink:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_unlink</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">fstat</span>
</span></span><span class="line"><span class="cl"><span class="nl">fstat:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_fstat</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">link</span>
</span></span><span class="line"><span class="cl"><span class="nl">link:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_link</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">mkdir</span>
</span></span><span class="line"><span class="cl"><span class="nl">mkdir:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_mkdir</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">chdir</span>
</span></span><span class="line"><span class="cl"><span class="nl">chdir:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_chdir</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">dup</span>
</span></span><span class="line"><span class="cl"><span class="nl">dup:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_dup</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">getpid</span>
</span></span><span class="line"><span class="cl"><span class="nl">getpid:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_getpid</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">sbrk</span>
</span></span><span class="line"><span class="cl"><span class="nl">sbrk:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_sbrk</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">sleep</span>
</span></span><span class="line"><span class="cl"><span class="nl">sleep:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_sleep</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span>
</span></span><span class="line"><span class="cl"><span class="na">.global</span> <span class="no">uptime</span>
</span></span><span class="line"><span class="cl"><span class="nl">uptime:</span>
</span></span><span class="line"><span class="cl"> <span class="nf">li</span> <span class="no">a7</span><span class="p">,</span> <span class="no">SYS_uptime</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ecall</span>
</span></span><span class="line"><span class="cl"> <span class="nf">ret</span></span></span></code></pre></div></div>
<p>用来处理系统调用跳转的，RISC-V 规定了 <code>a7</code> 寄存器用于存放系统调用号，而 <code>ecall</code> 用于调用系统调用，amd64 结构也有类似的指令 <code>syscall</code></p>
]]></description>
</item>
<item>
    <title>Gentoo Linux 安全加固指南</title>
    <link>http://localhost:1313/posts/gentoo_hardened_guide/</link>
    <pubDate>Tue, 07 Jan 2025 10:00:36 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentoo_hardened_guide/</guid>
    <description><![CDATA[<h1 id="gentoo-linux-安全加固指南">Gentoo Linux 安全加固指南</h1>
<blockquote>
<ul>
<li>2025 年 1 月 8/9/10 号修改
<ul>
<li>添加了 VSCodium 的 bwrap 启动参数</li>
<li>修改了 sysctl 和内核启动参数部分</li>
<li>添加了 Chromium 的 bwrap 启动参数</li>
<li>添加了 NetworkManager 部分</li>
</ul>
</li>
<li>2025 年 1 月 13 号修改
<ul>
<li>修改了bwrap 中 FireFox 部分，让它可以响应 <code>xdg-open</code></li>
<li>添加了禁止核心转储 (core dump) 的段落</li>
<li>添加了面向安全的编译选项部分</li>
</ul>
</li>
<li>2025 年 1 月 19 号修改
<ul>
<li>添加了 NetworkManager 下开启 IPV6 隐私扩展的描述</li>
<li>修改了 编译选项 的部分</li>
</ul>
</li>
<li>2025 年 1 月 27/28 号修改
<ul>
<li>在 sysctl 和内核参数部分添加了更多的解释</li>
<li>修改了文章中部分语句不通，不好理解的地方</li>
</ul>
</li>
</ul>
</blockquote>
<p>我一直在寻求一个尽可能不影响日常使用的同时尽量做到安全的操作系统。</p>
<p>单论安全性，我认为 <a href="https://www.qubes-os.org/" target="_blank" rel="noopener noreffer ">Qubes OS</a> 很不错，但是网络配置看起来不是很容易，并且社区貌似不是很大。</p>
<p>Fedora Silverblue 也是个不错的选择，原子更新，桌面应用大多是从 Flatpak 安装，不过我对 Fedora 官方软件仓库没有我想要的软件这一情况一直有些介意，虽然有 COPR 源，但我不是特别想用。</p>
<p>NixOS 也是个选择，同样是不可变发行版，nixpkg 提供了很多软件包，包括 linux-hardened、hardened-malloc 等，NixOS 官方有一套 security profile，不过我还没尝试，印象中是使用了 linux-hardened 内核，启用了一些安全相关的 sysctl 设置，将内存分配器改成 scudo（好像还启用了 AppArmor？）</p>
<p>我目前认为 Gentoo Linux 是一个不错的选择，但由于 Gentoo Linux 编译真的很费时间，所以我放假回来才开始尝试一些我以前想过但没尝试的功能。</p>
<h2 id="硬盘加密">硬盘加密</h2>
<p>我现在认为硬盘加密是一个必须的选择。我选择了 Luks2 的 argon2id 算法，这导致我需要使用 systemd-boot，GRUB 对 Luks2 的支持有限。</p>
<p>在硬盘分区时，根据 <a href="https://wiki.gentoo.org/wiki/Rootfs_encryption" target="_blank" rel="noopener noreffer ">Rootfs_encryption</a>，直接执行：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha512 --iter-time <span class="m">5000</span> --key-size <span class="m">256</span> --pbkdf argon2id --use-urandom --verify-passphrase luksFormat /dev/block</span></span></code></pre></div></div>
<p>如何你想使用 GRUB 作为 bootloader（比如你有引导 windows 启动项的需求等），那就不能使用 luks2，应该选择用 luks 的算法。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cryptsetup luksOpen /dev/block root
</span></span><span class="line"><span class="cl">$ mkfs.xfs -L rootfs /dev/mapper/root
</span></span><span class="line"><span class="cl">$ mount --label rootfs /mnt/gentoo</span></span></code></pre></div></div>
<p>这样就可以将其格式化成 XFS 文件系统了，我没有使用 SWAP 分区，我选择了使用 ZRAM 做交换分区，不过加密的 SWAP 倒也是个选择，只是我没这么做。</p>
<p>之后你需要附加相关命令行参数用于解锁：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ lsblk -o name,uuid
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">NAME        UUID
</span></span><span class="line"><span class="cl">sdb                                           
</span></span><span class="line"><span class="cl">├─nvme0n1p1 BDF2-0139
</span></span><span class="line"><span class="cl">├─nvme0n1p2 b0e86bef-30f8-4e3b-ae35-3fa2c6ae705b
</span></span><span class="line"><span class="cl">└─nvme0n1p3 4bb45bd6-9ed9-44b3-b547-b411079f043b
</span></span><span class="line"><span class="cl">  └─root    cb070f9e-da0e-4bc5-825c-b01bb2707704</span></span></code></pre></div></div>
<p>假设输出是上面这样，那么应该在 <strong>/etc/dracut.conf.d/luks.conf</strong> 下写入：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">kernel_cmdline+=&#34; root=UUID=cb070f9e-da0e-4bc5-825c-b01bb2707704 rd.luks.uuid=4bb45bd6-9ed9-44b3-b547-b411079f043b &#34;</span></span></code></pre></div></div>
<h2 id="安全启动">安全启动</h2>
<p>安全启动是个耳熟能详的名词，我在刚接触到给自己的笔记本电脑安装 GNU/Linux 发行版的教程的时候，一般都会说明首先要在 BIOS 中关闭快速启动和安全启动，部分社区支持的发行版无法在开启安全启动的情况下安装（不过可以安装时/后开启安全启动的支持），商业公司支持的（如 Fedora，OpenSUSE，Deepin 等）发行版应该是都可以直接启动安装。</p>
<p>安全启动是 UEFI 下才有的安全验证机制，旨在确保引导的操作系统是可信的。</p>
<p>只需要在安装的过程中对照着手册，看到安全启动的部分就跟着手册来就行。</p>
<p>这里有一点，Shim 被硬编码为使用 grubx64.efi，但是由于我使用的 systemd-boot 作为 bootloader，没有 grubx64.efi，所以我选择了将 systemd-bootx64.efi 复制一个 grubx64.efi 出来。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cp /efi/EFI/systemd/systemd-bootx64.efi /efi/EFI/systemd/grubx64.efi</span></span></code></pre></div></div>
<h2 id="bwrap">bwrap</h2>
<p>沙盒程序就这两位我还算熟悉，<a href="https://github.com/netblue30/firejail" target="_blank" rel="noopener noreffer ">Firejail</a> 和 <a href="https://github.com/containers/bubblewrap" target="_blank" rel="noopener noreffer ">Bubblewrap</a>。前者有令人诟病的 setuid 安全隐患，后者没有 Firejail 那样有社区提供好的沙盒模板（即部分应用可以运行一个命令直接获得沙盒化，如 git，firefox 等）</p>
<p>我选择了 Bubblewrap（也就是标题中的 bwrap），目前只用到了浏览器和我的代码编辑器上，我目前的目标是，让使用的图形化软件基本都套一层 bwrap（除了终端模拟器）</p>
<p>对于到底应该 <code>--ro-bind</code> 什么文件，可以用 <code>strace -e openat</code> 看一下该程序到底尝试打开什么文件，然后决定到底要不要映射过去</p>
<h3 id="firefox">FireFox</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --symlink /usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   --bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    xdg-dbus-proxy <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    unix:path<span class="o">=</span>/var/run/user/<span class="nv">$UID</span>/bus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /run/user/<span class="nv">$UID</span>/.dbus-proxy/session-bus-proxy-6271 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --filter <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mpris.MediaPlayer2.firefox.*&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mozilla.firefox.*&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --own<span class="o">=</span><span class="s2">&#34;org.mozilla.firefox_beta.*&#34;</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /opt/bin /opt/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/egl /usr/share/egl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/nvidia /usr/share/nvidia <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /usr/share/ca-certificates /usr/share/ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /run/user/<span class="nv">$UID</span>/bus /run/user/<span class="nv">$UID</span>/bus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/shm /dev/shm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia0 /dev/nvidia0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidiactl /dev/nvidiactl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia-uvm /dev/nvidia-uvm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --dev-bind /dev/nvidia-modeset /dev/nvidia-modeset <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind /sys /sys <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="nv">$HOME</span>/.config/dconf <span class="nv">$HOME</span>/.config/dconf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ro-bind <span class="nv">$HOME</span>/.config/user-dirs.dirs <span class="nv">$HOME</span>/.config/user-dirs.dirs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="nv">$HOME</span>/.mozilla <span class="nv">$HOME</span>/.mozilla <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv GTK_THEME Papirus:light <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv MOZ_ENABLE_WAYLAND <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --setenv PATH /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --hostname RESTRICTED <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --die-with-parent <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  /usr/bin/firefox <span class="nv">$@</span></span></span></code></pre></div></div>
<p>Chromium 的编译时间实在太长了（虽然 FireFox 的也没差到哪去，开启了 LTO 和 PGO 之后编译时间感人），我又用回来了这位</p>
<p>由于我有了其他软件从系统默认浏览器打开链接的需求，所以就用 xdg-dbus-proxy 设置了相关服务，并且我 waybar 的 mpris 组件也能显示 FireFox 播放的媒体了。</p>
<p>我使用了 nvidia-vaapi-driver，所以设备上暴露了一些 nvidia 的，这个 /dev/nvidia-uvm 一开始是没有的，我运行了 <code>vainfo</code> 之后就会出现，所以现在有一个抽象的事情就是我会先在 foot 上执行一遍 vainfo，之后打开 FireFox。这套是可以用上 nvidia-vaapi-driver 的硬件视频解码的，如果 FireFox 能支持 nvenc 就更好了。</p>
<h3 id="vscodium">VSCodium</h3>
<p>vscodium 基本照搬的 下面的 Chromium 的配置</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/locale /usr/share/locale <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/zoneinfo /usr/share/zoneinfo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/verilator /usr/share/verilator <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/include /usr/include <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/chromium /etc/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/localtime /etc/localtime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /opt/vscodium/ /opt/vscodium/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/dev/char /sys/dev/char <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/devices/pci0000:00 /sys/devices/pci0000:00 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.config/VSCodium <span class="nv">$HOME</span>/.config/VSCodium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.vscode-oss <span class="nv">$HOME</span>/.vscode-oss <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Documents <span class="nv">$HOME</span>/Documents <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/codpjt <span class="nv">$HOME</span>/codpjt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/git_repo <span class="nv">$HOME</span>/git_repo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--setenv GTK_THEME Papirus:light <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--hostname RESTRICTED <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>/opt/vscodium/codium --ozone-platform<span class="o">=</span>wayland --use-gl<span class="o">=</span>angle --use-angle<span class="o">=</span>vulkan --enable-features<span class="o">=</span>AcceleratedVideoEncoder,AcceleratedVideoDecodeLinuxGL,VaapiOnNvidiaGPUs,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE --ignore-gpu-blocklist --disable-gpu-driver-bug-workaround --enable-wayland-ime</span></span></code></pre></div></div>
<h3 id="chromium">Chromium</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bwrap <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib /lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/lib64 /lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--symlink usr/bin /sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib /usr/lib <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/lib64 /usr/lib64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/bin /usr/bin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ssl /etc/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ca-certificates.conf /etc/ca-certificates.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/fonts /etc/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/resolv.conf /etc/resolv.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/chromium /etc/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/localtime /etc/localtime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.conf /etc/ld.so.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /etc/ld.so.cache /etc/ld.so.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/applications /usr/share/applications <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/gtk-3.0 /usr/share/gtk-3.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icu /usr/share/icu <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/drirc.d /usr/share/drirc.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/fonts /usr/share/fonts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glib-2.0 /usr/share/glib-2.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/glvnd /usr/share/glvnd <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/X11/xkb /usr/share/X11/xkb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/icons /usr/share/icons <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/mime /usr/share/mime <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/zoneinfo /usr/share/zoneinfo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/pixmaps /usr/share/pixmaps <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/locale /usr/share/locale <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /usr/share/vulkan /usr/share/vulkan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev /dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dev-bind /dev/dri /dev/dri <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--proc /proc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/dev/char /sys/dev/char <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /sys/devices/pci0000:00 /sys/devices/pci0000:00 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind /run/dbus /run/dbus <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/wayland-1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pipewire-0&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pipewire-0&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--ro-bind <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_RUNTIME_DIR</span><span class="s2">/pulse&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--tmpfs /tmp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--dir <span class="nv">$HOME</span>/.cache <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/.config/chromium <span class="nv">$HOME</span>/.config/chromium <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--bind <span class="nv">$HOME</span>/Downloads <span class="nv">$HOME</span>/Downloads <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--unshare-all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--share-net <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--die-with-parent <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--new-session <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>/usr/bin/chromium</span></span></code></pre></div></div>
<p>使用 FireFox 的时候还在用我的 NVIDIA 显卡驱动，由于 FireFox 官方并不支持 NVENC 视频解码（虽然可以通过安装 media-libs/nvidia-vaapi-driver 实现翻译）</p>
<p>由于使用 FireFox 打开部分网站速度不佳，我选择了 Chromium（由于 media-libs/libpng 依赖问题，我把 FireFox 删除了）</p>
<p>使用 Chromium 的时候是 Intel 的核显驱动，安装了 media-libs/libva-intel-media-driver 软件包，这套 bwrap 参数可以让 Chromium 用到显卡的视频解码，由于 Gentoo 的 Chromium 会读取 /etc/chromium/ 下的文件作为 Chromium 启动时的命令行参数，所以我把参数都放到那里了</p>
<p>我这套选项可能有的有些多余，不过我懒得再裁剪了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">--ozone-platform=wayland --use-gl=angle --use-angle=vulkan --enable-features=AcceleratedVideoEncoder,AcceleratedVideoDecodeLinuxGL,VaapiOnNvidiaGPUs,VaapiIgnoreDriverChecks,Vulkan,DefaultANGLEVulkan,VulkanFromANGLE --ignore-gpu-blocklist --disable-gpu-driver-bug-workaround --enable-wayland-ime --wayland-text-input-version=3</span></span></code></pre></div></div>
<h2 id="sysctl">sysctl</h2>
<p>我参考了一些文章给出的 sysctl 配置，新建目录 /etc/sysctl.d/，并新建文件 99-hardened.conf，文件内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">core_pattern</span><span class="o">=|/</span><span class="n">bin</span><span class="o">/</span><span class="bp">false</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">kptr_restrict</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">dmesg_restrict</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">unprivileged_bpf_disabled</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">bpf_jit_harden</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">dev</span><span class="o">.</span><span class="n">tty</span><span class="o">.</span><span class="n">ldisc_autoload</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">unprivileged_userfaultfd</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">kexec_load_disabled</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">sysrq</span><span class="o">=</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_syncookies</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_rfc1337</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_timestamps</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">rp_filter</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">rp_filter</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">secure_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">secure_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">send_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">send_redirects</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">icmp_echo_ignore_all</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_source_route</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">use_tempaddr</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">use_tempaddr</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">accept_ra</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">net</span><span class="o">.</span><span class="n">ipv6</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_ra</span><span class="o">=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span><span class="o">.</span><span class="n">yama</span><span class="o">.</span><span class="n">ptrace_scope</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">mmap_rnd_bits</span><span class="o">=</span><span class="mi">32</span>
</span></span><span class="line"><span class="cl"><span class="n">vm</span><span class="o">.</span><span class="n">mmap_rnd_compat_bits</span><span class="o">=</span><span class="mi">16</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_symlinks</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_hardlinks</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_fifos</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">fs</span><span class="o">.</span><span class="n">protected_regular</span><span class="o">=</span><span class="mi">2</span></span></span></code></pre></div></div>
<p><code>kernel.yama.ptrace_scope=1</code> 貌似是默认的？为了更安全可以选择 <code>2</code> 或 <code>3</code>，我印象中 2 是不允许非 root 用户做这件事，而 3 这是不允许该行为</p>
<p>我设置为 1 是允许父子进程关系才可以查看进程的内存和运行状态等信息，这是因为我仍然有调试软件的需求，如果没有的话设置死也是个选择 🤔</p>
<p>可以安装 <a href="https://github.com/slimm609/checksec" target="_blank" rel="noopener noreffer ">checksec</a> 查看当前运行的 kernel 的安全性（当然，该工具检查的并不全面）</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ checksec --kernel 
</span></span><span class="line"><span class="cl">* Kernel protection information:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Description - List the status of kernel protection mechanisms. Rather than
</span></span><span class="line"><span class="cl">  inspect kernel mechanisms that may aid in the prevention of exploitation of
</span></span><span class="line"><span class="cl">  userspace processes, this option lists the status of kernel configuration
</span></span><span class="line"><span class="cl">  options that harden the kernel itself against attack.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Kernel config:
</span></span><span class="line"><span class="cl">/proc/config.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Vanilla Kernel ASLR:                    Full
</span></span><span class="line"><span class="cl">  NX protection:                          Enabled
</span></span><span class="line"><span class="cl">  Protected symlinks:                     Enabled
</span></span><span class="line"><span class="cl">  Protected hardlinks:                    Enabled
</span></span><span class="line"><span class="cl">  Protected fifos:                        Enabled
</span></span><span class="line"><span class="cl">  Protected regular:                      Enabled
</span></span><span class="line"><span class="cl">  Ipv4 reverse path filtering:            Enabled
</span></span><span class="line"><span class="cl">  Kernel heap randomization:              Enabled
</span></span><span class="line"><span class="cl">  GCC stack protector support:            Enabled
</span></span><span class="line"><span class="cl">  GCC stack protector strong:             Enabled
</span></span><span class="line"><span class="cl">  SLAB freelist randomization:            Enabled
</span></span><span class="line"><span class="cl">  Virtually-mapped kernel stack:          Enabled
</span></span><span class="line"><span class="cl">  Restrict /dev/mem access:               Enabled
</span></span><span class="line"><span class="cl">  Restrict I/O access to /dev/mem:        Enabled
</span></span><span class="line"><span class="cl">  Exec Shield:                            Unsupported
</span></span><span class="line"><span class="cl">  YAMA:                                   Active
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Hardened Usercopy:                      Enabled
</span></span><span class="line"><span class="cl">  Harden str/mem functions:               Enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* X86 only:            
</span></span><span class="line"><span class="cl">  Address space layout randomization:     Enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* SELinux:                                Disabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  SELinux infomation available here: 
</span></span><span class="line"><span class="cl">    http://selinuxproject.org/</span></span></code></pre></div></div>
<p>这里除了 SELinux 没有开启之外，其他都是通过检查的</p>
<p>印象中还有一个项目，它检查内核配置比这个更全面，除了基本的这些之外，还有 <a href="https://kspp.github.io/" target="_blank" rel="noopener noreffer ">KSPP</a> (Kenrel Self Protection Project) 和 PAX 等项目的建议，不过我没用它</p>
<p><code>checksec</code> 还可以检查指定的可执行文件的安全配置情况</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ checksec --file<span class="o">=</span>/usr/bin/sway
</span></span><span class="line"><span class="cl">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	    Symbols	     FORTIFY	 Fortified  Fortifiable	FILE
</span></span><span class="line"><span class="cl">Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   No Symbols	Partial	9		18		/usr/bin/sway</span></span></code></pre></div></div>
<h2 id="内核命令行参数">内核命令行参数</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">page_alloc.shuffle=1 pti=on vsyscall=none module.sig_enforce=1 lockdown=confidentiality quiet loglevel=0
</span></span><span class="line"><span class="cl">intel_iommu=on amd_iommu=force_isolation efi=disable_early_pci_dma iommu=force iommu.passthrough=0 iommu.strict=1
</span></span><span class="line"><span class="cl">spectre_v2=on spec_store_bypass_disable=on tsx=off tsx_async_abort=full mds=full l1tf=full,force kvm.nx_huge_pages=force</span></span></code></pre></div></div>
<p>第一行中的启动参数是开启一些常见的安全防护机制，比如页表隔离，模块签名验证等，其实有更多的参数可以写，比如 <code>slab_nomerge</code> 和 <code>randomize_kstack_offset=on</code> 这些，不过由于我使用的内核是 hardened USE 变量的 gentoo-kernel，这些已经在编译的时候开启了，我就不在这里写了</p>
<p>第二行是开启一些 IOMMU 防护</p>
<p>第三行是开启 Spectre 等 CPU 漏洞的缓解机制</p>
<p>如果要检查当前运行的 CPU 是否受到已知漏洞的影响，可以运行</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ grep -r . /sys/devices/system/cpu/vulnerabilities/</span></span></code></pre></div></div>
<h2 id="networkmanager">NetworkManager</h2>
<p>NetworkManager 是目前大多数用户使用的桌面环境都在用的网络管理工具，它既可以管理有线网络，也可以管理无线网络。</p>
<p>应该开启 NetworkManager 的 MAC 地址随机化</p>
<p>在 /etc/NetworkManager/conf.d/ 下创建 99-macrandomize.conf</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[device]
</span></span><span class="line"><span class="cl">wifi.scan-rand-mac-address=yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[connection]
</span></span><span class="line"><span class="cl">wifi.cloned-mac-address=random
</span></span><span class="line"><span class="cl">ethernet.cloned-mac-address=random</span></span></code></pre></div></div>
<p>我使用的是 Hyprland 窗口管理器，这些窗口管理器基本都有一个缺陷 —— 没有自家的 keyring 服务（GNOME 有 gnome-keyring，KDE Plasma 有 kwallet）</p>
<p>我安装了 gnome-base/gnome-keyring，并且运行了 <code>systemctl --user enable --now gnome-keyring-daemon</code></p>
<p>之后我安装了 gnome-extra/nm-applet 用来连接 WIFI，并使用网络编辑，在 WIFI 安全性中改成仅为该用户存储密码</p>
<p>如果要安装 gnome-extra/nm-applet 的话，最好启用 <code>appindicator</code> USE 变量</p>
<p>之后是开启 IPV6 隐私扩展</p>
<p>新建 /etc/NetworkManager/conf.d/ip6-privacy.conf，其内容为</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[connection]
</span></span><span class="line"><span class="cl">ipv6.ip6-privacy=2</span></span></code></pre></div></div>
<p>在 /etc/NetworkManager/system-connections/ 下编辑已有的连接</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">[ipv6]
</span></span><span class="line"><span class="cl">method=auto
</span></span><span class="line"><span class="cl">ip6-privacy=2
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<p>添加这个 <code>ip6-privacy=2</code></p>
<h2 id="浏览器配置">浏览器配置</h2>
<p>FireFox 我推荐 <a href="https://github.com/arkenfox/user.js" target="_blank" rel="noopener noreffer ">arkenfox/user.js</a> 项目，搭配 <a href="https://github.com/gorhill/uBlock" target="_blank" rel="noopener noreffer ">uBlock Origin</a></p>
<p>如果为了防止被网站跟踪，可以选择使用 Mullvad Browser，这位是和 Tor Project 联合开发，并去除了 Tor 的部分</p>
<p>Chromium 的话，我选择根据 <a href="https://www.chromium.org/administrators/policy-templates/" target="_blank" rel="noopener noreffer ">Policy Templates</a> 配置一些策略</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxAdMeasurementEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxAdTopicsEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxPromptEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;PrivacySandboxSiteEnabledAdsEnabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AudioSandboxEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;NetworkServiceSandboxEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AutoplayAllowed&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;BlockThirdPartyCookies&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SavingBrowserHistoryDisabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;EncryptedClientHelloEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;HttpsUpgradesEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;WebRtcIPHandling&#34;</span><span class="p">:</span> <span class="s2">&#34;disable_non_proxied_udp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingEnabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingProtectionLevel&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;SafeBrowsingProxiedRealTimeChecksAllowed&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;CACertificateManagementAllowed&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>写完可以用 <code>jq</code> 验证一下 JSON 格式对不对 <code>cat test.json | jq</code></p>
<p>我在 Chromium 上依旧在使用 uBlock Origin，也不知道 Chromium 什么时候开始停止支持 Mainfest V2 标准的浏览器扩展</p>
<h2 id="禁用-core-dump">禁用 core dump</h2>
<p>禁用 core dump 貌似是为了防止有写私密数据也被 dump 下来了。不过就我个人而言，我只是很讨厌这种在我不知道的时候 dump 的行为，不知不觉运行 <code>coredumpctl</code> 一看，python、firefox 这些软件都 dump 过，难绷。</p>
<p>新建 /etc/systemd/coredump.conf.d/disable.conf 中写入</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[Coredump]
</span></span><span class="line"><span class="cl">Storage=none
</span></span><span class="line"><span class="cl">ProcessSizeMax=0</span></span></code></pre></div></div>
<p>上面 sysctl 的 <code>kernel.core_pattern=|/bin/false</code> 也是在禁用 core dump</p>
<p>不得不说，禁用了之后，我自己开发的软件 core dump 了也没存。有一说一，core dump 还是有助于开发的，等之后我手动临时开启试试看吧。</p>
<h2 id="面向安全的编译选项">面向安全的编译选项</h2>
<p>在我最先写这个文章的时候，我就想写这部分，但是由于我对 GCC 和 LLVM 的了解还太少，导致我有些迟疑（当然，现在也了解不多，只是感觉应该加上而已）</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">COMMON_FLAGS=&#34;-O3 -pipe -march=x86-64-v3 -flto=thin -fstack-protector-strong -fstack-clash-protection -fcf-protection=full -D_FORTIFY_SOURCE=3&#34;
</span></span><span class="line"><span class="cl">RUSTFLAGS=&#34;${RUSTFLAGS} -C target-cpu=native&#34;
</span></span><span class="line"><span class="cl">CFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FCFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">FFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">LDFLAGS=&#34;-Wl,-O3,-z,now,--as-needed,--lto-O3,--icf=safe,--gc-sections&#34;</span></span></code></pre></div></div>
<p>我使用的是 LLVM/systemd profile，所以这里用了 thinlto</p>
<p>上面就是我个人的编译选项了，我本身就开启了 <code>hardened</code> USE 变量，说实话，这里的部分 USE 变量是重复的</p>
<p>只要开启了 <code>hardened</code> USE 变量，这里面有些选项是默认就加上的</p>
<blockquote>
<p>运行 <code>clang --version</code> 可以看到</p>
<p>Configuration file: /etc/clang/x86_64-pc-linux-gnu-clang.cfg</p>
<p>从那个文件中可以看到它依赖于 @gentoo-common.cfg @gentoo-common-ld.cfg 和 @gentoo-cet.cfg</p>
<p>我这里的 -fstack-clash-protection -fstack-protector-strong -fcf-protection=all 在在上面的文件中</p>
</blockquote>
<p><code>fstack-protector-*</code> 都是对栈溢出的防御，而 <code>fcf-protection</code> 则是对控制流劫持（也不知道是不是这个名字，就是 ROP 之类的）攻击的防御</p>
<p>LLVM 中也有一个应对 ROP 这种攻击的技术，就是 <a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html" target="_blank" rel="noopener noreffer ">CFI</a>，CFI 必须在开启了 LTO 的情况下才能使用（我印象中 KCFI 不需要 LTO，它被用在操作系统内核等底层软件，检测的范围更小），我感觉为特定的软件开 CFI，倒也可以接受。Linux kernel 有专门的 CFI 的选项，Chromium 也实施了 CFI。</p>
<p>CFI 还分前端和后端，我也没太仔细研究，也不太清楚区别</p>
<p>我使用了 <code>O3</code> 编译，虽然说 O3 的提升空间不大，不过我个人希望试试看。</p>
<p><code>march=x86-64-v3</code> 表示了我本机 CPU 的指令集是这位，其实用 <code>march=native</code> 就行，编译器会自动选择适合的指令集</p>
<p><code>D_FORTIFY_SOURCE=3</code> 用于应用 libc 的一种强化措施，主要用于检测某些库函数的缓冲区溢出问题。具体可以参考 glibc 的文档：https://www.gnu.org/software/libc/manual/html_node/Source-Fortification.html</p>
<h2 id="selinuxapparmor">SELinux/AppArmor</h2>
<p>TODO 我自己还没太准备学习这二位</p>
]]></description>
</item>
</channel>
</rss>
