<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux_杂谈 - Category - 索元的博客</title>
        <link>http://localhost:1313/categories/linux_%E6%9D%82%E8%B0%88/</link>
        <description>Linux_杂谈 - Category - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Fri, 13 Sep 2024 10:50:42 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/linux_%E6%9D%82%E8%B0%88/" rel="self" type="application/rss+xml" /><item>
    <title>使用 Hyprland</title>
    <link>http://localhost:1313/posts/hyprland_tour/</link>
    <pubDate>Fri, 13 Sep 2024 10:50:42 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/hyprland_tour/</guid>
    <description><![CDATA[<h1 id="使用-hyprland">使用 Hyprland</h1>
<p>目前也用 Hyprland 几个月了，故而写了这篇面向准备使用 Hyprland 的人群。</p>
<p><a href="https://github.com/hyprwm/Hyprland" target="_blank" rel="noopener noreffer ">Hyprland</a> 是由 C++ 编写，少数不使用 <a href="https://gitlab.freedesktop.org/wlroots/wlroots" target="_blank" rel="noopener noreffer ">wlroots</a> 的平铺式窗口管理器。默认足够漂亮，并且也还好用。好用指的是实现了 text-input-v1，并且支持将 XWayland 的缩放设置为 0 而不是跟着全局的缩放走。实现了 text-input-v1 就可以让 Electron 的软件在跑在 Wayland 下也可以使用 fcitx 中文输入法。</p>
<p>Hyprland 是在 0.42 版本开始完全不依赖于 wlroots 的，<a href="https://github.com/hyprwm/Hyprland/releases/tag/v0.43.0" target="_blank" rel="noopener noreffer ">0.43</a> 就把编译所需的 C++ 标准提到 C++ 26 了，不过本身我 C++ 的水平不是很高，我本身对 C++ 26 也没有太多的关注，我又不是个语言律师，也不好评价这个决定。不得不说，这一定程度上把编译工具链的要求提高了一些。</p>
<p>Hyprland 的功耗比 sway 大一些。</p>
<h2 id="配置文件">配置文件</h2>
<p>Hyprland 安装自带的默认配置文件基本还可以，对一些基础的东西都做了设置。你需要设置的大多是环境变量的设置，窗口规则以及自动启动的软件。</p>
<p>我目前对窗口规则只设置了一点，也是遇到了需要设定的软件再添加。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">windowrulev2 = opacity 0.90, class:.*
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: brave-browser
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: firefox
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: Terraria.bin.x86_64
</span></span><span class="line"><span class="cl">windowrulev2 = opacity 1, class: org.gnome.Epiphany
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = float, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = float, title: ^(Library)(.*)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: localsend
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: xdg-desktop-portal-*
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, class: ^(wofi)$
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: Bookmarks backup
</span></span><span class="line"><span class="cl">windowrulev2 = size 50% 50%, title: ^(Library)(.*)$</span></span></code></pre></div></div>
<p>这里我只是将所有窗口都不透明度设置为 0.9，并且将一些额外需要设定的应用（比如浏览器和游戏）的不透明度还是拉满。</p>
<p>有些窗口我并不希望是全屏显示，所以我额外设置它们的 size。</p>
<p>对于环境变量，我只是额外设定了 fcitx5 的环境变量。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">env = LIBVA_DRIVER_NAME, nvidia
</span></span><span class="line"><span class="cl">env = NVD_BACKEND, direct
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORM, wayland
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = QT_QPA_PLATFORMTHEME, qt6ct
</span></span><span class="line"><span class="cl">env = XDG_CURRENT_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_TYPE, wayland
</span></span><span class="line"><span class="cl">env = XDG_SESSION_DESKTOP, Hyprland
</span></span><span class="line"><span class="cl">env = EDITOR, /usr/bin/nvim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">env = LANG,zh_CN.UTF-8
</span></span><span class="line"><span class="cl">env = QT_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = XMODIFIERS, @im=fcitx
</span></span><span class="line"><span class="cl">env = SDL_IM_MODULE, fcitx
</span></span><span class="line"><span class="cl">env = INPUT_METHOD, fcitx
</span></span><span class="line"><span class="cl">env = GLFW_IM_MODULE, ibus</span></span></code></pre></div></div>
<p><code>LIBVA_DRIVER_NAME</code> 是配合 <a href="https://github.com/elFarto/nvidia-vaapi-driver" target="_blank" rel="noopener noreffer ">nvidia-vaapi-driver</a> 用的。<code>LANG</code> 是当前系统的语言，我通过这个设置系统语言为中文，但是我在 <strong>.bashrc</strong> 文件重新设置回英文了。</p>
<p>对于自动启动的应用，只需要这么写:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-conf">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">exec-once = /usr/bin/wlsunset -t 2500 -T 3000
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/mako
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/fcitx5 -d
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/blueman-applet
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/swaybg -i &#34;/home/zuos/Pictures/magic_planet.png&#34; -m fill
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/waybar -c /home/zuos/.config/waybar/waybar.json
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/hyprctl setcursor &#34;Tela&#34; 24
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface icon-theme &#39;Papirus&#39;
</span></span><span class="line"><span class="cl">exec-once = /usr/bin/gsettings set org.gnome.desktop.interface font-name &#39;Noto Sans Mono CJK SC 12&#39;</span></span></code></pre></div></div>
<p><a href="https://sr.ht/~kennylevinsen/wlsunset/" target="_blank" rel="noopener noreffer ">wlsunset</a> 是一个设置屏幕色温的软件，我需要一个支持设置 night light 的软件，所以我选择了这位。</p>
<p><a href="https://github.com/emersion/mako" target="_blank" rel="noopener noreffer ">mako</a> 是一个通知组件，<a href="https://github.com/blueman-project/blueman" target="_blank" rel="noopener noreffer ">blueman</a> 是一个蓝牙连接相关的 GUI 软件，<code>blueman-applet</code> 可以启动它的系统托盘。</p>
<p><a href="https://github.com/swaywm/swaybg" target="_blank" rel="noopener noreffer ">swaybg</a> 用于设置壁纸，Hyprlan 存在一个 <a href="https://github.com/hyprwm/hyprpaper" target="_blank" rel="noopener noreffer ">hyprpaper</a> 设置壁纸的软件，但是其功能我不是很需要。</p>
<p><code>hyprctl</code> 是随安装 Hyprland 就带的，可以获取当前桌面窗口类等信息，并且可以设置鼠标主题和大小，我这里就是干这个用的。</p>
<p>后面两个 <code>gsettings</code> 就是设置图标主题和字体主题。</p>
<h2 id="需要额外用到的软件">需要额外用到的软件</h2>
<p>可以参考 <a href="https://wiki.hyprland.org/Useful-Utilities/" target="_blank" rel="noopener noreffer ">Hyprland wiki</a>。</p>
<p>类似 waybar, wofi, mako, hyprlock 这些的配置文件，可以参考我的 dotfiles: <a href="https://github.com/suoyuan666/dotfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/dotfiles</a></p>
<h2 id="tricks">tricks</h2>
<p>剪切板管理器可能不是谁都能用到，但是 <a href="https://github.com/bugaevc/wl-clipboard" target="_blank" rel="noopener noreffer ">wl-clpboadr</a> 是值得装的，毕竟 neovim 就认那几个剪切板工具。</p>
<p>设置系统为中文后，很有可能部分软件直接把下载路径直接设置为 <strong>$HOME/下载</strong>，但这还对我来说很难受，可以安装 <code>xdg-user-dirs</code>，之后在<code>LANG=en_US.UTF-8</code> 的环境下执行一编 <code>xdg-user-dirs-update</code>。</p>
<p>XWayland 的分数缩放还是很难搞，不过 Hyprland 可以直接将 XWayland 的缩放设置为 0，如果和我一样，是一个 electron 应用跑在 XWayland 下的话，可以选择附加 <code>--force-device-scale-factor=1.6</code>，这样就可以设置一个正常的缩放了。</p>
<p>没有默认安装一个可以设置打开方式的 GUI 软件，可以使用类似 <code>xdg-settings get default-web-browser</code> 的方式设置。</p>
]]></description>
</item>
<item>
    <title>在 Gentoo Linux 上尝试 musl libc &#43; llvm 环境</title>
    <link>http://localhost:1313/posts/gentoo_musl_llvm/</link>
    <pubDate>Mon, 05 Aug 2024 09:34:33 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentoo_musl_llvm/</guid>
    <description><![CDATA[<p>尝试使用选择了 musl/llvm 的 profile 的 Gentoo Linux 作为日常使用的桌面操作系统</p>
<h1 id="在-gentooo-linux-上尝试-musl-libc--llvm-环境">在 Gentooo Linux 上尝试 musl libc + llvm 环境</h1>
<h2 id="背景">背景</h2>
<p>以前就有听说过 musl libc 了，一个体积小，并且完全按照标准实现的 libc，但一直没想过使用这个 libc。前几天看到 Gentoo Linux 对于 musl libc 有很多 profile 可以使用（不过都是实验性的，而非 stable）。</p>
<p>一定程度上这完成了<a href="../gentooinstall_ng/" rel="">之前安装 Gentoo Linux 的文章</a>中的目标:</p>
<blockquote>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
</blockquote>
<p>之前那次我没有实现这些目标，只是使用了 openrc，这次我使用这个 profile 确实实现了这一点，因为 systemd 依赖于 glibc，所以我选择使用 openrc，默认编译工具链就是 clang/llvm，甚至 C++ 标准库使用的也是提供的 <a href="https://libcxx.llvm.org/" target="_blank" rel="noopener noreffer ">libc++</a>，因为默认用 clang/llvm 编译，所以我直接默认就开启了 thinlto。</p>
<h2 id="安装前">安装前</h2>
<p><a href="https://www.etalabs.net/compare_libcs.html" target="_blank" rel="noopener noreffer ">musl libc 的作者提供了一个 musl uClibc glibc dietlibc 之间的比较</a>，musl libc 体积上确实小，不过部分库函数的性能不如 glibc。并且由于 glibc 中存在 GNU 的一些扩展，导致 musl libc 和 glibc 不能完全兼容，一些依赖于 glibc 的闭源发行二进制软件包的程序可能无法运行在 musl libc 上，不过可以尝试使用flatpak 运行。</p>
<p>Chromium 浏览器无法使用 musl libc 编译，electorn 的也无法使用。一定程度上，这迫使一直用 Visual Studio Code 的我开始使用 neovim。</p>
<p>musl libc 支持的 locale 还不是很多：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">  [1]   C
</span></span><span class="line"><span class="cl">  [2]   C.UTF-8
</span></span><span class="line"><span class="cl">  [3]   sr_RS.UTF-8
</span></span><span class="line"><span class="cl">  [4]   cs_CZ.UTF-8
</span></span><span class="line"><span class="cl">  [5]   nb_NO.UTF-8
</span></span><span class="line"><span class="cl">  [6]   de_DE.UTF-8
</span></span><span class="line"><span class="cl">  [7]   sv_SE.UTF-8
</span></span><span class="line"><span class="cl">  [8]   nl_NL.UTF-8
</span></span><span class="line"><span class="cl">  [9]   fr_FR.UTF-8
</span></span><span class="line"><span class="cl">  [10]  fi_FI.UTF-8
</span></span><span class="line"><span class="cl">  [11]  en_GB.UTF-8
</span></span><span class="line"><span class="cl">  [12]  it_IT.UTF-8
</span></span><span class="line"><span class="cl">  [13]  pt_PT.UTF-8
</span></span><span class="line"><span class="cl">  [14]  en_US.UTF-8 *
</span></span><span class="line"><span class="cl">  [15]  de_CH.UTF-8
</span></span><span class="line"><span class="cl">  [16]  es_ES.UTF-8
</span></span><span class="line"><span class="cl">  [17]  pt_BR.UTF-8
</span></span><span class="line"><span class="cl">  [18]  ru_RU.UTF-8</span></span></code></pre></div></div>
<p>这里没有 zh_CN.UTF-8。</p>
<p>musl libc 设置时区的方式也会有所不同，需要在 <strong>/etc/env.d/00musl</strong> 文件中写好 <code>TZ</code> 环境变量。</p>
<p>以上关于 locale 和时区的设置，<a href="https://wiki.gentoo.org/wiki/Musl_usage_guide" target="_blank" rel="noopener noreffer ">Gentoo wiki</a> 都有说明。在 <a href="https://wiki.gentoo.org/wiki/Musl_porting_notes" target="_blank" rel="noopener noreffer ">Gentoo 的另一篇 wiki</a> 记录了一些常见的 musl libc 编译可能遇到的问题（即编译那些一定程度上依赖于 glibc 的软件）。</p>
<h2 id="安装时遇到的问题">安装时遇到的问题</h2>
<p>一开始装完后，进入 grub，进入 openrc 后就没后续了，之后重新装一编就没有遇到这个问题。不好评价这个问题的原因。</p>
<p>不知道是不是我这个内核版本的原因，我用 openrc 从来没有正常关机过，直接死在那里，后来我换到 stable 内核就没有这个问题了。</p>
<p>firefox-115 esr 版本无法正常编译，会报一些错误类似: <code>ld.lld: error: undefined hidden symbol</code>。详情可以参考 GitHub 上 <a href="https://github.com/llvm/llvm-project/issues/79027" target="_blank" rel="noopener noreffer ">LLVM 的 issue</a> 以及 <a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=276746" target="_blank" rel="noopener noreffer ">FreeBSD Bugzilla</a> 上的讨论。而且 <code>rust</code> 编译的部分也会出现问题。</p>
<p>我参考了 FreeBSD 上的解法，首先是 <code>rust</code> 那里，根据 FreeBSD Bugzilla 上的讨论，原因是:</p>
<blockquote>
<p>rust-bindgen uses some tricks to generate bindings for C++ components, but gets confused by some new constructs in libc++ 18 headers, causing it to generate faulty binding code.</p>
</blockquote>
<p>该问题已经被<a href="https://hg.mozilla.org/mozilla-central/rev/9e96d1447f6c" target="_blank" rel="noopener noreffer ">今年 1 月份的补丁</a> 解决，对此我选择不用 esr 版本，用 stable 的版本。</p>
<p>其次对于 undefined hidden symbol 的问题，则是为 firefox 的编译单独创建一个环境。在 <strong>/etc/portage/env/</strong> 目录下创建一个 <strong>compiler-clang-firefox</strong> 文件，文件内容是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">COMMON_FLAGS=&#34;-O2 -march=x86-64-v3 -pipe -fvisibility=hidden -fvisibility-inlines-hidden&#34;
</span></span><span class="line"><span class="cl">CLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">CXXFLAGS=&#34;${COMMON_FLAGS}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CC=&#34;clang&#34;
</span></span><span class="line"><span class="cl">CXX=&#34;clang++&#34;
</span></span><span class="line"><span class="cl">CPP=&#34;clang-cpp&#34;
</span></span><span class="line"><span class="cl">AR=&#34;llvm-ar&#34;
</span></span><span class="line"><span class="cl">NM=&#34;llvm-nm&#34;
</span></span><span class="line"><span class="cl">RANLIB=&#34;
</span></span><span class="line"><span class="cl">llvm-ranlib&#34;</span></span></code></pre></div></div>
<p>也就是 CXXFLAGS 加上 <code>-fvisibility=hidden -fvisibility-inlines-hidden</code></p>
<p>新建 <strong>/etc/portage/package.env/</strong> 目录，在其中新建一个文件写入:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">www-client/firefox compiler-clang-firefox</span></span></code></pre></div></div>
<p>这样就可以使用指定的编译环境编译了。</p>
<p>对于 <a href="https://packages.gentoo.org/packages/dev-libs/darts" target="_blank" rel="noopener noreffer ">dev-libs/darts</a> 来说，由于 <strong>src/lexicon.h</strong> 中的 <code>std::random_shuffle</code> 在 <code>std</code> 中已经不存在，<a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle" target="_blank" rel="noopener noreffer ">cppreference</a> 中也可以看到，该函数 从 C++ 17 开始就废除了。所以我给它写了个 patch。</p>
<p>在 <strong>/etc/portage/</strong> 目录下新建一个 <strong>patches</strong> 的文件夹，然后在 <strong>patches</strong> 里新建 <strong>dev-libs/darts</strong> 这两级文件夹，之后把补丁放进去，安装的时候会自动 patch。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl"><span class="gh">diff --git a/src/lexicon.h b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gh">index a2935f4..2a30d1b 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/lexicon.h
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+// clang-format off
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #ifndef DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl"> #define DARTS_LEXICON_H_
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">@@ -7,6 +8,7 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span> #include &lt;ctime&gt;
</span></span><span class="line"><span class="cl"> #include &lt;iostream&gt;
</span></span><span class="line"><span class="cl"> #include &lt;limits&gt;
</span></span><span class="line"><span class="cl"><span class="gi">+#include &lt;random&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;vector&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> #include &#34;./mersenne-twister.h&#34;
</span></span><span class="line"><span class="cl"><span class="gu">@@ -58,9 +60,9 @@ class Lexicon {
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>   }
</span></span><span class="line"><span class="cl">   // randomize() shuffles keys. Values are not affected.
</span></span><span class="line"><span class="cl">   void randomize() {
</span></span><span class="line"><span class="cl"><span class="gd">-    Darts::MersenneTwister mt(
</span></span></span><span class="line"><span class="cl"><span class="gd">-        static_cast&lt;Darts::MersenneTwister::int_type&gt;(std::time(NULL)));
</span></span></span><span class="line"><span class="cl"><span class="gd">-    std::random_shuffle(keys_.begin(), keys_.end(), mt);
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    std::random_device rd;
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::mt19937 g(rd());
</span></span></span><span class="line"><span class="cl"><span class="gi">+    std::shuffle(keys_.begin(), keys_.end(), g);
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   void split();
</span></span></code></pre></div></div>
<p>我开头有 <code>// clang-format off</code> 的原因是我的 neovim 会保存时候自动调用 clang-format 格式化。</p>
<p>如果遇到了 Hyprland 0.42 编译失败的情况，报错是 <code>copy_if</code> 等函数没有找到，可以使用我找到的这个 patch</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-patch">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-patch" data-lang="patch"><span class="line"><span class="cl">From eb42adc4c090918ad6be9fcb24066da8cdfd9bd0 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Serenity Braesch &lt;Serenity.Braesch@proton.me&gt;
</span></span><span class="line"><span class="cl">Date: Sat, 24 Aug 2024 01:53:08 -0600
</span></span><span class="line"><span class="cl">Subject: [PATCH] Fix missing include needed by clang
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gs">---
</span></span></span><span class="line"><span class="cl"><span class="gs"></span> src/managers/XCursorManager.cpp | 1 +
</span></span><span class="line"><span class="cl"> 1 file changed, 1 insertion(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">diff --git a/src/managers/XCursorManager.cpp b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gh">index 7fc21a28..1e7ca535 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/src/managers/XCursorManager.cpp
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,3 +1,4 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+#include &lt;algorithm&gt;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> #include &lt;cstring&gt;
</span></span><span class="line"><span class="cl"> #include &lt;dirent.h&gt;
</span></span><span class="line"><span class="cl"> #include &lt;filesystem&gt;
</span></span><span class="line"><span class="cl"><span class="gd">-- 
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>2.44.2
</span></span></code></pre></div></div>
<p>这已经被 <a href="https://github.com/hyprwm/Hyprland/pull/7490" target="_blank" rel="noopener noreffer ">合并到 Hyprland 主线</a> 里了，等下一个版本应该就没这个事情了。</p>
<h2 id="后记">后记</h2>
<p>我没有尝试什么桌面环境，本身我这台计算机的性能就没强到哪去，所以我安装了 sway，还算正常。后来还是用了 Hyprland，xdg-desktop-portal-hyprland 这个软件是 guru 仓库内的，好家伙。</p>]]></description>
</item>
<item>
    <title>NVIDIA 在 GNU/Linux 发行版上和 Wayland 一起工作的技巧</title>
    <link>http://localhost:1313/posts/nvidia_with_linux/</link>
    <pubDate>Fri, 19 Jul 2024 01:21:25 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/nvidia_with_linux/</guid>
    <description><![CDATA[<p>如何在 GNU/Linux 发行版使用 Wayland 的情况下中舒服的使用 NVIDIA 驱动</p>
<h1 id="nvidia-在-gnulinux-发行版上工作的技巧">NVIDIA 在 GNU/Linux 发行版上工作的技巧</h1>
<h2 id="wayland-下-正常启动">Wayland 下 正常启动</h2>
<p>根据 <a href="https://developer.nvidia.com/blog/nvidia-transitions-fully-towards-open-source-gpu-kernel-modules/" target="_blank" rel="noopener noreffer ">NVIDIA Transitions Fully Towards Open-Source GPU Kernel Modules</a> 这篇 NVIDIA 的博客，目前 NVDIIA 准备在后续的版本完全换到 NVIDIA 开源内核模块（对 Turing 更高的版本来说），所以我也跟着使用了 nvidia-open。</p>
<p>对于 Wayland 来说，NVIDIA 需要启用 DRM (<a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager" target="_blank" rel="noopener noreffer ">Direct Rendering Manager</a>) kernel mode setting，即在内核参数中附加 <code>nvidia_drm.modeset=1</code>，这个需要在 <strong>/etc/default/grub</strong> 文件中写明:</p>
<p>在下面这行中添加 <code>nvidia_drm.modeset=1</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;...&#34;</span></span></code></pre></div></div>
<p>之后运行 <code>grub-mkconfig -o /boot/grub/grub.cfg</code>，如果你的 boot 分区和我不一致就去找一下你那个 boot 分区在哪吧。</p>
<p>如果你使用的是 <code>systemd-boot</code>，我并不知道 <code>systemd-boot</code> 该如何附加内核参数，可以去找找相关 wiki。</p>
<p>我在使用 KDE Plasma 6.1.2 + nvidia-open 555.58.02，附加了这个参数仍然无法正常进入桌面，但可以进入 SDDM 登录管理器，后来在 <a href="https://bbs.archlinux.org/viewtopic.php?id=293741" target="_blank" rel="noopener noreffer ">Arch Linux 的论坛中的一个帖子</a>看到了一个解决办法——再多附加一个内核参数 <code>nvidia_drm.fbdev=1</code>。</p>
<p>所以我附加的内容就是:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">GRUB_CMDLINE_LINUX=&#34;nouveau.modeset=0 nvidia_drm.modeset=1 nvidia_drm.fbdev=1&#34;</span></span></code></pre></div></div>
<p>这里第一个是为了禁用 nouveau 驱动，我印象中装了 NVIDIA 官方驱动后，默认就是禁用状态，不过我习惯添加这个了。</p>
<p>实际上我还做了一步：之前我发现 NVIDIA 貌似会在窗口管理器启动之后加载，于是我尝试提前将 NVIDIA 启动，即在 <strong>/etc/mkinitcpio.conf</strong> 文件中新加一些模块，类似这样:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)</span></span></code></pre></div></div>
<p>之后执行 <code>mkinitcpio -P</code>，重新生成一遍 initramfs。</p>
<p>如果你是 Gentoo Linux，那么生成 initramfs 的方法可能不是这个，如果和我一样都是使用的 <code>dracut</code> 的话，可以参考 <a href="https://wiki.gentoo.org/wiki/NVIDIA/nvidia-drivers#Dracut_configuration_.28optional.29" target="_blank" rel="noopener noreffer ">Gentoo wiki 中的 nvidia-drivers 部分</a> 和 <a href="https://wiki.archlinux.org/title/Dracut" target="_blank" rel="noopener noreffer ">Arch wiki 中 dracut 条目</a>。</p>
<p>之后直接 <code>sudo dracut /path/to/initramfs</code></p>
<h2 id="正常休眠">正常休眠</h2>
<p>我发现休眠也不好使了，这让我很难受。我的问题是这样：休眠后启动需要花费很长时间，这段时间就是黑屏，终于不是黑屏了之后还不完全显示锁屏界面，我凭借着记忆解锁后，只有那些已打开的窗口能正常显示，连锁屏壁纸都不正常显示，<code>Ctrl + Alt + T</code> 倒还能正常启动终端，我用 <code>journalctl</code> 查看了下系统日志，去 <a href="https://wiki.archlinux.org/title/NVIDIA/Troubleshooting#Black_screen_returning_from_suspend" target="_blank" rel="noopener noreffer ">Arch Wiki 上</a>找到了我的问题，就是日志显示:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">archlinux kernel: NVRM: GPU at PCI:0000:08:00: GPU-926ecdb0-adb1-6ee9-2fad-52e7214c5011
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;
</span></span><span class="line"><span class="cl">archlinux kernel: NVRM: Xid (PCI:0000:08:00): 13, pid=&#39;&lt;unknown&gt;&#39;, name=&lt;unknown&gt;, Graphi&gt;</span></span></code></pre></div></div>
<p>这是 Arch Wiki 上提供的，正常这里的 <em>archlinux</em> 应该显示你的主机名，而 PCI 端口等信息也会不一致。</p>
<p>解决办法就是再搞个内核参数以保留 video memory。来源: <a href="https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend" target="_blank" rel="noopener noreffer ">https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend</a></p>
<p>我新建了一个 <strong>/etc/modprobe.d/nvidia-power-management.conf</strong> 文件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">options nvidia NVreg_PreserveVideoMemoryAllocations=1</span></span></code></pre></div></div>
<p><code>NVreg_PreserveVideoMemoryAllocations</code> 也可以作为内核启动时的参数，可以直接写在 <strong>/etc/default/grub</strong> 中，写在内核参数的话需要在前面加上 <code>nvidia</code>: <code>nvidia.NVreg_PreserveVideoMemoryAllocations=1</code>。</p>
<p>之后执行 <code>systemctl enable nvidia-resume.service nvidia-suspend.service nvidia-hibernate.service</code> 并重启即可。</p>
<p>根据 Arch wiki 所述，这个不能和 NVIDIA 早启动一起使用，但实际上我一起用了，感觉没什么问题。</p>
<h2 id="总结">总结</h2>
<p>用 Xorg 保心安，我当初用 Xorg 的时候还没这么些事。</p>]]></description>
</item>
<item>
    <title>为什么你应该(不)使用 GNU/Linux 作为日用操作系统</title>
    <link>http://localhost:1313/posts/whywinorlinux/</link>
    <pubDate>Sat, 13 Apr 2024 11:58:25 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/whywinorlinux/</guid>
    <description><![CDATA[<p>一个简单的评价文章，关于是否应该选择使用 GNU/Linux 作为你的个人日用桌面操作系统</p>
<h1 id="为什么你应该不使用-gnulinux-作为日用操作系统">为什么你应该(不)使用 GNU/Linux 作为日用操作系统</h1>
<p>本章关于使用 GNU/Linux 作为个人日用桌面操作系统做了一些评价，主要是从是否应该使用两方面来评价。</p>
<h2 id="为什么不应该使用">为什么不应该使用</h2>
<h3 id="从应用软件的层面来看">从应用软件的层面来看</h3>
<p>直到 2023 年初，腾讯才正式推出 Linux 版本的 QQ，并且开发进度落后于 Windows 和 Mac 端，不过几乎所有发行版都可以使用，不过还会存在一些小 BUG。</p>
<p>直到 2024 年 3 月，腾讯才正式推出 Linux 版本的微信，大致上的该有的功能基本都有，但是原生只能安装在部分国产操作系统上。如果使用的是其他的 Linux 发行版，可以使用 bwrap 套一层绕过检测。</p>
<p>直到 2024 年 10 月，腾讯才推出可以在其他发行版上使用的微信。</p>
<p>网易云音乐已经不再分发官方的 Linux 版本的软件包了，如果需要使用可以选择安装其他的第三方网易云音乐客户端。</p>
<p>Microsoft office 365 没有 Linux 的版本，目前要么用 WPS。要么用 onlyoffice。很多 Linux 用户貌似会用 libreoffice？</p>
<p>我倾向于使用 Wayland 而不是 Xorg。Wayland 和 Xorg 是两套显示服务协议，虽然部分用户认为 Wayland 并不是用于取代 Xorg 的，但是我认为 Wayland 应该全面取代 Xorg，因为 Wayland 相比于 Xorg 无论是性能还是安全性都要优于 Xorg。</p>
<p>但是 Chromium 对 Wayland 的支持还没有那么完美，这导致了 Electorn 的程序大概率也不会对 Wayland 支持那么完美（缩放存在问题）。并且 Chromium 不支持 text-input-v3（Wayland 输入法协议第 3 版，目前有了一些支持）导致在 GNOME 下需要为其附加环境变量 <code>GTK_IM_MODULE</code> 才能正常使用（印象中还需要附加 <code>--gtk-version=4</code>）。但是 <code>--gtk-version=4</code> 并没有被 Electorn 所支持（目前是 2024 年 4 月，它并没有支持），所以 ibus 或者 fcitx5 是无法切换到中文输入的。</p>
<p>Plasma 5.27+ 支持 text-input-v1，text-input-v2 和 text-input-v3。所以只需要附加<code>--enable-wayland-ime</code>（这是因为 text-input-v1）即可使用。GNOME 仍不支持 text-input-v1，根据 <a href="https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3751" target="_blank" rel="noopener noreffer ">Mutter 的一个 pr</a> 上的讨论来看，他们貌似更倾向于让 Chromium 实现 text-input-v3，但自家的 mutter 不会合并其他协议实现的补丁。（mutter 是 GNOME 的窗口管理器）</p>
<p>我这里说的 GNOME 和 Plasma 都是一种桌面环境，具体可以参考我在另一篇文章：<a href="../distrointro/" rel="">面向 beginner: GNU/Linux 发行版浅评与介绍</a>中的图片，我在那篇文章的最后还介绍了一下桌面环境。</p>
<p>只有部分游戏是提供了原生的 Linux 版本（其中有一部分大概是因为 Steam Deck，Steam Deck 上的操作系统 Steam OS 是一个 GNU/Linux 发行版）。不过 Valve 公司开发了 Proton 兼容层以运行只支持 Windows 的游戏。</p>
<p>很多专业的软件可能处于没有 Linux 版本的状态。我又不是任何领域的专业人士，这个还是需要自己去搜集。如果是计算机相关还是有很多平替的，可以参考网站 <a href="https://alternativeto.net/" target="_blank" rel="noopener noreffer ">AlternativeTo</a>，这个网站列出了一些软件的替代品可供参考。</p>
<h3 id="从硬件的层面来看">从硬件的层面来看</h3>
<p>芯片厂商对于 Linux 的支持总是落后于 Windows 的。</p>
<p>对于硬件视频加速来说，Firefox 的支持还可以，Chromium 只是实验性支持（不过貌似也可以用）。这里 Intel 和 AMD 都会使用 VAAPI，NVIDIA 开发了一套 VDPAU 和 NVDEC。不过貌似 VDPAU 那个 driver 好久不开发了，NVIDIA 可以安装 nvidia-vaapi-driver，这样可以将 NVDEC 转成 VAAPI 供 Firefox 使用。视频播放器，录屏软件都支持 NVIDIA 原有的编解码格式。nvidia-vaapi-driver 只支持解码，不支持编码。</p>
<h3 id="从安全的角度来看">从安全的角度来看</h3>
<p>这个其实不好说，从开源的角度来说，可以审查理论上下限不会太低，但是<a href="https://en.wikipedia.org/wiki/XZ_Utils_backdoor" target="_blank" rel="noopener noreffer ">xz 的投毒事件</a>也可以看出这个安全性也么那么绝对</p>
<blockquote>
<p>今天有人提到 Lasse Collin 对于 xz 项目早就疲惫不堪，Jia Tan 是极少数愿意真正贡献代码的“开发者”，这都是这场悲剧不可或缺的背景条件。</p>
<p>在无人关心的角落，Florian Westphal 最近辞去了内核 netfilter co-maintainer，所以现在 nf 只剩 Pablo Neira Ayuso 一人维护。这可是无数人每天使用的 netfilter。</p>
<p>在无人关心的角落，我最爱的工具之一 strace 依然只由一个捷克人 Dmitry V. Levin 默默维护。</p>
<p>在无人关心的角落，tcpdump/libpcap 在由 the-tcpdump-group 持续更新，其中一位 Denis Ovsienko 的自我介绍是 sometimes I work jobs for living, sometimes I contribute pro bono to free and open source software projects, often I do both，给人一种很孤独的感觉。</p>
<p>在无人关心的角落，bash group 只有三位 active members，其中一位 Bob Proulx 有个古典博客，里面有记录他和妻子的平静生活。</p>
<p>我以前赞美人月神话，但我现在更关心默默无闻的开发者们，就像 vim 作者 Bram Moolenaar 一生没有和任何人建立亲密关系，我只想问，你这一生过得开心吗？</p>
</blockquote>
<p>上面这段话转自<a href="https://www.zhihu.com/question/650826484/answer/3451699113" target="_blank" rel="noopener noreffer ">知乎的一个回答</a></p>
<p>基础开源软件组件有些是几个人的为爱发电。但基础组件一旦出现了安全问题，影响还是挺大的。</p>
<p>从安全角度来讲，</p>
<ul>
<li>你不应该使用原版的 linux-kernel，而是 <a href="https://github.com/anthraxx/linux-hardened" target="_blank" rel="noopener noreffer ">linux-hardened</a>
<ul>
<li>这样的 kernel 使用了基本内核加固补丁集和更多安全相关的编译时配置选项。</li>
<li>还应该使用 sysctl 更加细粒度的调整一些安全相关的参数。</li>
</ul>
</li>
<li>不应该使用 pulseaudio 这个音频服务，而是使用 pipewire
<ul>
<li>这一点还好，现在应该都在使用 pipewire。</li>
</ul>
</li>
<li>应该使用 SELinux 或者 AppArmor 这样的软件更细致的管控文件权限。</li>
<li>flatpak 安装的软件，应该使用 flatseal 用于管理软件的权限。</li>
<li>使用 sudo 应该只允许用户执行部分软件而不是直接允许执行全部软件。</li>
<li>硬盘/文件系统应该加密。</li>
<li>grub 这个 bootloader 也应该加密。</li>
<li>一些文件目录挂载的时候可以禁用读写权限或者执行权限之类的。</li>
<li>应该尝试使用 firejail 或者 bwrap 这样的沙盒程序。
<ul>
<li>bwrap 貌似比 firejail 更好一些。</li>
</ul>
</li>
<li>不应该使用 Xorg，应该使用 Wayland。
<ul>
<li>这一点还好，现在大部分的桌面环境都带有 Wayland 的支持，最新版本的 KDE Plasma 和 GNOME 甚至默认就是 Wayland 会话。</li>
</ul>
</li>
</ul>
<p>这里还存在一个问题是——是否要选择 <em>使用源码分发的包管理器</em> 的发行版。</p>
<p>这种发行版的软件分发的是其源代码，软件的编译工作是跑在用户的机器上这样的好处是可以控制软件的功能的选择，软件的体积减小，攻击面理论上也会少一些。并且由于编译是跑在用户自己的机器上，你可以开很多为了安全考虑的编译选项。甚至编译工具链也可以选择。</p>
<h2 id="为什么应该使用">为什么应该使用</h2>
<h3 id="从应用软件的角度来看">从应用软件的角度来看</h3>
<p>我认为，终端通过 shell，将系统的细节暴露给用户，使得用户可以做很多事情。尤其 Linux 更大限度的暴露细节。由于 Linux 作为一个开源项目，所以开发的时候会更加侧重自身的使用。</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Stallman" target="_blank" rel="noopener noreffer ">Richard Stallman</a> 因为认为当时黑客文化式微，发起了 GNU 项目，组织了自由软件基金会并发起了自由软件运动。</p>
<p>我认为这一定程度上影响了一批人，导致开发者会用开源软件并回馈开源社区。</p>
<p>当然这样的大牛不止这一位，比如 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreffer ">Linus Torvalds</a> 技术很强，但是还没有 Richard Stallman 的观点那么偏激（这句话不代表我认为 Richard Stallman 的观点偏激，我只是用偏激作为对比的词汇），Linus Torvalds 也吸引了很多 hacker。</p>
<p>一定程度上，由于开发者目前使用的很多软件都是开源的，开源软件目前互相之间的配合还是可以的，所以作为同样是开源软件的 linux，它们之间的工作会更加顺畅。我认为这一定程度上也算是形成了一个圈子🤪。</p>
<h3 id="从安全的角度来讲">从安全的角度来讲</h3>
<p>单纯从批判商业公司闭源软件可能有自留后门的角度来说，开源软件这样的风险少一些（我并不是说开源软件一定不会有风险）。</p>
<p>我目前认为只有上述这个角度能说明使用 GNU/Linux 作为日用操作系统会比使用诸如 Windows 更加安全了，还有就是可能 Linux 会有一些更加强劲的安全权限控制软件。</p>
<h2 id="结论">结论</h2>
<p>目前应该还是更适合编程开发。</p>
<p>应用程序角度来看，目前 GNU/Linux 最友好的桌面环境应该是 KDE Plasma。目前国内软件大部分都可以在 Linux 找到官方分发的软件包，就算没有也有非官方的开源实现。部分软件没有 Linux 的版本，也许会有替代品，但效果可能会差一些。</p>
<p>硬件上来看，NVIDIA 显卡的支持目前还是不错，不过还是有些小毛病，其他的芯片我不太了解，应该都还好。</p>
<p>安全性还说，默认的还是不行，用户还是需要一定的自设定。我一直认为，如果真的追求安全性，应该装 QubesOS 这个操作系统。</p>]]></description>
</item>
<item>
    <title>我的 NixOS 安装记录</title>
    <link>http://localhost:1313/posts/nixos_install_rec/</link>
    <pubDate>Sat, 06 Apr 2024 12:59:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/nixos_install_rec/</guid>
    <description><![CDATA[<p>我这次安装 NixOS 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用 WM 用的是 Hyprland</p>
<h1 id="我的-nixos-安装记录">我的 NixOS 安装记录</h1>
<h2 id="背景">背景</h2>
<p>在上个月，我还在使用着 Gentoo Linux，那时我还在想应该可以一直使用下去，结果后来有个组件需要用到 <code>systemd</code>，于是我准备从 <code>openrc</code> 换到 <code>systemd</code>，同时因为 <code>pipewire</code> 也很依赖 <code>systemd</code>，我用 <code>openrc</code> 的同时用 <code>pipewire</code> 总有一点不太得劲。但是我的环境也许有些独特了，或者是我自身实力不够，反正我无法以一种较为优雅的方式从 <code>openrc</code> 换到 <code>systemd</code>。</p>
<p>后来我就想到了 NixOS，曾经我被它那些新鲜的特性搞得不知道从何下手（虽然现在我也不太能下手）。</p>
<h2 id="关于-uefi">关于 UEFI</h2>
<p>我不好评价为什么我改成 <code>grub</code> 之后，<code>grub-install</code> 根本没有写入，我改回了 <code>systemd-boot</code> 就行了。后来我在搜相关问题的时候发现有人指出需要这个设置：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span></span></span></code></pre></div></div>
<p>由于我这个电脑现在是 Windows 11 + NixOS，所以我需要使用 <code>grub</code> 才可以</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">efi</span><span class="o">.</span><span class="n">canTouchEfiVariables</span> <span class="err">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">boot</span><span class="o">.</span><span class="n">loader</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">systemd-boot</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">grub</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">device</span> <span class="o">=</span> <span class="s2">&#34;nodev&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">efiSupport</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">useOSProber</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>Hyprland 默认就是 Wayland，但是对于一些尚未完全准备充分的（比如 Chromium 内核的软件）软件需要加 <code>environment.sessionVariables.NIXOS_OZONE_WL = &quot;1&quot;;</code>。但是对于老版本的 Electorn 应用来说，哪怕这个环境变量启用了也于事无补。</p>
<p>众所周知，Chromium 目前启用了 Wayland 之后就需要附加命令行参数的方式才能正常使用输入法。目前我只使用了 Brave 和 vscodium 需要这一点。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-nix">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="err">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;[</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">brave</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;--enable-features=UseOzonePlatform&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># &#34;--use-gl=egl&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">overrideAttrs</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">old</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># inherit (pkgs.guangtao-sources.brave) src pname version;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">programs</span><span class="o">.</span><span class="n">vscode</span> <span class="err">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableExtensionUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">enableUpdateCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">extensions</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">vscode-extensions</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">yzhang</span><span class="o">.</span><span class="n">markdown-all-in-one</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkief</span><span class="o">.</span><span class="n">material-icon-theme</span>
</span></span><span class="line"><span class="cl">    <span class="n">llvm-vs-code-extensions</span><span class="o">.</span><span class="n">vscode-clangd</span>
</span></span><span class="line"><span class="cl">    <span class="n">vadimcn</span><span class="o">.</span><span class="n">vscode-lldb</span>
</span></span><span class="line"><span class="cl">    <span class="n">usernamehw</span><span class="o">.</span><span class="n">errorlens</span>
</span></span><span class="line"><span class="cl">    <span class="n">astro-build</span><span class="o">.</span><span class="n">astro-vscode</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">userSettings</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;window.titleBarStyle&#34;</span> <span class="o">=</span> <span class="s2">&#34;custom&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontFamily&#34;</span> <span class="o">=</span> <span class="s2">&#34;Intel One Mono&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;editor.fontSize&#34;</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;telemetry.telemetryLevel&#34;</span> <span class="o">=</span> <span class="s2">&#34;off&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.iconTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;material-icon-theme&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;workbench.colorTheme&#34;</span> <span class="o">=</span> <span class="s2">&#34;Quiet Light&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">package</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">vscodium</span><span class="o">.</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">commandLineArgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform-hint=auto&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--ozone-platform=wayland&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;--enable-wayland-ime&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这里可以看到使用的是 vscode，而不是 vscodium，因为 vscodium 还没有这些配置选项，所以就用 vscode，替换掉 vscode 的 package 这样用了。</p>
<p>我将我自己在使用 NixOS 时的 <em>configuration.nix</em> 等文件上传到了 GitHub 仓库中: <a href="https://github.com/suoyuan666/NixOS_configfiles" target="_blank" rel="noopener noreffer ">https://github.com/suoyuan666/NixOS_configfiles</a></p>]]></description>
</item>
<item>
    <title>我写的 Gentoo Linux 安装指南</title>
    <link>http://localhost:1313/posts/gentooinstall_ng/</link>
    <pubDate>Thu, 28 Mar 2024 20:05:47 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/gentooinstall_ng/</guid>
    <description><![CDATA[<p>我这次安装 Gentoo Linux 做的额外的工作，也就是除官方文档之外的安装步骤。这里我用的 init 是 openrc，WM 用的是 Hyprland</p>
<h1 id="我写的-gentoo-linux-安装指南">我写的 Gentoo Linux 安装指南</h1>
<h2 id="背景">背景</h2>
<p>我这次安装主要因为 Gentoo Linux 在我看来真的很有趣，并且我想尝试一些新的东西试试，虽然我用 Arch Linux 应该不会遇到滚挂的问题，但我还是有些疑虑。</p>
<p>我在安装前的预计其实是用 Gentoo Linux，同时 init 使用 openrc，默认编译工具链用 clang/llvm，用 hardened profile 并且开一些额外的编译选项（比如 thinlto 之类的）。不过目前只实现了使用 openrc 和 hardened profile。</p>
<h2 id="profile-选择">profile 选择</h2>
<p>根据 <a href="https://www.gentoo.org/support/news-items/2024-03-22-new-23-profiles.html" target="_blank" rel="noopener noreffer ">Gentoo Linux 在 24 年 3 月发布的 news</a>，profile 17.1 等版本已经过时了，最好应该更新到 23.0。如果你的 stage3 包下载的是 systemd 什么的，那就直接 enable 23.0 的 profile，如果你上来就选择了 openrc 相关的 profile，貌似还是 17.1 的。你需要更换到对应 23.0 中的那些 split-usr 的 profile。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ eselect profile list <span class="p">|</span> grep 23.0
</span></span><span class="line"><span class="cl">  <span class="o">[</span>21<span class="o">]</span>  default/linux/amd64/23.0 <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>22<span class="o">]</span>  default/linux/amd64/23.0/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>23<span class="o">]</span>  default/linux/amd64/23.0/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>24<span class="o">]</span>  default/linux/amd64/23.0/desktop/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>25<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>26<span class="o">]</span>  default/linux/amd64/23.0/desktop/gnome/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>27<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>28<span class="o">]</span>  default/linux/amd64/23.0/desktop/plasma/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>29<span class="o">]</span>  default/linux/amd64/23.0/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>30<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>31<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>32<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>33<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>34<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>35<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>36<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>37<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>38<span class="o">]</span>  default/linux/amd64/23.0/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>39<span class="o">]</span>  default/linux/amd64/23.0/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>40<span class="o">]</span>  default/linux/amd64/23.0/llvm/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>41<span class="o">]</span>  default/linux/amd64/23.0/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>42<span class="o">]</span>  default/linux/amd64/23.0/hardened/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>43<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>44<span class="o">]</span>  default/linux/amd64/23.0/hardened/selinux/systemd <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>45<span class="o">]</span>  default/linux/amd64/23.0/split-usr <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>46<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>47<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/gnome <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>48<span class="o">]</span>  default/linux/amd64/23.0/split-usr/desktop/plasma <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>49<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>50<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>51<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>52<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>53<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>54<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.32+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>55<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-2.6.16+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>56<span class="o">]</span>  default/linux/amd64/23.0/split-usr/no-multilib/prefix/kernel-3.2+ <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>57<span class="o">]</span>  default/linux/amd64/23.0/split-usr/llvm <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>58<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>59<span class="o">]</span>  default/linux/amd64/23.0/split-usr/hardened/selinux <span class="o">(</span>stable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>62<span class="o">]</span>  default/linux/amd64/23.0/x32 <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>63<span class="o">]</span>  default/linux/amd64/23.0/x32/systemd <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>64<span class="o">]</span>  default/linux/amd64/23.0/split-usr/x32 <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>69<span class="o">]</span>  default/linux/amd64/23.0/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>70<span class="o">]</span>  default/linux/amd64/23.0/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>71<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>72<span class="o">]</span>  default/linux/amd64/23.0/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>73<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl <span class="o">(</span>dev<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>74<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/llvm <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>75<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened <span class="o">(</span>exp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span>76<span class="o">]</span>  default/linux/amd64/23.0/split-usr/musl/hardened/selinux <span class="o">(</span>exp<span class="o">)</span></span></span></code></pre></div></div>
<p>为什么这里说 <em>split-usr</em>，在 <a href="https://wiki.gentoo.org/wiki/Merge-usr" target="_blank" rel="noopener noreffer ">merge-usr</a> 这篇 wiki 中指出，merge-usr 对于&gt;=systemd 255 来说是必需的，对于其他 init 系统来说是可选的。23.0 的除了标明 <em>split-usr</em> 默认都是 <em>merge-usr</em> 的，所以如果我目前使用的是 openrc，文件的布局默认就是 <em>split-usr</em>，也就先不更改了。</p>
<p>对我来说，我除了要 enable desktop 的 profile 之外，我还想要 enable hardened 的 profile 以带来安全上的提升。可以在<a href="https://wiki.gentoo.org/wiki/Profile_%28Portage%29#Example_1:_Combining_multiple_profiles_from_the_Gentoo_ebuild_repository" target="_blank" rel="noopener noreffer ">Gentoo Wiki 上关于 profile 的介绍中</a>查看到如何将两个 profile 同时 enable</p>
<p>说起安全性，Gentoo Linux 目前跟的是 LTS 的内核，版本目前在 6.6，不过 6.7 在安全性貌似有很多改进（存疑），所以我选择跟进 stable 的脚步（</p>
<p><a href="https://wiki.gentoo.org/wiki/Project:Hardened" target="_blank" rel="noopener noreffer ">Project:Hardened</a> 这个项目主页介绍了 Gentoo Hardened profile 的一些细节，但是这篇文档质量貌似不是很好。</p>
<h2 id="wm-选择">WM 选择</h2>
<p>使用的是 openrc，但我网络方面依旧选择的是 networkmanager，主要因为习惯了，其他的像 iwd，或者 wpa_supplicant 这样的 WiFi 连接工具我用的都不是很习惯（主要我是要用桌面环境的，这俩我都不知道有 tui 或者 gui 组件）。音频服务方面选择的是 pipewire，我并不想用 pulseaudio，所以只能选择 pipewire 了。根据<a href="https://wiki.gentoo.org/wiki/PipeWire" target="_blank" rel="noopener noreffer ">Gentoo Wiki 关于 PipeWire 的描述</a>，可以看出这东西还有点依赖 systemd，难绷。虽然 wiki 中关于 openrc 也给了使用它的方法。</p>
<p>DE 方面，我本来是想用 GNOME 的，虽然 GNOME 依赖于 systemd，但是 Gentoo Linux 做了一些工作使得可以在 openrc 上使用 GNOME，但是 GNOME 需要编译好多软件，我真的受不了了。我基于 “我真的喜欢用 Wayland” 的心理，选择使用了 Hyprland，WM 向来要比 DE 默认少装很多软件。</p>
<p>关于 Hyprland 的启动，我还是推荐 <code>dbus-run-session Hyprland</code> 这样启动，而不是直接 <code>Hyprland</code>。状态栏我是用的是 waybar，通知组件用的是 mako，程序启动器使用的是 wofi，Terminal 使用的是 kitty。输入法使用的是 fcitx5。</p>
<p>在 GNOME 中，使用 chromium 内核的软件以 Wayland 启动的话就无法使用中文输入法，需要附加 <code>--gtk-version=4</code> 这个 flag 才能使用，但是 Electron 的应用目前还不支持 gtk4 导致附加了 flag 也不好使。</p>
<p>但是在 Hyprland 中就没有这个问题，就像是 KDE Plasma 中也不会存在这个问题一样。只需要附加 <code>--enable-wayland-ime</code> 这个 flag 就可以了。</p>
<p>Chromium 内核的软件以 Wayland 启动的话会很模糊，附加 <code>--use-gl=egl</code> 就好了。</p>
<p>Hyprland 没有太好的主题设置软件，我选择的是使用 <code>gsettings</code> 这个软件</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface font-name
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Noto Sans Mono 11&#39;</span>
</span></span><span class="line"><span class="cl">$ gsettings get org.gnome.desktop.interface icon-theme
</span></span><span class="line"><span class="cl"><span class="s1">&#39;Tela&#39;</span></span></span></code></pre></div></div>
<p>如果把 <code>get</code> 改成 <code>set</code> 就是设置字体和主题了。</p>]]></description>
</item>
<item>
    <title>面向 beginner: GNU/Linux 发行版浅评与介绍</title>
    <link>http://localhost:1313/posts/distrointro/</link>
    <pubDate>Fri, 01 Dec 2023 03:42:51 &#43;0000</pubDate>
    <author>suo yuan</author>
    <guid>http://localhost:1313/posts/distrointro/</guid>
    <description><![CDATA[<p>介绍了大部分主流发行版</p>
<h1 id="面向-beginner-gnulinux-发行版浅评与介绍">面向 beginner: GNU/Linux 发行版浅评与介绍</h1>
<p>这里我会介绍常见的几个 GNU/Linux 发行版，这里我可能会假定你对计算机领域的一些知识比较了解了。</p>
<p>选择 GNU/Linux 发行版很大程度上你是在选择软件包管理器，系统的更新策略。软件就在那里不会改变，OS 之间的不同很大程度上看的是使用什么软件包管理器，比如是直接装二进制软件包还是从源代码开始编译，系统的更新策略一般分成随版本的更新，比如 Ubuntu 的 LTS ( Long-term support )应该是会推送五年的安全更新，之后就要换更新的 LTS 版本了；或者滚动更新，这样会一直向前更新，也就不会有版本的概念。部分发行版会同时推出这两种半分的发行版。</p>
<p>这里我先简单介绍一下为什么我特地加上 GNU/Linux，这就表明了一些 de-GNU 的 Linux 发行版不会在这里（在我看来，de-GNU 也就是在系统中去掉 GNU 的软件），而且我也没用过这样的发行版。说实话，我很少看到 de-GNU 这样的字眼，GNU 对开源世界的贡献十分大，我很少会看到有人会批驳它什么，我更多的看到的是 de-Google，指在移动端避免 GMS 等服务。</p>
<blockquote>
<p>There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine&rsquo;s resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called “Linux” distributions are really distributions of GNU/Linux.</p>
<p>&ndash; <a href="https://www.gnu.org/gnu/linux-and-gnu.html" target="_blank" rel="noopener noreffer ">https://www.gnu.org/gnu/linux-and-gnu.html</a></p>
</blockquote>
<p>从这里看到，GNU 认为应该将以 GNU 为基础的 “Linux 发行版” 都叫成 GNU/Linux，因为 Linux 指代的应该是 Linux kernel，而非一整套系统。GNU 工具链确实是基本上所有 Linux 发行版的必备了，不过依旧存在一些一定程度上要 de-gnu 的 Linux 发行版。</p>
<p>这里我先说一下 GNU 为什么这么重要，<strong>以下的部分内容是我的个人看法</strong> 。我认为很大的原因是 GNU 的软件都很不错，而且出现的也足够早，这就是原因。在 Linux kernel 还没发布的时候，GNU 项目早就开始写了，它们的目的是要写一个完全自由的操作系统。它们先开始写一些操作系统必备的程序，比如文本编辑器，编译器等等，但当最后写操作系统内核的时候，由于想要实现一个微内核，导致调试起来很困难，从而极大的拖慢了开发进度。这个时候 Linux kernel 就已经发布出来，并且可以运行 GNU 的各种程序。</p>
<p>GNU 这部分十分重要，而且一定程度上没太多替代品。Linux 发行版运行必备的 <a href="https://en.wikipedia.org/wiki/C_standard_library" target="_blank" rel="noopener noreffer ">libc</a> 基本上都在用 GNU 开发的 glibc，编译器用的是 <code>gcc</code>，一些核心程序 用的是 <a href="https://www.gnu.org/software/coreutils/" target="_blank" rel="noopener noreffer ">GNU core utilities</a>，这些都是很难避免的，你也许可以避免 glibc ——选择使用 <a href="https://www.musl-libc.org/" target="_blank" rel="noopener noreffer ">musl libc</a> 或者其他 libc，可以不用 gcc，选择使用 clang/llvm，不使用 GNU core utilities 而使用 <a href="https://www.busybox.net/" target="_blank" rel="noopener noreffer ">BusyBox</a>。但很少有这么做的，一方面是 glibc 现在很全面，并且还有一些不属于 ISO C 标准的部分。</p>
<blockquote>
<p>The GNU C Library - The project provides the core libraries for the GNU system and GNU/Linux systems, as well as many other systems that use Linux as the kernel. These libraries provide critical APIs including ISO C11, POSIX.1-2008, BSD, OS-specific APIs and more. These APIs include such foundational facilities as open, read, write, malloc, printf, getaddrinfo, dlopen, pthread_create, crypt, login, exit and more.</p>
<p>&ndash; <a href="https://www.gnu.org/software/libc/" target="_blank" rel="noopener noreffer ">https://www.gnu.org/software/libc/</a></p>
</blockquote>
<p>从 <a href="https://sourceware.org/glibc/manual/latest/html_node/Standards-and-Portability.html" target="_blank" rel="noopener noreffer ">glibc 的文档</a> 可以看出 glibc 除了对 ISO C 标准的支持外，还包括：</p>
<ul>
<li>POSIX (The Portable Operating System Interface)</li>
<li>Berkeley Unix</li>
<li>SVID (The System V Interface Description)</li>
<li>XPG (The X/Open Portability Guide)</li>
</ul>
<p>这导致一些软件可能用到一些非标准的函数，使用 musl libc 的时候无法正常运行它们。</p>
<p>gcc 本身也支持一些额外功能，比如嵌套函数，glibc 使用了 gcc 这个特性导致其无法使用 clang/llvm 编译。</p>
<p>根据 <a href="https://www.etalabs.net/compare_libcs.html" target="_blank" rel="noopener noreffer ">Comparison of C/POSIX standard library implementations for Linux</a>，musl libc 的字符串和内存分配相关的函数性能不如 glibc。</p>
<p><a href="https://alpinelinux.org/" target="_blank" rel="noopener noreffer ">Alpine Linux</a> 就是使用的 musl libc 替换了 glibc，用 busybox 替换了 gnu-coreutils，不过软件支持的还不是很多。</p>
<p>理论上，闭源依赖 glibc 的软件才有概率更难运行在 musl libc 的环境上，不过 chromium 内核的也会如此，目前 chromium 官方对 musl libc 没什么支持。systemd 也是 依赖于 glibc 的</p>
<p>systemd 是一个广泛应用于各种 GNU/Linux 发行版的 init 系统，init 系统用于负责在系统初始化的时候进行一些初始化服务，不过 systemd 做的更多，引导启动这部分也可以交给 systemd-boot，还有其他的一些非传统 init 应该管理的部分也被 systemd 集成管理。有批评的声音认为 systemd 这个做法扩大了攻击面，不过事实是很多人都选择使用它。</p>
<p>我不会介绍这种 de-GNU 的 Linux 发行版。</p>
<hr>
<p>下面这些段落写于 2024 年 2 月</p>
<p>如果你并不是虚拟机安装 Linux 发行版的话，我认为应该还是要思考该类系统是否符合你的需求再说，当然如果你并不在意就当我没说。</p>
<p><del>现在还不支持 HDR</del>（现在有了实验性支持）。浏览器对硬件解码的支持不是很完美。关于视频硬解加速，NVIDIA 有自己的一套 NVDEC，其他显卡用另一套 VAAPI （<a href="https://github.com/elFarto/nvidia-vaapi-driver" target="_blank" rel="noopener noreffer ">nvidia-vaapi-driver</a> 可以让 NVIDIA 的 NVDEC 以 VAAPI 解码，但只支持解码，编码尚不支持）。FireFox 还支持了 VAAPI，但不支持 NVDEC，Chromium 内核的浏览器目前仍然处于实验状态，而且也是只支持 VAAPI，ChromiumOS 和其他 Linux 发行版的文档会有说明可以尝试添加哪些参数启用这个功能。Chromium 内核的浏览器默认还不是 Wayland。</p>
<p>我不好评价 GNU/Linux 玩游戏会是怎样的体验。Valve 公司基于 wine 开发了 <a href="https://en.wikipedia.org/wiki/Proton_%28software%29" target="_blank" rel="noopener noreffer ">Proton</a>，只要在 Steam Play 中勾选为所有应用启用 Steam Play 就可以玩那些只支持 Windows 平台的游戏了，但不好评价是否能一定起作用，Steam Deck 上搭载的系统 Steam OS 是基于 Arch Linux 做的，所以使用 GNU/Linux 玩游戏方面也不至于那么难绷。</p>
<p>非官方的网站 <a href="https://www.protondb.com/" target="_blank" rel="noopener noreffer ">protondb</a>，这上面可以搜索到一些游戏的评价，有玩家会在上面分享这个游戏在他使用的发行版运行起来的体验如何，并且还有给出他运行这个游戏的发行版的相关信息，如果是不太好运行的游戏，也许还会分享他们是如何让这个游戏跑起来的。</p>
<p>国内软件的适配还不是很好，腾讯会议虽然支持了 Wayland，但是 Wayland 下的运行，窗口分享和摄像头都不能正常工作。QQ 虽然存在 Linux 平台的版本，但仍然有一些小问题等待修复。现在倒是有了 QT 写的跨平台的微信了，只不过还是测试版: <a href="https://linux.weixin.qq.com/" target="_blank" rel="noopener noreffer ">https://linux.weixin.qq.com/</a></p>
<p>更多的可以参考我新写的一篇文章：<a href="../whywinorlinux/" rel="">为什么你应该(不)使用 GNU/Linux 作为日用操作系统</a></p>
<hr>
<h2 id="os">OS</h2>
<p>下面关于发行版的截图大部分来自 Wikipedia 的图片，有一部分来自其在社交媒体上的官方账号发送的图片，当然也有几张是我自己截的。因为我自己懒得再装一遍，所以有的图片用的别人的，如果有机会装他们的发行版我就替换一下。</p>
<blockquote>
<p><strong>所以如果你是某张图片的利益相关人员，认为我使用这张和你利益相关的图片是种侵权行为，请通过一些我可以看到的方式（如评论）联系我</strong></p>
</blockquote>
<h3 id="debian-相关">Debian 相关</h3>
<p>首先介绍 Debian 的，因为如果有国内软件是被官方支持开发 Linux 版本的，那么至少会给一个 deb 包（deb 就是 Debian 系使用的软件包格式）。Debian 系使用 dpkg 作为软件包管理器。</p>
<h4 id="debian-linux">Debian Linux</h4>
<p>官网链接：https://www.debian.org/</p>
<p>老牌 OS 了，在我认知中比 Debian 历史更加久远的应该就是 Slackware。不过我本机没装过，虚拟机装过。我在安装 Kali Linux 的时候遇到了 no-free firmware 的问题，听别人讲貌似 Debian Linux 也会出现，不过这也是有些解决办法的，而且 firmware 这个检测是在对磁盘操作之前，不行了就不装这个系统，全身而退。Debian 听说就是稳定，其实稳定就带来了使用的不是新版本的软件，毕竟时间方面，新版本没有经历过考验。不过听说如果给 Debian 添加一个 testing 软件源就可以尝鲜新版本了。</p>
<p>印象中是从 Debian 10 开始，Debian 默认启用了 <a href="https://wiki.debian.org/AppArmor" target="_blank" rel="noopener noreffer ">Apparmor</a> 安全模块。</p>
<hr>
<p>2024年3月更新：</p>
<p>我在去年的时候在我的笔记本电脑上装 Debian 了，没有遇到 no-free firmware 的问题，安装体验还是不错的。不过我不是很喜欢选了 GNOME 后，把 GNOME 它们一些实用程序也给装上（比如视频和音乐播放器），我也许会用到，但不喜欢上来就装上。</p>
<p>而且我暂时没找到一个比较好的管理我在 GitHub 上下载的 deb 包的方案，遂放弃。</p>
<hr>
<p>Debian 默认不安装类似 sudo 这样的执行特权命令的程序，所以需要你自己安装，然后自己写相应的配置文件。（sudo 这样的软件是很有必要的，老生常谈的就是尽量减少攻击面之类的，直接 su 切换到 root 用户去执行<em>和系统相关的命令</em>是很危险的行为）</p>
<p>Debian Linux 应该是随版本更新，不过貌似 testing 软件源可以让它作为滚动更新而存在。</p>
<p></p>
<p>图为 Debian 12 下的 GNOME 桌面。</p>
<h4 id="ubuntu-linux">Ubuntu Linux</h4>
<p>官网链接：https://ubuntu.com/</p>
<p>基于 Debian 的 OS，听说号称要做 Linux 中的 Windows，莫非它做到了独裁？我将系统启动慢，软件启动慢归结于 Ubuntu 强推自家 snap 的问题。</p>
<p>Ubuntu 是我安装系统时体验最差的操作系统了（印象中，我好久不再安装 Ubuntu），启动速度慢，安装的速度也不咋地（这个可能是我自己网络的问题），而且默认安装的就是 GNOME 桌面环境，不允许安装的时候做出选择，桌面环境 (DE, Desktop Environment) 这个后续再谈。当然有使用不同 DE 的 Ubuntu，但得下载对应系统的镜像文件了，比如使用 KDE Plasma 的叫做 KUbuntu。这个 KUbuntu 大抵是比较适合作为一些新手（我指的是从 Windows 换到 GNU/Linux）的，因为 KDE 和 Windows 桌面的使用习惯在我看来是差不多的（甚至 KDE 有一个主题就是旨在模仿 Win11）。</p>
<p>再解释一下为什么认为 KUbuntu 大抵是比较适合作为一些新手，因为 Debian/Ubuntu 有着大量的用户群体，这里在我国貌似也不例外（可能是这样，我并不知道全国使用 GNU/Linux 发行版的这个具体情况，所以只能说可能是如此）。很多软件如若要有一个针对 GNU/Linux 平台的版本，那么很大概率就是 Debian/Ubuntu 了，而且一些教程如若提到了在 GNU/Linux 平台下该如何操作的话，大多至少都会假定读者使用的是 Debian/Ubuntu 发行版。</p>
<p></p>
<p>图为 Ubuntu 22.04 LTS 版本的桌面图片，可以看到这里的 Gnome 和上面 Debian 的不太一样，Ubuntu 的 GNOME 做了他们自己的修改。</p>
<p>Ubuntu 认知中是随版本更新。</p>
<p>但我说实话，我一直不认为安装 Ubuntu 作为自己的日用操作系统是个什么好主意，因为在我看来它只有一个好的地方——对安全启动的支持还不错。如果是虚拟机安装就当我没说，虚拟机安装主要为了方便，能快点装完开始干活就好。</p>
<h4 id="kali-linux">Kali Linux</h4>
<p>官网链接：https://www.kali.org/</p>
<p>基于 Debian testing 源的 Kali Linux 安装界面类似 Debian 的系统安装界面，我曾经尝试给我的笔记本安装 Kali Linux，但是体验不是很好，因为我卡在了 no-free firmware，导致网络无法使用（悲），解决办法还是有的，我看 Kali 论坛上有人提出下载好对应的 firmware 再移动到系统安装盘内，不过我懒的整了。</p>
<p>Kali Linux 是否是一个可日用的操作系统，我无法评价（因为我没试过）。Kali Linux 对 DE 做的美化还是不错的。有一点值得说一下，Kali Linux 不需要更换软件源的网址，大多数 GNU/Linux 发行版因为网络问题都需要更换软件源，除了国内公司搞的（比如 Deepin/UOS 或者 openKylin 之类）或者 Kali Linux、OpenSUSE Linux，Fedora Linux，其他的貌似都得换源。</p>
<p>机缘巧合之下，我安装了 Kali Linux 虚拟机，故而下边两张 Kali Linux 的桌面截图的第一张就是我截的了。</p>
<p></p>
<p></p>
<p>第一张图片是 Xfce 桌面，第二张是 GNOME 桌面，这里没有太表现出来 Kali Linux 中对各家 DE 的美化。不过能看出来 Terminal 中对 Shell 的美化。</p>
<p>你可以和 Debian 的那张图片对比一下就可以发现不同之处。Debian 那个使用的是 bash 并且没有看出有什么美化，尤其是 PS1 变量（就是 <strong>debian@debian</strong> 那个东西）就是默认的设置，但是 Kali Linux 默认除了 bash 之外还安装了 zsh 并且将 zsh 作为其默认的 shell。并且它对 zsh 做了一些配置，比如那个 <strong>kali@kali</strong>，zsh 默认并不是这样的，这是 Kali Linux 自己的配置，而且默认还有对历史命令的猜测和对你输入的命令颜色上的美化，这是靠两个 zsh 的插件实现的。</p>
<p>插件 <a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener noreffer ">zsh-autosuggestions</a></p>
<p>插件 <a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener noreffer ">zsh-syntax-highlighting</a></p>
<p>写到这里突然发现我无法真正确定 Kali Linux 上的 zsh 是通过这两个插件得到的这个效果，但是这俩插件很受欢迎，大多数发行版对都是默认不装 zsh 的，所以你装 zsh，网上的美化教程大多都会提到装上这两个插件。</p>
<p>我本身是 bash 作为 shell 环境，也懒得整 zsh，我就贴一个 fish shell 官网的截图，zsh 这两个插件就是旨在还原 fish shell 的效果</p>
<p></p>
<p>可以看到 ssh 后面是灰色的，这就是对历史命令的读取，只需要一个右键就可以直接根据这条历史命令补全当前输入的命令，并且 cat 和 ssh 之类的都有颜色，这是语法高亮，那两个插件就是还原这个效果。</p>
<p>Kali Linux 我记得是滚动更新。</p>
<h4 id="deepin-23-之前">Deepin 23 之前</h4>
<p>官网链接：https://www.deepin.org/</p>
<p>Deepin 操作系统作为我国国产的操作系统，我自然是要体验一番的（虽然只使用了一天左右吧），V20.x 都是基于 Debian 的，Deepin 操作系统是我比较推荐新手使用的，不过我自己没使用过太久，所以可能这个 OS 没有我想象中那么新手友好。作为一款国产的操作系统，一些没有推出 Linux 版本的国内软件它有自带的解决方案（虽然我没记错的话，应该是用 wine 模拟的，wine 是一个类 Unix 平台中运行 exe 程序的解决方案），Deepin 自带的软件商店可以点击一下就安装了，还是比较方便的。Deepin 默认使用自家的 DE——DDE,这个 DE 我自认为不咋好看。</p>
<blockquote>
<p>Wine 通过提供一个兼容层来将 Windows 的系统调用转换成与 POSIX 标准的系统调用。它还提供了 Windows 系统运行库的替代品和一些系统组件（像 Internet Explorer，注册表，Windows Installer）的替代品</p>
</blockquote>
<p>上面这段摘自<a href="https://zh.wikipedia.org/wiki/Wine" target="_blank" rel="noopener noreffer ">维基百科对 wine 的介绍</a>。</p>
<p>目前使用 Deepin 这类国内公司发行的 GNU/Linux 发行版应该还有一个好处 —— Linux 版本的微信目前只支持这些发行版。</p>
<p></p>
<p>Deepin 应该是随版本更新。</p>
<p>Deepin 23 开始，包管理器就不再使用 Debian 的 dpkg 了，所以标题写的是 Deepin 23 之前。</p>
<h3 id="redhat-相关">RedHat 相关</h3>
<p>这个名字也不知道对不对。Redhat 使用的大概是 rpm 包管理器。</p>
<h4 id="fedora">Fedora</h4>
<p>官网链接：https://fedoraproject.org/</p>
<p>作为一个商业公司的产品，软件版本比较新。主打一个为开发者设计和注重隐私和安全。</p>
<p>确实是为开发者设计，默认安装了 QEMU 和 GNOME BOX 可以用来安装虚拟机，还安装了 podman 用于安装一些容器。</p>
<p>Fedora 默认启用 firewalld 防火墙，使用了 <a href="https://fedoraproject.org/wiki/SELinux" target="_blank" rel="noopener noreffer ">SELinux</a> 安全模块，安装时可选全盘加密，开箱即用的安全启动支持，软件仓库中的软件编译的时候也都是开启了 NX，PIE，fstack-protector，ALSR 等选项，内核也开启了一些安全选项编译。</p>
<p>Fedora 40 开始，会为每个 WIFI 连接生成一份单独的 MAC 地址保护隐私: <a href="https://fedoraproject.org/wiki/Changes/StableSSIDMACAddress" target="_blank" rel="noopener noreffer ">https://fedoraproject.org/wiki/Changes/StableSSIDMACAddress</a></p>
<p></p>
<p>Fedora 和 GNOME 配合的很好，受 GNOME 的更新也是最新的那一批。</p>
<p>这里可以发现和 Debian 差不多，Kali Linux 那张没有体现出其对 GNOME 的主题美化。三家的 GNOME 都差不多，因为版本没有差出那么多，三家发行版其软件仓库中的软件版本可能不同，但仅局限于此。</p>
<p>Fedora 默认会开 lzo 算法的 zram，这点可以的。</p>
<p>Fedora Linux 是随版本更新。</p>
<h3 id="arch-相关">Arch 相关</h3>
<p>Arch 系使用 pacman 作为软件包管理器。不过 Arch Linux 提供了 <a href="https://aur.archlinux.org/" target="_blank" rel="noopener noreffer ">AUR</a>，这是一个用户软件仓库，提供了 Arch Linux 官方仓库没有的软件，比如 linuxqq，一些国产软件都在 AUR 里可以找到，不过 AUR 不过是一个构建软件的脚本，对应软件得在 AUR 的 PKGBUILD 中写好的网址去拿对应的包。如果是国内软件安装还好说，其他的比如有些从 GitHub 拿的就得配置好网络了。Arch 有个 archlinuxcn 软件仓库，有一些额外的软件可以直接安装，中科大有 archlinuxcn 的软件源。 AUR 应该是 GNU/Linux 平台中软件包数量很多的平台了，能超过它的可能只有 NixOS 的（在我的认知中）。</p>
<h4 id="arch-linux">Arch Linux</h4>
<p>官网链接：https://archlinux.org/</p>
<p>Arch Linux 我只用了五个月左右就换成 Gentoo Linux 了，时间不长，我也不清楚滚动更新带来的滚挂能不能出现，反正我没遇到过，不过这个问题讨论之前应该定义一下什么是滚挂，之前我有过一回在登陆管理器登进去就黑屏，后来看到了错误日志发现貌似是 nouveau 的问题，我在 kernel 启动参数禁用 nouveau 就好了。这种算不算挂，应该不算吧。不过可以尝试安装 TimeShift 定时做快照给自己一个心理安慰，我当时整来着，就是快照就没有用过。</p>
<p>Arch Linux 是我推荐在 Deepin 待过一会就尝试的操作系统，虽然这个系统需要使用命令来安装，没有安装界面，所以可能有些困难，不过<a href="https://wiki.archlinux.org/title/Main_page" target="_blank" rel="noopener noreffer ">Arch Wiki</a>写的还是不错的，可以结合着别人的安装指南来看，wiki 和指南一起看，虚拟机尝试一手，就差不多了。这样的命令安装也许能让你对你的操作系统更有一个掌握的感觉（自认为）。</p>
<p>而且我认为有一个 Arch Linux 的启动盘是有些必要的，因为这样能一定程度上解决一些你需要进入系统才能解决的类似无法进入系统的问题。</p>
<p></p>
<p>这里放一个 KDE Plasma 桌面的截图，之后也就不放截图了，因为后续的发行版没有对桌面环境有什么太出彩的美化，这里放截图纯属因为还没放过 KDE Plasma 的截图。</p>
<p>很多软件在 AUR 上都有对应的 BUILD 脚本，这一块的生态是我选择 Arch Linux 的一个很重要的原因</p>
<p>Arch Linux 给了用户很高的自由度，用户可以自己选择使用什么增强安全的方式。</p>
<p>Arch Linux 提供了 <a href="https://github.com/archlinux/archinstall" target="_blank" rel="noopener noreffer ">archinstall</a> 可以更方便地安装系统</p>
<p>Arch Linux 是滚动更新。</p>
<h4 id="manjaro-linux">Manjaro Linux</h4>
<p>官网链接：https://manjaro.org</p>
<p>Manjaro 是基于 Arch Linux 做的 OS，比 Arch 仓库的软件推送慢了两周。Manjaro 的优势或许就在于它有一个安装界面，可以点点点就开始安装了，不需要输入命令。我看到过一个吐槽 Manjaro Linux 的，认为这降低了 Arch Linux 的门槛，反而让一些因此才使用的用户无法应对使用中可能遇到的问题。当然我并不认为这会有大不了的。我曾经在某年冬天就抱着要装 Manjaro 双系统的想法，当然后来我是 Arch Linux 单系统（逃）。</p>
<p>有人说 Manjaro 有一个很好的驱动管理软件。</p>
<p>Manjaro Linux 是滚动更新。</p>
<h3 id="opensuse-相关">OpenSUSE 相关</h3>
<p>说实话，我目前还不知道哪个系统是基于 OpenSUSE 做的。OpenSUSE 使用 zypper 作为软件包管理器。</p>
<h4 id="opensuse-linux">OpenSUSE Linux</h4>
<p>官网链接：https://www.opensuse.org/</p>
<p>OpenSUSE Linux 提供了滚动更新和版本更新两种更新方式，这对应它两个版本。有个类似 AUR 的用户软件仓库 OBS，不过我不是很了解 OBS，也不再多说什么了。OpenSUSE Linux 有别的 OS 都没有的 Yast 客户端，这个 GUI 软件可以完成很多特权操作，类似 Windows 的控制面板。而且 OpenSUSE 的软件源网址貌似可以自动给你选一个近的软件源去下载软件，可以让你使用官方源的时候也保持着还不错的速度。</p>
<p>就像上一段开头说的那样，OpenSUSE Linux 提供了滚动更新和依版本更新两种方式，分别是 OpenSUSE Tumbleweed 和 OpenSUSE Leap。</p>
<p>OpenSUSE 默认启用了 Apparmor，GRUB 启动引导界面有自己的皮肤，虽然我认为这个皮肤不怎么好看。</p>
<h3 id="gentoo-相关">Gentoo 相关</h3>
<p>Gentoo 使用 portage 软件包管理器，软件大多都是从源码开始安装。部分大型软件提供了二进制软件包版本。</p>
<h4 id="gentoo-linux">Gentoo Linux</h4>
<p>官网链接：https://www.gentoo.org</p>
<p>所谓的元发行版，由于软件仓库分发的是源码而不是软件本身（需要用户自己在自己的电脑或者是用户个人的服务器上编译），给了用户其他发行版都没有的自由。</p>
<p>这个自由是选择的自由</p>
<p>Gentoo Linux 是少数可以让你选择非 systemd 作为系统 init 系统的 Linux 发行版，但在这个世界，使用非 systemd 作为自己桌面操作系统的 init 系统就像用 linux-libre 作为自己的系统内核一样难绷，不过非 systemd 的 init（如 openrc ）还算可用，不过我很怀疑 linux-libre 的使用情况。</p>
<p>我不知道你是否对部分发行版打包的策略有意见，比如某些软件你希望直接上 O3 + lto 编译（虽然这些都是理论上的性能提升，用户难以直接感知到变化），但是为了稳定，少有软件会选择这个编译策略，但是 Gentoo Linux 可以让你的想法成真。</p>
<p>或者你不满软件的一些行为，但是你的 patch 一时还难以合并过去，portage 支持编译时应用用户自己的 patch。</p>
<blockquote>
<p>Fedora 41 选择了使用 O3 编译 Python，自称有 1.4 倍的性能提升</p>
<p><a href="https://fedoraproject.org/wiki/Changes/Python_built_with_gcc_O3" target="_blank" rel="noopener noreffer ">https://fedoraproject.org/wiki/Changes/Python_built_with_gcc_O3</a></p>
</blockquote>
<p>portage 的优点在于提供了 USE 变量，它允许用户自己决定软件的功能支持以确定依赖关系。Arch Linux 可能可以认为是可以定制你的系统，Gentoo Linux 就是可以定制你的软件。</p>
<blockquote>
<p>USE 是 Gentoo 为用户提供的最具威力的变量之一。很多程序通过它可以选择编译或者不编译某些可选的支持。例如，一些程序可以在编译时加入对 GTK+或是对 Qt 的支持。其它的程序可以在编译时加入或不加入对于 SLL 的支持。有些程序甚至可以在编译时加入对 framebuffer 的支持（svgalib）以取代 X11（X 服务器）。</p>
<p>大多数的发行版会使用尽可能多的支持特性编译它们的软件包，这既增加了软件的大小也减慢了启动时间，而这些还没有算上可能会涉及到的大量依赖性问题。Gentoo 可以让你自己定义软件编译的选项，而这正是 USE 要做的事。、</p>
<p>在 USE 变量里你可以定义关键字，它被用来对应相应的编译选项。例如，ssl 将会把 SSL 支持编译到程序中以支持它。-X 会移除其对于 X 服务器的支持（注意前面的减号）。gnome gtk -kde -qt5 将会以支持 GNOME（和 GTK+）但不支持 KDE（和 Qt）的方式编译软件，使系统为 GNOME 做完全调整（如果架构支持）。</p>
</blockquote>
<p>摘自 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation/zh-cn#.E9.85.8D.E7.BD.AE_USE_.E5.8F.98.E9.87.8F" target="_blank" rel="noopener noreffer ">Gentoo amd64 安装手册</a></p>
<p>当然还有很多变量，比如 CFLAGS, L10N, VIDEO_CARDS 这些，可以指定编译选项，本地语言和显卡设备</p>
<p>Gentoo Linux 这种源代码发行的系统，优势在于软件都是自己的机器编译安装，从隐私或安全角度来说都还不错，可惜我的机器性能没那么强劲。</p>
<p>Gentoo Linux 的安装并不完全依赖于它的安装介质，比如也可以使用 Arch Linux 的 livecd 去安装。</p>
<p>Gentoo Linux 是滚动更新。</p>
<h3 id="nix-相关">Nix 相关</h3>
<p>Nix 系使用的是 Nix 作为包管理器，这是一个<a href="https://wiki.archlinuxcn.org/wiki/Nix" target="_blank" rel="noopener noreffer ">是一个纯函数式包管理器，旨在使软件包管理可靠且可重现</a>。特点在于不遵守 FHS 标准，每个软件的每个版本都有一个独特的哈希值标明，并且通过符号链接的方式自由选择某些软件的某个版本作为当前使用版本，所以可以避免所谓依赖地狱这样的问题。Nix 系大抵只有 NixOS 吧，有个和 Nix 包管理器差不多的叫作<a href="https://en.wikipedia.org/wiki/GNU_Guix" target="_blank" rel="noopener noreffer ">GNU Guix</a>，基于这个包管理器也有一个 OS，就是 Guix OS。</p>
<p>FHS (Filesystem Hierarchy Standard)标准规定了文件系统中每个部分的大致用途和名称，比如/etc 存放配置文件，/bin 存放可执行文件，/lib 存放可执行文件使用的链接库。</p>
<p>依赖地狱(Dependency hell)这个问题我自身没遇到过，这个问题虽然有多种表现形式，但是我认为大体上你最多可能看到其中的一种情况——你安装了软件 A，其依赖于软件 B 3.2 版本，之后你又想安装软件 C，但是它依赖于软件 B &gt;= 3.4 版本，这时候版本之间就发生了冲突。</p>
<p>其实软件包管理器一定程度上解决了依赖地狱的一些问题，当然有的软件包管理器貌似没有版本的概念，也就没有刚刚我说的这个问题的存在。</p>
<p>Nix 靠将每个软件包都安装在 <code>/nix/store</code> 文件夹中并附上一个唯一的哈希值作为标记，保证了软件包依赖的独立性，不同软件的相同的依赖会因为这个哈希值而被标识为是对方的依赖，从而解决了依赖地狱的问题。当然，这样的方式也造成了磁盘空间的占用。Nix 存在着大量的软链接，其通过链接的方式做到指定当前环境的每个软件的版本是多少。</p>
<h4 id="nixos">NixOS</h4>
<p>官网链接：https://nixos.org/</p>
<p>NixOS 提供两种安装方式——图形化安装和手动安装。图形化安装就像 Fedora 这样的发行版一样提供一个带 DE 的 LiveCD 环境，不过这种安装受到我国网络环境的限制，不过都有 DE 了，是否在设置里设定一下代理，或者像 clash 这样的代理工具开 tun 模式可以完成下载软件的步骤 🤔。反正我是手动安装的。该系统的特点是大部分的配置可以写在 <code>/etc/nixos/</code> 中的文件中，比如对软件，services，用户的管理等等。在安装软件的时候可能涉及到从诸如 GitHub 之类的网站下载补丁或者源码，所以做好网络环境的配置是必要的。</p>
<p>但是安装软件的是否可能涉及到从 GitHub 之类的网站下载东西，或者如果你使用 NUR 的话（我不清楚 NUR 是否有国内源），NUR 仓库在 GitHub 上，所以你需要配置好网络环境才行。</p>
<p>之后我发现，Nix 这种特性在我安装交叉编译链的时候有那么一点点不友好，我难以忍受我需要为了 RISC-V 64 架构的 qemu 装那么多软件（逃）。当然 NixOS 有很多有意思的 feature，所以可能存在一个更加好的方式去安装交叉编译链，只不过我不知道了。</p>
<p>NixOS 不遵守 FHS 标准，所以正常的 chroot 也不好进去，使用它们自己提供的程序即可，我记得是叫做<code>nix-enter</code>。</p>
<p>NixOS 的 flakes 和 home-manager 结合可以更好的声明你的系统配置，很多东西都可以用这些声明文件自动生成。但是现在的问题是文档质量不足，太多的东西都需要直接看 <a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noopener noreffer ">nixpkgs</a> 中的源代码，虽然现在有 <a href="https://search.nixos.org/options" target="_blank" rel="noopener noreffer ">NixOS Search</a> 和 <a href="https://mynixos.com/" target="_blank" rel="noopener noreffer ">MyNixOS</a> 可以搜索相关的部分细节，但也不是很够。如果要全面的了解还是需要去看源码是怎么写的。</p>
<hr>
<p>只要你不是安装那种不能选择 DE 的发行版，那么选择一个 DE 就是你不得不做的一件事。</p>
<hr>
<h2 id="de">DE</h2>
<blockquote>
<p>桌面环境将各种组件捆绑在一起，以提供常见的图形用户界面元素，如图标、工具栏、壁纸和桌面小部件。此外，大多数桌面环境包括一套集成的应用程序和实用程序。最重要的是，桌面环境提供了他们自己的窗口管理器，然而通常可以用另一个兼容的窗口管理器来代替。</p>
</blockquote>
<p>桌面环境我只浅谈一下 KDE Plasma, GNOME 和 Xfce。<del>我在下面谈到了对 Wayland 的支持问题，如果你是 NVIDIA 独显驱动用户的话，GNOME 是禁用 Wayland 的，KDE plasma 不禁用。</del>（GDM 会 检查 NVIDIA 是否开启了一些参数以选择是否禁用 Wayland，总体来说是可用的）</p>
<p>如果你要使用 Wayland，输入法框架方面就不能选择 fcitx，只能选择 fcitx5 了。<del>ibus 我没用过，不知道怎么样。我一直是 fcitx5 用户（逃）</del> ibus 直接装就是支持 Wayland 的。我引入了输入法框架这个名词，但是没有太多解释，我这里就放一个 <a href="https://wiki.archlinuxcn.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95" target="_blank" rel="noopener noreffer ">Arch zhWiki 中输入法条目的链接</a>。</p>
<p>当然，各家 DE 都是有美化的空间的，具体你可以去搜一搜相关的美化教程，我本人是懒得做这些事情，所以也就没什么好说的了。（我认为美化的空间都很有限）</p>
<p>一个桌面环境（DE）一般包括一个窗口管理器（WM）还有一堆相关的软件：文件管理，查看图片视频音频等，设置，文本编辑器等</p>
<p>在我看来，KDE Plasma 优秀的地方在于：</p>
<ul>
<li>家族有很多软件，并且其中存在很多有用的软件。</li>
<li>设置里存在很多可设置选项，可以调控的地方有很多很多很多</li>
<li>社区驱动，对很多系统的支持都不错</li>
<li>对 Wayland 的输入法协议实现的很全面，可以让一些尚没有使用新版 Wayland 输入法协议的应用用上中文输入法</li>
</ul>
<p>在我看来，GNOME 的优秀的地方在于：</p>
<ul>
<li>比 KDE Plasma 更漂亮的外观</li>
<li>也许因为貌似大部分代码由商业公司贡献，导致更加激进？
<ul>
<li>RedHat 甚至发起过提案要让 GNOME 只使用 Wayland，RedHat 开发的 Fedora 在 Fedora 42 版本（目前正在开发中）貌似就要这么做了。
<ul>
<li>更新: Fedora 41 默认只提供 GNOME Wayland。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>但 GNOME 难绷的地方在于：</p>
<ul>
<li>只支持 text-input-v3（Wayland 输入法协议第 3 版）导致我的中文输入法在 Electorn 应用上会无效（如果使用 Wayland 的话）</li>
<li>貌似基本上大部分是商业公司的开发者贡献代码</li>
<li>去除了系统托盘的支持，也许你不知道系统托盘是什么，就是 Windows 下边那个任务栏在时钟旁边的那堆应用小图标</li>
</ul>
<p>如果你都不喜欢，可以安装一个你喜欢的窗口管理器（基于 Xorg 的有 i3，dwm 等；基于 Wayland 的有 Hyprland，sway，wayfire 等），然后那些软件和小组件都由你来自己手动安装，这样的一套桌面环境可以调整的地方会更多（也更加折腾），并且可以更符合你个人的习惯。</p>
<h3 id="kde-plasma">KDE plasma</h3>
<p>KDE Plasma 是相当受欢迎的 DE 了，而且一定程度上和 Win10 的桌面有些像，所以对于一些人来说可能会比较熟悉。KDE 设置提供了很多选项，可以说 KDE 可以设置的地方很多。KDE 的音频控制组件貌似不是很支持 pipewire，我知道的是 Arch Linux 用户可以安装 pipewire-pulse 兼容层解决这个问题，Gentoo 虽然也有这个，但貌似不是很好使的样子（后来好使了，不清楚我这两回之间有什么操作上的差异）。KDE 自带一些监控硬件参数的状态栏组件还是比较不错的，Xfce 也有类似的，GNOME 就没有这东西了（GNOME 也有 SystemMonitor 提供这个功能，但无法在状态栏上显示）。甚至 GNOME 默认是没有系统托盘的，这个还需要安装相应的插件来实现。</p>
<p><del>KDE Plasma 目前貌似还存在一个问题 —— Wayland 下的部分应用无法正确显示图标，而是显示一个 Wayland 默认图标。这个问题不清楚在 Plasma 6 中是否还存在。</del>（24 年 11 月更新：印象中不存在了）</p>
<p>我认为 KDE Plasma 什么都不错，就是颜值差了些。</p>
<h3 id="gnome">GNOME</h3>
<p>GNOME 默认使用 Wayland，<del>当然如果检测到机器使用 NVIDIA 独显驱动，那就不会用 Wayland 了</del>（现在会有一套检查逻辑，需要开启一些 NVIDIA 相关的 service 才能用 Wayland）。我认为 GNOME 默认还是挺不错的，我指的是颜值。</p>
<p>Electron 和 Chromium 不同的是，你未必能够解决无法输入中文这个问题（在 Wayland 中），你可以通过传递 flag 的方式用以 Wayland 启动软件，但由于 Electron 目前还不支持 gtk4 导致无法在 GNOME 桌面环境中输入中文（如果用 Wayland 的话）。</p>
<p>GNOME 的分数缩放仍然是实验性功能，Fedora 41 默认启用，其他的发行版可以自行使用 <code>gsettings</code> 或者 <a href="https://apps.gnome.org/DconfEditor/" target="_blank" rel="noopener noreffer ">dconf 编辑器</a>设置</p>
<p>GNOME 的 night-light 只有根据地区设置和手动修改，没有一直开启（可能除了那俩选项还有别的，但反正没有一直开启），我只能手动修改，时间设置为 0:00 ~ 23:59 这个时间段。GNOME 46 就可以通过都设置同一个时间段达到全局开启的效果了好像？我这句话的意思不是说 GNOME 46 开始可以了，是我恰好用了这个版本，发现这个版本可以。</p>
<p>GNOME 47 支持了可选的 Xorg 支持，Fedora 41 也是默认提供的 GNOME Wayland。</p>
<h3 id="xfce">Xfce</h3>
<p>Xfce 这个 DE 有点就是简洁消耗小。Xfce 家族的软件都不是那么花哨，其大小也还不错，所以一些 WM 用户可能会选择安装 Xfce 家族的部分软件。你尝试装的时候就会发现 Xfce 需要装的软件真的少，所以功能也不是很多，当然核心的那些都有，没有什么问题。</p>
<p>KDE Plasma 和 GNOME 都默认 Waylnd 了，Xfce 还是在下个版本才默认 Wayland 还是对 Wayland 有良好的支持来着？</p>
<h2 id="wm">WM</h2>
<p>WM（WIndow Manager,窗口管理器）是比 DE 更低级的东西，一般可以带来更低的消耗，尤其是平铺式的 WM 可以带来更好的视觉体验。由于 WM 大多数时候都是需要键盘就行，我还听到一个言论就是使用 WM 更不容易得鼠标手。</p>
<p>WM 不会自带很多东西，比如应用程度启动器，壁纸，窗口渲染，声音和亮度调节，polkit 前端组件等等，这些都需要你去自己装上，当然有的 WM 可能会自带窗口渲染或是其他什么的。那些 DE 也都有自家的 Terminal，虽然 WM 也可能自家有 Terminal（比如开发 dwm 的组织也开发了 st Terminal）不过不会自动安装，这个也需要自己装上。</p>
<p>窗口管理器会少一些小组件：</p>
<ul>
<li>poklit 前端组件
<ul>
<li>类似 Windows 的 UAC，只不过 Windows 弹出那个窗口要求你是否要运行的时候点击即可，这个需要你输入密码</li>
</ul>
</li>
<li>xdg-desktop-portal 组件
<ul>
<li>用来允许应用程序互相通信用，比如选择文件，屏幕共享之类</li>
</ul>
</li>
<li>电源管理 &amp;&amp; 空闲管理
<ul>
<li>空闲管理指的是用于控制过一段时间锁屏休眠的东西</li>
</ul>
</li>
<li>音量 &amp; 亮度控制等</li>
<li>状态栏</li>
</ul>
<p>WM 我只浅谈一下 i3wm, dwm，sway 和 Hyprland。</p>
<h3 id="i3wm">i3wm</h3>
<p>这是一个知名的 WM 了，基于 X11，我用的时候是在用户目录的.xinitrc 文件中写了 <code>exec i3</code> 通过 startx 命令在 tty shell 启动 i3wm。配置文件在用户目录的.config/i3 文件夹中。Kali Linux 中对 i3WM 好像有个美化看起来有些意思，我懒得装 Kali Linux 的虚拟机了，看官网 Blog 中的图片感觉还有些意思。</p>
<p>这里插一嘴，所以这里有个新玩法，即只让一个软件运行以求更好的性能，也是在 .xinitrc 写 <code>exec &lt;program&gt;</code> 然后 startx 运行。</p>
<h3 id="dwm">dwm</h3>
<p>这是比 i3wm 消耗更低的 wm，也是我比较推荐的 wm 了，缺点就是配置文件也是需要参与到编译环节的，每次更改配置文件都得重新编译 dwm。dwm 比 i3wm 还要简洁，所以你需要补丁才行。dwm 也是基于 X11 的。这里就要所说 Gentoo Linux 了，Gentoo 的 dwm 提供了一个 USE 变量 savedconfig，这会让 Gentoo 把默认的配置文件放到一个目录中，每次你更改这个文件再 <code>emerge dwm</code> 就行，它会读取那个目录的文件参与编译。</p>
<h3 id="sway">sway</h3>
<p>sway 是 Wayland 版本的 i3，i3 的配置文件可以直接拿来用。</p>
<p>开发更加保守，NVIDIA 需要附加 <code>--unsupported-gpu</code> 选项才能使用。</p>
<p>sway 依赖于 wlroots 这个 compositor，很多 Wayland 的窗口管理器都使用的这位。Hyprland 0.42 之前也是使用的它，后来自己写了一个。</p>
<p>sway 没有 XWayland 分数缩放的支持，sway 和 Hyprland 貌似都倾向于让 XWayland 自己实现这个功能，但是 Hyprland 提供了一个将 XWayland 的缩放设为 0，不跟配置的缩放走的选项，这样用户可以自己显示地通过设置或者命令行参数的方式单独 XWayland 的应用的缩放，sway 并没有提供这个方式。</p>
<h3 id="hyparland">Hyparland</h3>
<p>Hyprland 是基于 Wayland 做的 WM，Hyprland 戳我的点就是官网主页列的截图。</p>
<p></p>
<p>真的好帅啊，当然 Hyparland 默认不是这样的，你需要安装其他的软件进行进一步的配置。</p>
<p>我尝试使用了几周，期间写的配置文件让我存放到 GitHub 仓库内了。</p>
<p>Hyprland 可以很好的设置环境变量，并且自带对窗口的美化。目前的最新版（0.42）移除了对 wlroots 的依赖，而是使用自己的一套。</p>
<p>Hyprland 比 sway 好的地方则是实现了 text-input-v1。并且支持将 XWayland 的缩放设置为 0，而不是直接按照全局的缩放比例走（我本身只有一个 electron 的应用只能跑在 XWayland 下，所以我用 flatpak 安装了它，并用 electron 命令行的方式缩放，这样还是可用的，所以 XWayland 设置为 0 缩放，我自己手动给应用缩放这个办法我还算接受）</p>
<p>Hyprland 官方可能是用 Arch Linux 和 NixOS 的多？文档中的部分解决方案基本都是针对这两个发行版的。</p>]]></description>
</item>
</channel>
</rss>
