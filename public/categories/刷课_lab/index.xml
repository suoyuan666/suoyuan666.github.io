<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>刷课_Lab - Category - 索元的博客</title>
        <link>http://localhost:1313/categories/%E5%88%B7%E8%AF%BE_lab/</link>
        <description>刷课_Lab - Category - 索元的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>s5n666@outlook.com (suo yuan)</managingEditor>
            <webMaster>s5n666@outlook.com (suo yuan)</webMaster><lastBuildDate>Mon, 12 Aug 2024 07:40:42 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E5%88%B7%E8%AF%BE_lab/" rel="self" type="application/rss+xml" /><item>
    <title>CS144-2024-lab_3: the TCP sender</title>
    <link>http://localhost:1313/posts/cs144_lab3/</link>
    <pubDate>Mon, 12 Aug 2024 07:40:42 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_lab3/</guid>
    <description><![CDATA[<p>CS144 课程 Lab Assignment 中的 Checkpoint 3: the TCP sende</p>
<h1 id="cs144-2024-lab_3-the-tcp-sender">CS144-2024-lab_3: the TCP sender</h1>
<blockquote>
<p>This week, you’ll implement the “sender” part of TCP, responsible for reading from a ByteStream (created and written to by some sender-side application), and turning the stream into a sequence of outgoing TCP segments. On the remote side, a TCP receiver transforms those segments (those that arrive—they might not all make it) back into the original byte stream, and sends acknowledgments and window advertisements back to the sender.</p>
<p>本周，您将实现 TCP 的 sender 部分，负责从字节流（由某个 sender 应用程序创建和写入）中读取数据，并将该流转换为一系列传出的 TCP 段。在远程端，TCP receiver 将这些段（到达的段 — 它们可能不会全部到达）转换回原始字节流，并将 ack 和 window 发送回 sender。</p>
</blockquote>
<p>它说了一长串要求，大致翻译过来是这样:</p>
<ul>
<li>跟踪 receiver 的 window （接收传入的 <code>TCPReceiverMessage</code> 及其 ackno 和 window size）</li>
<li>从 <code>ByteStream</code> 读取数据，创建新的 TCPSenderMessage（如果需要，包括 SYN 和 FIN 标志）并发送它们。 sender 应继续发送段，直到 window 已满或 <code>ByteStream</code> 没有更多内容可发送。</li>
<li>跟踪哪些段已发送但尚未被 receiver 确认——我们称这些段为“未完成”( <em>outstanding</em> )段</li>
<li>如果已发送了足够长的时间，但尚未得到确认，则重新发送未完成的段</li>
<li>每隔几毫秒，TCPSender 的 <code>tick()</code> 方法就会被调用，并带有一个参数，该参数告诉它自上次调用该方法以来已经过去了多少毫秒。使用它来跟踪 TCPSender 已存活的总毫秒数。请不要尝试从操作系统或 CPU 调用任何有关时间的函数—— <code>tick()</code> 是您了解时间流逝的唯一途径。这可以使事情保持确定性和可测试性。</li>
<li>构造 TCPSender 时，会为其提供一个参数，告知其重传超时 (RTO) 的初始值。RTO 是重新发送未完成的 TCP 段之前要等待的毫秒数。RTO 的值会随时间而变化，但初始值保持不变。起始代码将 RTO 的初始值保存在名为 <code>initial_RTO_ms</code> 的成员变量中。</li>
<li>您将实现 retransmission timer：可以在特定时间启动的警报，一旦 RTO 过去，警报就会响起。强调，这种时间流逝的概念来自于调用的 <code>tick()</code> 方法，而不是通过获取实际的时间。</li>
<li>每次发送包含数据的段（序列空间中的长度非零）时（无论是第一次还是重新传输），如果计时器未运行，则启动它，以便它在 RTO 毫秒后过期（对于 RTO 的当前值）。</li>
<li>当所有未完成的数据都得到确认后，停止 retransmission timer。
<ul>
<li>重新传输 TCP receiver 尚未完全确认的最早（序列号最低）段。您需要将未完成的段存储在某个内部数据结构中，以便执行此操作。</li>
<li>如果当前 window size 非零
<ul>
<li>增加连续重传的次数，因为你刚刚重传了一些东西。你的 TCPConnection 将使用此信息来决定连接是否无望（连续重传次数过多）并需要中止</li>
<li>将 RTO 的值加倍。这被称为“指数退避” (exponential backoff)——它会减慢糟糕网络上的重传速度，以避免进一步阻碍工作。</li>
</ul>
</li>
<li>重置 retransmission timer ，设置为 RTO 毫秒后过期（考虑到可能刚刚将 RTO 的值加倍）。</li>
</ul>
</li>
<li>当 receiver 向 sender 发出确认成功收到新数据的确认消息时（确认消息所反映的绝对序列号比任何先前的确认消息都大）
<ul>
<li>将 RTO 重新设置为其初始值。</li>
<li>如果 sender 有任何未完成的数据，则重新启动重传计时器，以便它在 RTO 毫秒后过期（对于 RTO 的当前值）。</li>
<li>将连续重传次数重置为零。</li>
</ul>
</li>
</ul>
<p>对于 <code>push()</code>:</p>
<ul>
<li>要求 <code>TCPSender</code> 从出站字节流中填充 window ：它从流中读取并发送尽可能多的 <code>TCPSenderMessage</code>，注意 window 中要有可用空间。它通过调用提供的 <code>transmit()</code> 函数来发送它们。</li>
<li>您需要确保您发送的每个 <code>TCPSenderMessage</code> 都完全适合 receiver 的 window 。使每条单独的消息尽可能大，但不要大于<code>TCPConfig::MAX_PAYLOAD_SIZE</code>。</li>
<li>您可以使用 <code>TCPSenderMessage::sequence_length()</code> 方法来计算一个段占用的序列号总数。请记住，SYN 和 FIN 标志也各自占用一个序列号。</li>
<li>如果 window 大小为零该怎么办？
<ul>
<li>如果 receiver 已宣布 window 大小为零，则 <code>push()</code> 应假装 window 大小为 1。 sender 最终可能会发送一个字节，该字节被 receiver 拒绝（并且不确认），但这也可能促使 receiver 发送新的确认段，其中显示其 window 中已打开更多空间。没有这个， sender 永远不会知道它被允许再次开始发送。这是您的实现在零大小 window 的情况下应该具有的唯一特殊情况行为。TCPSender 实际上不应该记住错误的 window 大小 1。特殊情况仅在 <code>push()</code> 中处理。另外，请注意，即使 window 大小为 1（或 20 或 200）， window 仍可能已满。满 window 与零大小 window 不同。</li>
</ul>
</li>
</ul>
<p>对于 <code>receive()</code>:</p>
<ul>
<li><code>receive()</code> 接收一条 <code>TCPReceiverMessage</code>，消息传达了窗口的新左边界 (ackno) 和右边界 (ackno + window size)。 <code>TCPSender</code> 应检查其尚未确认的段集合，并移除所有已完全被确认的段 (即 ackno 大于该段中所有的序列号)。</li>
</ul>
<p>对于 <code>tick()</code>:</p>
<ul>
<li>返回自上次调用该方法以来过去的时间。sender 可能需要重新传输 outstanding segment；它可以调用 <code>transmit()</code> 函数来执行此操作。(提醒：请不要尝试在代码中使用现实世界中的有关时间的函数；时间流逝的唯一参考来自 <code>tick()</code> 中传递的自上次调用以来的参数)</li>
</ul>
<p>对于 <code>make_empty_message()</code>:</p>
<ul>
<li>TCP sender 应该生成并发送一个长度为零的消息，同时正确设置序列号。这在某些情况下很有用，例如对端想要发送一个 TCPReceiverMessage（例如，因为它需要确认来自对端 sender 的某些内容）并且需要生成一个 TCPSenderMessage 与其配对时。</li>
<li>注意：像这样的段不占用任何序列号，因此不需要将其记录为“未确认”，并且不会被重传。</li>
</ul>
<h2 id="我的实现">我的实现</h2>
<p>在 <strong>tcp_sender.hh</strong> 中，给 <code>TCPSender</code> 添加一些成员变量</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">syn_send_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">fin_send_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">keep_rto_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">re_try_count_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">past_time_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">count_c_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">uint64_t</span><span class="o">&gt;</span> <span class="n">window_size_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="k">struct</span> <span class="nc">msg_with_time</span><span class="o">&gt;</span> <span class="n">buffer_</span><span class="p">;</span></span></span></code></pre></div></div>
<p>这里的 <code>struct msg_with_time</code> 是我自己定义的:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">msg_with_time</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">TCPSenderMessage</span> <span class="n">msg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">keep_rto</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p><code>msg_with_time</code> 结构体中的 <code>keep_rto</code> 是用来处理 window size 为 0 的特殊情况，它们的 RTO 不应该翻倍，所以多了个 <code>keep_rto_</code> 和 <code>keep_rto</code>。</p>
<p>下面则是具体的实现:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;tcp_sender.hh&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;tcp_config.hh&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;tcp_sender_message.hh&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;wrapping_integers.hh&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;deque&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;ranges&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">sequence_numbers_in_flight</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">count_c_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">consecutive_retransmissions</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">re_try_count_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">push</span><span class="p">(</span> <span class="k">const</span> <span class="n">TransmitFunction</span><span class="o">&amp;</span> <span class="n">transmit</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">has_cap</span> <span class="p">{</span> <span class="nb">false</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">window_size_</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">keep_rto_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">sequence_numbers_in_flight</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">has_cap</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span> <span class="n">sequence_numbers_in_flight</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">has_cap</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">has_cap</span>
</span></span><span class="line"><span class="cl">       <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="p">(</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">||</span> <span class="p">(</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">                 <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="o">!</span><span class="n">syn_send_</span> <span class="o">||</span> <span class="p">(</span> <span class="n">input_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">is_closed</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">fin_send_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">                      <span class="o">||</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span> <span class="n">TCPConfig</span><span class="o">::</span><span class="n">MAX_PAYLOAD_SIZE</span><span class="p">,</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">limit</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span> <span class="n">limit</span><span class="p">,</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">-</span> <span class="n">sequence_numbers_in_flight</span><span class="p">()</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">auto</span> <span class="n">fill_enable</span>
</span></span><span class="line"><span class="cl">      <span class="o">=</span> <span class="n">limit</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">TCPConfig</span><span class="o">::</span><span class="n">MAX_PAYLOAD_SIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span> <span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">fill_enable</span> <span class="o">?</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="o">/</span> <span class="nl">limit</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span> <span class="p">(</span> <span class="n">fill_enable</span> <span class="o">?</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="o">--</span><span class="n">i</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">uint64_t</span> <span class="n">length</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="n">buffer_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="p">{</span> <span class="p">{</span> <span class="n">isn_</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="p">{},</span> <span class="nb">false</span><span class="p">,</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="p">},</span> <span class="n">keep_rto_</span> <span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_popped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">syn_send_</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">msg</span><span class="p">.</span><span class="n">SYN</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">syn_send_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">count_c_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="n">limit</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">str_t</span> <span class="o">=</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">peek</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">msg</span><span class="p">.</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">str_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">count_c_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">pop</span><span class="p">(</span> <span class="mi">1</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="o">?</span> <span class="n">window_size_</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">sequence_numbers_in_flight</span><span class="p">()</span> <span class="o">:</span> <span class="n">limit</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="o">&amp;&amp;</span> <span class="n">input_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">is_closed</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">fin_send_</span> <span class="o">&amp;&amp;</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fin_send_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer_</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">msg</span><span class="p">.</span><span class="n">FIN</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">count_c_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">isn_</span> <span class="o">=</span> <span class="n">isn_</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">transmit</span><span class="p">(</span> <span class="n">buffer_</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">msg</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="n">keep_rto_</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">keep_rto_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TCPSenderMessage</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">make_empty_message</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span> <span class="n">isn_</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="p">{},</span> <span class="nb">false</span><span class="p">,</span> <span class="n">input_</span><span class="p">.</span><span class="n">reader</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">receive</span><span class="p">(</span> <span class="k">const</span> <span class="n">TCPReceiverMessage</span><span class="o">&amp;</span> <span class="n">msg</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">msg</span><span class="p">.</span><span class="n">RST</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">input_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">set_error</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">window_size_</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">window_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">msg</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint64_t</span> <span class="n">length</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Wrap32</span><span class="o">&gt;&gt;</span> <span class="n">buf_col</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">val</span> <span class="p">:</span> <span class="n">std</span><span class="o">::</span><span class="n">ranges</span><span class="o">::</span><span class="n">reverse_view</span><span class="p">(</span> <span class="n">buffer_</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">seqno</span> <span class="o">+</span> <span class="n">length</span> <span class="o">+</span> <span class="n">val</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">sequence_length</span><span class="p">()</span> <span class="p">)</span> <span class="o">==</span> <span class="n">msg</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf_col</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Wrap32</span><span class="o">&gt;</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">seqno</span> <span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">length</span> <span class="o">+=</span> <span class="n">val</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">sequence_length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">buf_col</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">past_time_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">val</span> <span class="p">:</span> <span class="n">buf_col</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">buffer_</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span><span class="n">buffer_</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">buffer_</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">val</span><span class="p">](</span><span class="k">const</span> <span class="k">struct</span> <span class="nc">msg_with_time</span><span class="o">&amp;</span> <span class="n">arg</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">arg</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">seqno</span> <span class="o">==</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count_c_</span> <span class="o">-=</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">re_try_count_</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial_RTO_ms_</span> <span class="o">/=</span> <span class="p">(</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">re_try_count_</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">re_try_count_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">TCPSender</span><span class="o">::</span><span class="n">tick</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">ms_since_last_tick</span><span class="p">,</span> <span class="k">const</span> <span class="n">TransmitFunction</span><span class="o">&amp;</span> <span class="n">transmit</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">past_time_</span> <span class="o">+=</span> <span class="n">ms_since_last_tick</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">val</span> <span class="p">:</span> <span class="n">buffer_</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">past_time_</span> <span class="o">&gt;=</span> <span class="n">initial_RTO_ms_</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">past_time_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">val</span><span class="p">.</span><span class="n">keep_rto</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">initial_RTO_ms_</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">re_try_count_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">transmit</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">msg</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>我承认我写的代码还是很难绷的，等有时间我再优化一下看看。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cmake --build build -j11 --target check3
</span></span><span class="line"><span class="cl"><span class="o">[</span>0/1<span class="o">]</span> <span class="nb">cd</span> /home/zuos/codpjt/cpp/cs144_minnow_lab/build <span class="o">&amp;&amp;</span> /usr/bin/ctest...ure --timeout <span class="m">12</span> -R <span class="s1">&#39;^byte_stream_|^reassembler_|^wrapping|^recv|^send&#39;</span>             ByteStream throughput: 0.65 Gbit/s
</span></span><span class="line"><span class="cl">             Reassembler throughput: 0.33 Gbit/s
</span></span><span class="line"><span class="cl"><span class="o">[</span>1/1<span class="o">]</span> <span class="nb">cd</span> /home/zuos/codpjt/cpp/cs144_minnow_lab/build <span class="o">&amp;&amp;</span> /usr/bin/ctest...ure --timeout <span class="m">12</span> -R <span class="s1">&#39;^byte_stream_|^reassembler_|^wrapping|^recv|^send&#39;</span>
</span></span><span class="line"><span class="cl">Test project /home/zuos/codpjt/cpp/cs144_minnow_lab/build
</span></span><span class="line"><span class="cl">      Start  1: compile with bug-checkers
</span></span><span class="line"><span class="cl"> 1/36 Test  <span class="c1">#1: compile with bug-checkers ........   Passed    2.60 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: byte_stream_basics
</span></span><span class="line"><span class="cl"> 2/36 Test  <span class="c1">#3: byte_stream_basics ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: byte_stream_capacity
</span></span><span class="line"><span class="cl"> 3/36 Test  <span class="c1">#4: byte_stream_capacity .............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: byte_stream_one_write
</span></span><span class="line"><span class="cl"> 4/36 Test  <span class="c1">#5: byte_stream_one_write ............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: byte_stream_two_writes
</span></span><span class="line"><span class="cl"> 5/36 Test  <span class="c1">#6: byte_stream_two_writes ...........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  7: byte_stream_many_writes
</span></span><span class="line"><span class="cl"> 6/36 Test  <span class="c1">#7: byte_stream_many_writes ..........   Passed    0.04 sec</span>
</span></span><span class="line"><span class="cl">      Start  8: byte_stream_stress_test
</span></span><span class="line"><span class="cl"> 7/36 Test  <span class="c1">#8: byte_stream_stress_test ..........   Passed    0.20 sec</span>
</span></span><span class="line"><span class="cl">      Start  9: reassembler_single
</span></span><span class="line"><span class="cl"> 8/36 Test  <span class="c1">#9: reassembler_single ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 10: reassembler_cap
</span></span><span class="line"><span class="cl"> 9/36 Test <span class="c1">#10: reassembler_cap ..................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 11: reassembler_seq
</span></span><span class="line"><span class="cl">10/36 Test <span class="c1">#11: reassembler_seq ..................   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start 12: reassembler_dup
</span></span><span class="line"><span class="cl">11/36 Test <span class="c1">#12: reassembler_dup ..................   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start 13: reassembler_holes
</span></span><span class="line"><span class="cl">12/36 Test <span class="c1">#13: reassembler_holes ................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 14: reassembler_overlapping
</span></span><span class="line"><span class="cl">13/36 Test <span class="c1">#14: reassembler_overlapping ..........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 15: reassembler_win
</span></span><span class="line"><span class="cl">14/36 Test <span class="c1">#15: reassembler_win ..................   Passed    4.22 sec</span>
</span></span><span class="line"><span class="cl">      Start 16: wrapping_integers_cmp
</span></span><span class="line"><span class="cl">15/36 Test <span class="c1">#16: wrapping_integers_cmp ............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 17: wrapping_integers_wrap
</span></span><span class="line"><span class="cl">16/36 Test <span class="c1">#17: wrapping_integers_wrap ...........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 18: wrapping_integers_unwrap
</span></span><span class="line"><span class="cl">17/36 Test <span class="c1">#18: wrapping_integers_unwrap .........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 19: wrapping_integers_roundtrip
</span></span><span class="line"><span class="cl">18/36 Test <span class="c1">#19: wrapping_integers_roundtrip ......   Passed    0.46 sec</span>
</span></span><span class="line"><span class="cl">      Start 20: wrapping_integers_extra
</span></span><span class="line"><span class="cl">19/36 Test <span class="c1">#20: wrapping_integers_extra ..........   Passed    0.07 sec</span>
</span></span><span class="line"><span class="cl">      Start 21: recv_connect
</span></span><span class="line"><span class="cl">20/36 Test <span class="c1">#21: recv_connect .....................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 22: recv_transmit
</span></span><span class="line"><span class="cl">21/36 Test <span class="c1">#22: recv_transmit ....................   Passed    0.19 sec</span>
</span></span><span class="line"><span class="cl">      Start 23: recv_window
</span></span><span class="line"><span class="cl">22/36 Test <span class="c1">#23: recv_window ......................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 24: recv_reorder
</span></span><span class="line"><span class="cl">23/36 Test <span class="c1">#24: recv_reorder .....................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 25: recv_reorder_more
</span></span><span class="line"><span class="cl">24/36 Test <span class="c1">#25: recv_reorder_more ................   Passed    8.67 sec</span>
</span></span><span class="line"><span class="cl">      Start 26: recv_close
</span></span><span class="line"><span class="cl">25/36 Test <span class="c1">#26: recv_close .......................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 27: recv_special
</span></span><span class="line"><span class="cl">26/36 Test <span class="c1">#27: recv_special .....................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 28: send_connect
</span></span><span class="line"><span class="cl">27/36 Test <span class="c1">#28: send_connect .....................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 29: send_transmit
</span></span><span class="line"><span class="cl">28/36 Test <span class="c1">#29: send_transmit ....................   Passed    0.27 sec</span>
</span></span><span class="line"><span class="cl">      Start 30: send_retx
</span></span><span class="line"><span class="cl">29/36 Test <span class="c1">#30: send_retx ........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 31: send_window
</span></span><span class="line"><span class="cl">30/36 Test <span class="c1">#31: send_window ......................   Passed    0.19 sec</span>
</span></span><span class="line"><span class="cl">      Start 32: send_ack
</span></span><span class="line"><span class="cl">31/36 Test <span class="c1">#32: send_ack .........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 33: send_close
</span></span><span class="line"><span class="cl">32/36 Test <span class="c1">#33: send_close .......................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 34: send_extra
</span></span><span class="line"><span class="cl">33/36 Test <span class="c1">#34: send_extra .......................   Passed    0.09 sec</span>
</span></span><span class="line"><span class="cl">      Start 37: compile with optimization
</span></span><span class="line"><span class="cl">34/36 Test <span class="c1">#37: compile with optimization ........   Passed    0.80 sec</span>
</span></span><span class="line"><span class="cl">      Start 38: byte_stream_speed_test
</span></span><span class="line"><span class="cl">35/36 Test <span class="c1">#38: byte_stream_speed_test ...........   Passed    0.17 sec</span>
</span></span><span class="line"><span class="cl">      Start 39: reassembler_speed_test
</span></span><span class="line"><span class="cl">36/36 Test <span class="c1">#39: reassembler_speed_test ...........   Passed    0.45 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">36</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>  18.68 sec</span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>CS144-2024-lab_2: the TCP receiver</title>
    <link>http://localhost:1313/posts/cs144_lab2/</link>
    <pubDate>Mon, 29 Jul 2024 22:02:52 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_lab2/</guid>
    <description><![CDATA[<p>CS144 课程 Lab Assignment 中的 Checkpoint 2: the TCP receive</p>
<h1 id="cs144-2024-lab_2-the-tcp-receiver">CS144-2024-lab_2: the TCP receiver</h1>
<h2 id="translating-between-64-bit-indexes-and-32-bit-seqnos">Translating between 64-bit indexes and 32-bit seqnos</h2>
<blockquote>
<p>As a warmup, we’ll need to implement TCP’s way of representing indexes. Last week you created a Reassembler that reassembles substrings where each individual byte has a 64-bit stream index, with the first byte in the stream always having index zero. A 64-bit index is big enough that we can treat it as never overflowing. In the TCP headers, however, space is precious, and each byte’s index in the stream is represented not with a 64-bit index but with a 32-bit “sequence number,” or “seqno&quot;</p>
<p>作为热身，我们需要实现 TCP 表示索引的方式。上周，您创建了一个 Reassembler，它可以重组子字符串，其中每个字节都有一个 64 位流索引，流中的第一个字节始终具有索引零。64 位索引足够大，我们可以将其视为永不溢出。然而，在 TCP 标头中，空间是宝贵的，流中每个字节的索引不是用 64 位索引表示的，而是用 32 位“序列号”或“seqno”表示的</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">Wrap32</span> <span class="n">Wrap32</span><span class="o">::</span><span class="n">wrap</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">n</span><span class="p">,</span> <span class="n">Wrap32</span> <span class="n">zero_point</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">Wrap32</span> <span class="p">{</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zero_point</span><span class="p">.</span><span class="n">raw_value_</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Wrap32</span><span class="o">::</span><span class="n">unwrap</span><span class="p">(</span> <span class="n">Wrap32</span> <span class="n">zero_point</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">checkpoint</span> <span class="p">)</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">diff</span> <span class="o">=</span>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">raw_value_</span> <span class="o">-</span> <span class="n">zero_point</span><span class="p">.</span><span class="n">raw_value_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">checkpoint</span> <span class="o">&gt;=</span> <span class="n">diff</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">rsm</span> <span class="o">=</span> <span class="n">checkpoint</span> <span class="o">-</span> <span class="n">diff</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">diff</span> <span class="o">+</span> <span class="p">(</span><span class="n">rsm</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">))</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1UL</span>  <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">diff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>从 absolute seqno 转成 seqno 还是很简单的，一行就能处理。但是 seqno 转成 absolute seqno 需要做一些处理，因为 seqno 是 32 bit，所以 seqno 的值可能对应到 absolute seqno，可能大了几个 <code>UINT32_MAX</code>。</p>
<h2 id="implementing-the-tcp-receiver">Implementing the TCP receiver</h2>
<blockquote>
<p>ongratulations on getting the wrapping and unwrapping logic right! We’ll shake your hand (or, post-covid, elbow-bump) if this victory happens at the lab session. In the rest of this lab, you’ll be implementing the TCPReceiver. It will (1) receive messages from its peer’s sender and reassemble the ByteStream using a Reassembler, and (2) send messages back to the peer’s sender that contain the acknowledgment number (ackno) and window size. We’re expecting this to take about 15 lines of code in total.&gt;
恭喜您正确掌握了 wrap 和 unwrap 逻辑！如果在实验环节中取得这一胜利，我们将与您握手（或者，在疫情后，碰肘）。在本实验的其余部分，您将实现 TCPReceiver。它将 (1) 从其对等方的发送方接收消息并使用重组器重组字节流，以及 (2) 将包含确认号 (ackno) 和 window size 的消息发送回对等方的发送方。我们预计这总共需要大约 15 行代码。</p>
</blockquote>
<p>我在 TCPReceiver 类中添加了几个成员变量:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">TCPReceiverMessage</span> <span class="n">curr_tcm_</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint16_t</span><span class="o">&gt;</span><span class="p">(</span> <span class="n">writer</span><span class="p">().</span><span class="n">total_capacity</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">UINT16_MAX</span> <span class="o">?</span> <span class="nl">UINT16_MAX</span> <span class="p">:</span> <span class="n">writer</span><span class="p">().</span><span class="n">total_capacity</span><span class="p">()</span> <span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nb">false</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">Wrap32</span> <span class="n">zero_sno_</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">curr_sno_</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span></span></span></code></pre></div></div>
<p>我懒得修改代码提供的构造函数了，就直接在这里构造好得了，第二个写这么长是为了防止溢出。</p>
<p>之后 <code>TCPReceiver::receive()</code> 和 <code>TCPReceiver::send()</code> 的实现就是这样:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">TCPReceiver</span><span class="o">::</span><span class="n">receive</span><span class="p">(</span> <span class="n">TCPSenderMessage</span> <span class="n">message</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">message</span><span class="p">.</span><span class="n">RST</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">reader</span><span class="p">().</span><span class="n">set_error</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">message</span><span class="p">.</span><span class="n">SYN</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">seqno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">zero_sno_</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">seqno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">has_value</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">auto</span> <span class="n">buf_bytes_prev</span> <span class="o">=</span> <span class="n">writer</span><span class="p">().</span><span class="n">bytes_pushed</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">curr_sno_</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">seqno</span><span class="p">.</span><span class="n">unwrap</span><span class="p">(</span> <span class="n">zero_sno_</span><span class="p">,</span> <span class="n">curr_sno_</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">SYN</span> <span class="o">&amp;&amp;</span> <span class="n">curr_sno_</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">curr_sno_</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">curr_sno_</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">reassembler_</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span> <span class="n">curr_sno_</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">payload</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">FIN</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">auto</span> <span class="n">buf_bytes_next</span> <span class="o">=</span> <span class="n">writer</span><span class="p">().</span><span class="n">bytes_pushed</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">value</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">=</span> <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">+</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span><span class="p">(</span> <span class="n">message</span><span class="p">.</span><span class="n">SYN</span> <span class="p">)</span> <span class="o">+</span> <span class="p">(</span> <span class="n">buf_bytes_next</span> <span class="o">-</span> <span class="n">buf_bytes_prev</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">writer</span><span class="p">().</span><span class="n">is_closed</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">=</span> <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TCPReceiverMessage</span> <span class="n">TCPReceiver</span><span class="o">::</span><span class="n">send</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span> <span class="n">curr_tcm_</span><span class="p">.</span><span class="n">ackno</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint16_t</span><span class="o">&gt;</span><span class="p">(</span> <span class="n">writer</span><span class="p">().</span><span class="n">available_capacity</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">UINT16_MAX</span> <span class="o">?</span> <span class="nl">UINT16_MAX</span>
</span></span><span class="line"><span class="cl">                                                                             <span class="p">:</span> <span class="n">writer</span><span class="p">().</span><span class="n">available_capacity</span><span class="p">()</span> <span class="p">),</span>
</span></span><span class="line"><span class="cl">           <span class="n">reader</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="o">||</span> <span class="n">writer</span><span class="p">().</span><span class="n">has_error</span><span class="p">()</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>我看别人博客上提供的代码没有内部对非 SYN 且 sqno 为 0 且内容不为空做判定的，我这个显得还是太小家子气了，不过有个测试是这个，我这是为了过那个测试用的（</p>
<p>我说的是下面这个 if 判断:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">SYN</span> <span class="o">&amp;&amp;</span> <span class="n">curr_sno_</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>CS144-2024-lab_1: stitching substrings into a byte stream</title>
    <link>http://localhost:1313/posts/cs144_lab1/</link>
    <pubDate>Wed, 24 Jul 2024 00:17:57 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_lab1/</guid>
    <description><![CDATA[<p>CS144 课程 Lab Assignment 中的  Checkpoint 1: stitching substrings into a byte stream</p>
<h1 id="cs144-2024-lab_1-stitching-substrings-into-a-byte-stream">CS144-2024-lab_1: stitching substrings into a byte stream</h1>
<blockquote>
<p>As part of the lab assignment, you will implement a TCP receiver: the module that receives datagrams and turns them into a reliable byte stream to be read from the socket by the application—just as your webget program read the byte stream from the webserver in Checkpoint 0</p>
<p>作为实验任务的一部分，你将实现一个 TCP 接收器：接收数据报并将其转化为可靠字节流的模块，以便应用程序从 socket 中读取&ndash;就像你的 webget 程序在 Checkpoint 0 中从网络服务器读取字节流一样。</p>
</blockquote>
<p>在 <code>Reassembler</code> 类中添加下面这些字段:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">buffer_</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">buf_enable_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">used_index_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">wcount_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">fetch_last_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">max_length_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span></span></span></code></pre></div></div>
<p>对于 <code>insert()</code> 和 <code>bytes_pending()</code> 的实现:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Reassembler</span><span class="o">::</span><span class="n">insert</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">first_index</span><span class="p">,</span> <span class="n">string</span> <span class="n">data</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is_last_substring</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="k">auto</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span> <span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">used_index_</span> <span class="o">+</span> <span class="n">output_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">available_capacity</span><span class="p">()</span> <span class="o">-</span> <span class="n">first_index</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">buffer_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">first_index</span> <span class="o">+</span> <span class="n">limit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">buffer_</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">first_index</span> <span class="o">+</span> <span class="n">limit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf_enable_</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">first_index</span> <span class="o">+</span> <span class="n">limit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">buf_enable_</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">first_index</span> <span class="o">+</span> <span class="n">i</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">buffer_</span><span class="p">[</span><span class="n">first_index</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf_enable_</span><span class="p">[</span><span class="n">first_index</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wcount_</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">is_last_substring</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fetch_last_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">max_length_</span> <span class="o">=</span> <span class="n">first_index</span> <span class="o">+</span> <span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(;</span> <span class="n">used_index_</span> <span class="o">&lt;</span> <span class="n">buf_enable_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">buf_enable_</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">used_index_</span><span class="p">);</span> <span class="o">++</span><span class="n">used_index_</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">push</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="p">{</span> <span class="n">buffer_</span><span class="p">.</span><span class="n">at</span><span class="p">(</span> <span class="n">used_index_</span> <span class="p">)</span> <span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">--</span><span class="n">wcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">fetch_last_</span> <span class="o">&amp;&amp;</span> <span class="n">used_index_</span> <span class="o">==</span> <span class="n">max_length_</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">buffer_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf_enable_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_</span><span class="p">.</span><span class="n">writer</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Reassembler</span><span class="o">::</span><span class="n">bytes_pending</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">wcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><del>不过这样得不到太高的速度，我等下次尝试优化一下吧（逃</del></p>
<p>我就是 C++ 菜狗，优化也优化不了什么，换了个数据结构，一开始用 <code>std::unordered_map&lt;uint64_t, char&gt;</code>，查找很方便，但是插入擦除貌似就不是很行了，我选择用了 <code>std::deque&lt;char&gt;</code> 和 <code>std::deque&lt;bool&gt;</code> 来代替，需要一个 bool 类型的 <code>std::deque&lt;&gt;</code> 是因为我为了让插入字符的位置就是该字符实际的索引位置，直接 <code>resize</code> 放大 buffer 的大小，我想通过 <code>std::deque&lt;bool&gt; buf_enable_</code> 标示一下哪个位是真实有效的，哪个是还没有值的。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cmake --build build -j<span class="sb">`</span>nproc<span class="sb">`</span> --target check1
</span></span><span class="line"><span class="cl">Test project /home/zuos/codPjt/Cpp/minnow/build
</span></span><span class="line"><span class="cl">Connected to MAKE jobserver
</span></span><span class="line"><span class="cl">      Start  1: compile with bug-checkers
</span></span><span class="line"><span class="cl"> 1/17 Test  <span class="c1">#1: compile with bug-checkers ........   Passed    0.17 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: byte_stream_basics
</span></span><span class="line"><span class="cl"> 2/17 Test  <span class="c1">#3: byte_stream_basics ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: byte_stream_capacity
</span></span><span class="line"><span class="cl"> 3/17 Test  <span class="c1">#4: byte_stream_capacity .............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: byte_stream_one_write
</span></span><span class="line"><span class="cl"> 4/17 Test  <span class="c1">#5: byte_stream_one_write ............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: byte_stream_two_writes
</span></span><span class="line"><span class="cl"> 5/17 Test  <span class="c1">#6: byte_stream_two_writes ...........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  7: byte_stream_many_writes
</span></span><span class="line"><span class="cl"> 6/17 Test  <span class="c1">#7: byte_stream_many_writes ..........   Passed    0.04 sec</span>
</span></span><span class="line"><span class="cl">      Start  8: byte_stream_stress_test
</span></span><span class="line"><span class="cl"> 7/17 Test  <span class="c1">#8: byte_stream_stress_test ..........   Passed    0.25 sec</span>
</span></span><span class="line"><span class="cl">      Start  9: reassembler_single
</span></span><span class="line"><span class="cl"> 8/17 Test  <span class="c1">#9: reassembler_single ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 10: reassembler_cap
</span></span><span class="line"><span class="cl"> 9/17 Test <span class="c1">#10: reassembler_cap ..................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 11: reassembler_seq
</span></span><span class="line"><span class="cl">10/17 Test <span class="c1">#11: reassembler_seq ..................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 12: reassembler_dup
</span></span><span class="line"><span class="cl">11/17 Test <span class="c1">#12: reassembler_dup ..................   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start 13: reassembler_holes
</span></span><span class="line"><span class="cl">12/17 Test <span class="c1">#13: reassembler_holes ................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 14: reassembler_overlapping
</span></span><span class="line"><span class="cl">13/17 Test <span class="c1">#14: reassembler_overlapping ..........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 15: reassembler_win
</span></span><span class="line"><span class="cl">14/17 Test <span class="c1">#15: reassembler_win ..................   Passed    5.40 sec</span>
</span></span><span class="line"><span class="cl">      Start 37: compile with optimization
</span></span><span class="line"><span class="cl">15/17 Test <span class="c1">#37: compile with optimization ........   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">      Start 38: byte_stream_speed_test
</span></span><span class="line"><span class="cl">             ByteStream throughput: 0.59 Gbit/s
</span></span><span class="line"><span class="cl">16/17 Test <span class="c1">#38: byte_stream_speed_test ...........   Passed    0.19 sec</span>
</span></span><span class="line"><span class="cl">      Start 39: reassembler_speed_test
</span></span><span class="line"><span class="cl">             Reassembler throughput: 0.30 Gbit/s
</span></span><span class="line"><span class="cl">17/17 Test <span class="c1">#39: reassembler_speed_test ...........   Passed    0.50 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">17</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   6.78 sec
</span></span><span class="line"><span class="cl">Built target check1</span></span></code></pre></div></div>
<p>后来我换成 clang++ 编译，速度还有所提升</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cmake --build build -j<span class="sb">`</span>nproc<span class="sb">`</span> --target check1
</span></span><span class="line"><span class="cl">Test project /home/zuos/codPjt/Cpp/minnow/build
</span></span><span class="line"><span class="cl">Connected to MAKE jobserver
</span></span><span class="line"><span class="cl">      Start  1: compile with bug-checkers
</span></span><span class="line"><span class="cl"> 1/17 Test  <span class="c1">#1: compile with bug-checkers ........   Passed    0.19 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: byte_stream_basics
</span></span><span class="line"><span class="cl"> 2/17 Test  <span class="c1">#3: byte_stream_basics ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: byte_stream_capacity
</span></span><span class="line"><span class="cl"> 3/17 Test  <span class="c1">#4: byte_stream_capacity .............   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: byte_stream_one_write
</span></span><span class="line"><span class="cl"> 4/17 Test  <span class="c1">#5: byte_stream_one_write ............   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: byte_stream_two_writes
</span></span><span class="line"><span class="cl"> 5/17 Test  <span class="c1">#6: byte_stream_two_writes ...........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  7: byte_stream_many_writes
</span></span><span class="line"><span class="cl"> 6/17 Test  <span class="c1">#7: byte_stream_many_writes ..........   Passed    0.04 sec</span>
</span></span><span class="line"><span class="cl">      Start  8: byte_stream_stress_test
</span></span><span class="line"><span class="cl"> 7/17 Test  <span class="c1">#8: byte_stream_stress_test ..........   Passed    0.20 sec</span>
</span></span><span class="line"><span class="cl">      Start  9: reassembler_single
</span></span><span class="line"><span class="cl"> 8/17 Test  <span class="c1">#9: reassembler_single ...............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 10: reassembler_cap
</span></span><span class="line"><span class="cl"> 9/17 Test <span class="c1">#10: reassembler_cap ..................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 11: reassembler_seq
</span></span><span class="line"><span class="cl">10/17 Test <span class="c1">#11: reassembler_seq ..................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 12: reassembler_dup
</span></span><span class="line"><span class="cl">11/17 Test <span class="c1">#12: reassembler_dup ..................   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start 13: reassembler_holes
</span></span><span class="line"><span class="cl">12/17 Test <span class="c1">#13: reassembler_holes ................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 14: reassembler_overlapping
</span></span><span class="line"><span class="cl">13/17 Test <span class="c1">#14: reassembler_overlapping ..........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start 15: reassembler_win
</span></span><span class="line"><span class="cl">14/17 Test <span class="c1">#15: reassembler_win ..................   Passed    4.12 sec</span>
</span></span><span class="line"><span class="cl">      Start 37: compile with optimization
</span></span><span class="line"><span class="cl">15/17 Test <span class="c1">#37: compile with optimization ........   Passed    0.10 sec</span>
</span></span><span class="line"><span class="cl">      Start 38: byte_stream_speed_test
</span></span><span class="line"><span class="cl">             ByteStream throughput: 0.72 Gbit/s
</span></span><span class="line"><span class="cl">16/17 Test <span class="c1">#38: byte_stream_speed_test ...........   Passed    0.16 sec</span>
</span></span><span class="line"><span class="cl">      Start 39: reassembler_speed_test
</span></span><span class="line"><span class="cl">             Reassembler throughput: 0.35 Gbit/s
</span></span><span class="line"><span class="cl">17/17 Test <span class="c1">#39: reassembler_speed_test ...........   Passed    0.43 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">17</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   5.36 sec
</span></span><span class="line"><span class="cl">Built target check1</span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>CS144-2024-lab_0: networking warmup</title>
    <link>http://localhost:1313/posts/cs144_lab0/</link>
    <pubDate>Sun, 21 Jul 2024 01:21:25 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/cs144_lab0/</guid>
    <description><![CDATA[<p>CS144 课程 Lab Assignment 中的  Checkpoint 0: networking warmup</p>
<h1 id="cs144-2024-lab_0-networking-warmup">CS144-2024-lab_0: networking warmup</h1>
<h2 id="环境搭建">环境搭建</h2>
<p>官方给出了四种环境方式，由于我本机就是 Arch Linux。第一个 lab 我是用的自己的本机做的。我安装了一个 Debian 12 的虚拟机，我准备用那个虚拟机做后续需要用到虚拟机的 lab。</p>
<p>也比较简单，装完后执行以下下述命令装一些必要的软件即可:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo apt update <span class="o">&amp;&amp;</span> sudo apt install git cmake gdb build-essential clang clang-tidy clang-format pkg-config glibc-doc tcpdump tshark clangd</span></span></code></pre></div></div>
<p>我这里去掉了 <code>gcc-doc</code>，因为我虚拟机装 Debian 的时候提示没有这个软件包，而且我也没认识到特地本机装 <code>GCC</code> 的文档的意义何在，我还加了 <code>clangd</code>，因为我习惯用 <code>clangd</code> 了。</p>
<h2 id="networking-by-hand">Networking by hand</h2>
<p><code>telnet</code> 过去之后最好把 <code>GET /hello HTTP/1.1</code> 这些直接粘贴过去，自己手敲容易超时导致断开连接。</p>
<p>我只尝试了 <code>telnet cs144.keithw.org http</code></p>
<h2 id="writing-webget">Writing webget</h2>
<blockquote>
<p>In this lab, you will simply use the operating system’s pre-existing support for the Transmission Control Protocol. You’ll write a program called “webget” that creates a TCP stream socket, connects to a Web server, and fetches a page—much as you did earlier in this lab. In future labs, you’ll implement the other side of this abstraction, by implementing the Transmission Control Protocol yourself to create a reliable byte-stream out of not-so-reliable datagrams.</p>
<p>在本实验中，您将仅使用操作系统对传输控制协议的现有支持。您将编写一个名为“webget”的程序，该程序创建 TCP stream socket、连接到 Web 服务器并获取页面 - 就像您前面所做的一样。在未来的实验中，您将实现此抽象的另一面，通过自己实现传输控制协议来从不太可靠的数据报中创建可靠的字节流。</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">get_URL</span><span class="p">(</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">host</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">raw</span> <span class="o">=</span> <span class="s">&#34;GET &#34;</span> <span class="o">+</span> <span class="n">path</span> <span class="o">+</span> <span class="s">&#34; HTTP/1.1</span><span class="se">\r\n</span><span class="s">&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                      <span class="s">&#34;Host: &#34;</span> <span class="o">+</span> <span class="n">host</span> <span class="o">+</span> <span class="s">&#34;</span><span class="se">\r\n</span><span class="s">&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                      <span class="s">&#34;Connection: close</span><span class="se">\r\n\r\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">TCPSocket</span> <span class="n">tcosocket</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="n">tcosocket</span><span class="p">.</span><span class="n">connect</span><span class="p">({</span><span class="n">host</span><span class="p">,</span> <span class="s">&#34;http&#34;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">tcosocket</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span> <span class="o">!=</span> <span class="n">raw</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;write error</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">tcosocket</span><span class="p">.</span><span class="n">eof</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">rs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tcosocket</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">rs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>我这么写总感觉有些问题。</p>
<p>之前 <code>raw</code> 最后两个 <code>\r\n</code>，我只有一个，每次都是 408 超时，后来再这样加一个换行就没事了，难绷。</p>
<h2 id="an-in-memory-reliable-byte-stream">An in-memory reliable byte stream</h2>
<blockquote>
<p>To finish off this week’s lab, you will implement, in memory on a single computer, an object that provides this abstraction. (You may have done something similar in CS 110/111.) Bytes are written on the “input” side and can be read, in the same sequence, from the “output” side. The byte stream is finite: the writer can end the input, and then no more bytes can be written. When the reader has read to the end of the stream, it will reach “EOF” (end of file) and no more bytes can be read.</p>
<p>为了完成本周的实验，您将在一台计算机的内存中实现一个提供此抽象的对象。（您可能在 CS 110/111 中做过类似的事情。）字节在“输入”端写入，并可以按照相同的顺序从“输出”端读取。字节流是有限的：写入器可以结束输入，然后就不能再写入字节了。当读取器读到流的末尾时，它将到达“EOF”（文件末尾），并且不能再读取字节了。</p>
</blockquote>
<p>首先在 <strong>byte_stream.hh</strong> 中多定义几个字段和函数，最后 <code>ByteStream</code> 类是这样:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ByteStream</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">ByteStream</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">capacity</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ByteStream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ByteStream</span><span class="p">(</span><span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ByteStream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ByteStream</span><span class="o">&amp;&amp;</span> <span class="n">val</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">ByteStream</span><span class="p">(</span><span class="n">ByteStream</span><span class="o">&amp;&amp;</span> <span class="n">val</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Helper functions (provided) to access the ByteStream&#39;s Reader and Writer interfaces
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Reader</span><span class="o">&amp;</span> <span class="n">reader</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Reader</span><span class="o">&amp;</span> <span class="n">reader</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Writer</span><span class="o">&amp;</span> <span class="n">writer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Writer</span><span class="o">&amp;</span> <span class="n">writer</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">set_error</span><span class="p">()</span> <span class="p">{</span> <span class="n">error_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="p">};</span>       <span class="c1">// Signal that the stream suffered an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">bool</span> <span class="nf">has_error</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">error_</span><span class="p">;</span> <span class="p">};</span> <span class="c1">// Has the stream had an error?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Please add any additional state to the ByteStream here, and not to the Writer and Reader interfaces.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">uint64_t</span> <span class="n">capacity_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">wcount_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">rcount_</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">buffer_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">closeed_</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">error_</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p>这里特地加了复制移动那些函数，是因为测试用例需要用，要不是编译报错，我也没想到需要写（逃。</p>
<p>在 <strong>byte_stream.cc</strong> 中实现那些函数:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;byte_stream.hh&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string_view&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ByteStream</span><span class="o">::</span><span class="n">ByteStream</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">capacity</span> <span class="p">)</span> <span class="o">:</span> <span class="n">capacity_</span><span class="p">(</span> <span class="n">capacity</span> <span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ByteStream</span><span class="o">::</span><span class="n">ByteStream</span><span class="p">(</span> <span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">val</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">:</span> <span class="n">capacity_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">capacity_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">wcount_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">wcount_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">rcount_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">rcount_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">buffer_</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">buffer_</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">closeed_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">closeed_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">ByteStream</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">capacity_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">capacity_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">buffer_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">buffer_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">wcount_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">wcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">rcount_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">rcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">closeed_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">closeed_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ByteStream</span><span class="o">::</span><span class="n">ByteStream</span><span class="p">(</span><span class="n">ByteStream</span><span class="o">&amp;&amp;</span> <span class="n">val</span> <span class="p">)</span> <span class="k">noexcept</span>
</span></span><span class="line"><span class="cl">  <span class="o">:</span> <span class="n">capacity_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">capacity_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">wcount_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">wcount_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">rcount_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">rcount_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">buffer_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">buffer_</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">,</span> <span class="n">closeed_</span><span class="p">(</span> <span class="n">val</span><span class="p">.</span><span class="n">closeed_</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ByteStream</span><span class="o">&amp;</span> <span class="n">ByteStream</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ByteStream</span><span class="o">&amp;&amp;</span> <span class="n">val</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">capacity_</span> <span class="o">=</span><span class="n">val</span><span class="p">.</span><span class="n">capacity_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">buffer_</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">buffer_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">wcount_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">wcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">rcount_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">rcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="o">-&gt;</span><span class="n">closeed_</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">closeed_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">Writer</span><span class="o">::</span><span class="n">is_closed</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">closeed_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Writer</span><span class="o">::</span><span class="n">push</span><span class="p">(</span> <span class="n">string</span> <span class="n">data</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">is_closed</span><span class="p">()</span> <span class="o">||</span> <span class="n">has_error</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">available_capacity</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">available_capacity</span><span class="p">(),</span> <span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">available_capacity</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">buffer_</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">wcount_</span> <span class="o">+=</span> <span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Writer</span><span class="o">::</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">closeed_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Writer</span><span class="o">::</span><span class="n">available_capacity</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">capacity_</span> <span class="o">-</span> <span class="p">(</span><span class="n">wcount_</span> <span class="o">-</span> <span class="n">rcount_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Writer</span><span class="o">::</span><span class="n">bytes_pushed</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">wcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">Reader</span><span class="o">::</span><span class="n">is_finished</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">closeed_</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">wcount_</span> <span class="o">==</span> <span class="n">rcount_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Reader</span><span class="o">::</span><span class="n">bytes_popped</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">string_view</span> <span class="n">Reader</span><span class="o">::</span><span class="n">peek</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">buffer_</span><span class="p">.</span><span class="n">front</span><span class="p">(),</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Reader</span><span class="o">::</span><span class="n">pop</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">len</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">buffer_</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">buffer_</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">buffer_</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">rcount_</span> <span class="o">+=</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">Reader</span><span class="o">::</span><span class="n">bytes_buffered</span><span class="p">()</span> <span class="k">const</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">wcount_</span> <span class="o">-</span> <span class="n">rcount_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>push</code> 的实现还是有些丑陋了，但我一时间也不知道怎么改了。</p>
<h2 id="测评">测评</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cmake --build build -j<span class="sb">`</span>nproc<span class="sb">`</span> --target check0
</span></span><span class="line"><span class="cl">Test project /home/zuos/codPjt/Cpp/minnow/build
</span></span><span class="line"><span class="cl">Connected to MAKE jobserver
</span></span><span class="line"><span class="cl">      Start  1: compile with bug-checkers
</span></span><span class="line"><span class="cl"> 1/10 Test  <span class="c1">#1: compile with bug-checkers ........   Passed    0.19 sec</span>
</span></span><span class="line"><span class="cl">      Start  2: t_webget
</span></span><span class="line"><span class="cl"> 2/10 Test  <span class="c1">#2: t_webget .........................   Passed    1.07 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: byte_stream_basics
</span></span><span class="line"><span class="cl"> 3/10 Test  <span class="c1">#3: byte_stream_basics ...............   Passed    0.02 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: byte_stream_capacity
</span></span><span class="line"><span class="cl"> 4/10 Test  <span class="c1">#4: byte_stream_capacity .............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: byte_stream_one_write
</span></span><span class="line"><span class="cl"> 5/10 Test  <span class="c1">#5: byte_stream_one_write ............   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: byte_stream_two_writes
</span></span><span class="line"><span class="cl"> 6/10 Test  <span class="c1">#6: byte_stream_two_writes ...........   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">      Start  7: byte_stream_many_writes
</span></span><span class="line"><span class="cl"> 7/10 Test  <span class="c1">#7: byte_stream_many_writes ..........   Passed    0.04 sec</span>
</span></span><span class="line"><span class="cl">      Start  8: byte_stream_stress_test
</span></span><span class="line"><span class="cl"> 8/10 Test  <span class="c1">#8: byte_stream_stress_test ..........   Passed    0.20 sec</span>
</span></span><span class="line"><span class="cl">      Start 37: compile with optimization
</span></span><span class="line"><span class="cl"> 9/10 Test <span class="c1">#37: compile with optimization ........   Passed    0.10 sec</span>
</span></span><span class="line"><span class="cl">      Start 38: byte_stream_speed_test
</span></span><span class="line"><span class="cl">             ByteStream throughput: 0.69 Gbit/s
</span></span><span class="line"><span class="cl">10/10 Test <span class="c1">#38: byte_stream_speed_test ...........   Passed    0.16 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   1.82 sec
</span></span><span class="line"><span class="cl">Built target check0</span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: File system</title>
    <link>http://localhost:1313/posts/mit_61810_lab9/</link>
    <pubDate>Thu, 22 Jun 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab9/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第九个 lab 的 solution</p>
<h1 id="file-system">File system</h1>
<h2 id="large-files-moderate">Large files (moderate)</h2>
<blockquote>
<p>Modify bmap() so that it implements a doubly-indirect block, in addition to direct blocks and a singly-indirect block. You&rsquo;ll have to have only 11 direct blocks, rather than 12, to make room for your new doubly-indirect block; you&rsquo;re not allowed to change the size of an on-disk inode. The first 11 elements of ip-&gt;addrs[] should be direct blocks; the 12th should be a singly-indirect block (just like the current one); the 13th should be your new doubly-indirect block. You are done with this exercise when bigfile writes 65803 blocks and usertests -q runs successfully:</p>
</blockquote>
<p>在<strong>kernel/fs.h</strong>文件中添加以下宏定义，并修改<code>struct dinode</code>结构体：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define NDIRECT 11
</span></span></span><span class="line"><span class="cl"><span class="cp">#define INDIRECT_ONLY (BSIZE / sizeof(uint))
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NIDIRECT_DOUBLE (BSIZE / sizeof(uint)) * (BSIZE / sizeof(uint))
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NINDIRECT (INDIRECT_ONLY + NIDIRECT_DOUBLE)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">uint</span> <span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>   <span class="c1">// Data block addresses
</span></span></span></code></pre></div></div>
<p>将<strong>kernel/file.h</strong>中的<code>struct inode</code>结构体保持和<code>struct dinode</code>同步：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">uint</span> <span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span></span></span></code></pre></div></div>
<p>接下来都是在<strong>kernel/fs.c</strong>文件中修改：</p>
<p>将<code>bn &lt; NINDIRECT</code>改成<code>bn &lt; INDIRECT_ONLY</code></p>
<p>在这个判断下边加上：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="n">bn</span> <span class="o">-=</span> <span class="n">INDIRECT_ONLY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">bn</span> <span class="o">&lt;</span> <span class="n">NIDIRECT_DOUBLE</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">addr</span> <span class="o">=</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">addr</span> <span class="o">=</span> <span class="nf">balloc</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">addr</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bp</span> <span class="o">=</span> <span class="nf">bread</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="o">*</span><span class="p">)</span><span class="n">bp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">addr</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">bn</span> <span class="o">/</span> <span class="n">INDIRECT_ONLY</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">addr</span> <span class="o">=</span> <span class="nf">balloc</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">addr</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="p">[</span><span class="n">bn</span> <span class="o">/</span> <span class="n">INDIRECT_ONLY</span><span class="p">]</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">log_write</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">brelse</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span> <span class="o">=</span> <span class="nf">bread</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="o">*</span><span class="p">)</span><span class="n">bp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">addr</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">bn</span> <span class="o">%</span> <span class="n">INDIRECT_ONLY</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">addr</span> <span class="o">=</span> <span class="nf">balloc</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">addr</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="p">[</span><span class="n">bn</span> <span class="o">%</span> <span class="n">INDIRECT_ONLY</span><span class="p">]</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">log_write</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">brelse</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<p>将<code>itrunc()</code>函数修改成：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">itrunc</span><span class="p">(</span><span class="k">struct</span> <span class="n">inode</span> <span class="o">*</span><span class="n">ip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">bp</span><span class="p">,</span> <span class="o">*</span><span class="n">sbp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NDIRECT</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span> <span class="o">=</span> <span class="nf">bread</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="o">*</span><span class="p">)</span><span class="n">bp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">INDIRECT_ONLY</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">brelse</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">    <span class="n">bp</span> <span class="o">=</span> <span class="nf">bread</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="o">*</span><span class="p">)</span><span class="n">bp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">INDIRECT_ONLY</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sbp</span> <span class="o">=</span> <span class="nf">bread</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="o">*</span><span class="p">)</span><span class="n">sbp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">INDIRECT_ONLY</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">brelse</span><span class="p">(</span><span class="n">sbp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">brelse</span><span class="p">(</span><span class="n">bp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">bfree</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ip</span><span class="o">-&gt;</span><span class="n">addrs</span><span class="p">[</span><span class="n">NDIRECT</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">ip</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">iupdate</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="symbolic-links-moderate">Symbolic links (moderate)</h2>
<blockquote>
<p>You will implement the symlink(char *target, char *path) system call, which creates a new symbolic link at path that refers to file named by target. For further information, see the man page symlink. To test, add symlinktest to the Makefile and run it. Your solution is complete when the tests produce the following output (including usertests succeeding).</p>
</blockquote>
<p>在<strong>kernel/fnctl.h</strong>文件中添加：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define O_NOFOLLOW 0x800</span></span></span></code></pre></div></div>
<p>在<strong>kernel/stat.h</strong>文件中添加：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define T_SYMLINK 4</span></span></span></code></pre></div></div>
<p>在<strong>kernel/sysfile.c</strong>中修改<code>sys_open()</code>函数，在其一开始判断是否要创建文件的那个判断之后加上：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">T_SYMLINK</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">omode</span> <span class="o">&amp;</span> <span class="n">O_NOFOLLOW</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">spath</span><span class="p">[</span><span class="n">MAXPATH</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">T_SYMLINK</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">iunlockput</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">end_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">readi</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">spath</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">spath</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">      <span class="nf">iunlockput</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">ip</span> <span class="o">=</span> <span class="nf">namei</span><span class="p">(</span><span class="n">spath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ip</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nf">end_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">ilock</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<p>并在文件后添加：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">uint64</span>
</span></span><span class="line"><span class="cl"><span class="nf">sys_symlink</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">target</span><span class="p">[</span><span class="n">MAXPATH</span><span class="p">],</span> <span class="n">path</span><span class="p">[</span><span class="n">MAXPATH</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">inode</span> <span class="o">*</span><span class="n">dip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">argstr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">MAXPATH</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">argstr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">MAXPATH</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">begin_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">dip</span> <span class="o">==</span> <span class="nf">namei</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">path</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">end_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">dip</span> <span class="o">=</span> <span class="nf">create</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">T_SYMLINK</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">writei</span><span class="p">(</span><span class="n">dip</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">target</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">target</span><span class="p">))</span> <span class="o">!=</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">target</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">end_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">iunlockput</span><span class="p">(</span><span class="n">dip</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">end_op</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: Locks</title>
    <link>http://localhost:1313/posts/mit_61810_lab8/</link>
    <pubDate>Fri, 05 May 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab8/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第八个 lab 的 solution</p>
<h1 id="locks">Locks</h1>
<p>我这个代码暂时没能通过<code>usertests -q</code>这个测试，在textwrite那里failed了。而且有一点很难绷，我在写Buffer cache这个lab的时候一直会panic，最后我make clean了之后重新来一次就好用了（浪费很多时间去尝试发现错误，可惜没有找到）。</p>
<h2 id="memory-allocator-moderate">Memory allocator (moderate)</h2>
<blockquote>
<p>Your job is to implement per-CPU freelists, and stealing when a CPU&rsquo;s free list is empty. You must give all of your locks names that start with &ldquo;kmem&rdquo;. That is, you should call initlock for each of your locks, and pass a name that starts with &ldquo;kmem&rdquo;. Run kalloctest to see if your implementation has reduced lock contention. To check that it can still allocate all of memory, run usertests sbrkmuch. Your output will look similar to that shown below, with much-reduced contention in total on kmem locks, although the specific numbers will differ. Make sure all tests in usertests -q pass. make grade should say that the kalloctests pass.</p>
</blockquote>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">spinlock</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">kmemlist</span><span class="p">[</span><span class="n">NCPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kinit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">NCPU</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">lock</span><span class="p">,</span> <span class="s">&#34;kmem&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">freerange</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">PHYSTOP</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kfree</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pa</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">push_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">cpuid</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">%</span> <span class="n">PGSIZE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="o">||</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">&gt;=</span> <span class="n">PHYSTOP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;kfree&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Fill with junk to catch dangling refs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">memset</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">run</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">kalloc</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">push_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">cpuid</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">NCPU</span><span class="p">;</span> <span class="n">tmp</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="n">index</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">freelist</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span> <span class="o">=</span> <span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">tmp</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmemlist</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memset</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span> <span class="c1">// fill with junk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="buffer-cache-hard">Buffer cache (hard)</h2>
<blockquote>
<p>Modify the block cache so that the number of acquire loop iterations for all locks in the bcache is close to zero when running bcachetest. Ideally the sum of the counts for all locks involved in the block cache should be zero, but it&rsquo;s OK if the sum is less than 500. Modify bget and brelse so that concurrent lookups and releases for different blocks that are in the bcache are unlikely to conflict on locks (e.g., don&rsquo;t all have to wait for bcache.lock). You must maintain the invariant that at most one copy of each block is cached. When you are done, your output should be similar to that shown below (though not identical). Make sure &lsquo;usertests -q&rsquo; still passes. make grade should pass all tests when you are done.</p>
</blockquote>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define BNUM 13
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HASH(x) (x % BNUM)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">spinlock</span> <span class="n">block_lock</span><span class="p">[</span><span class="n">BNUM</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">buf</span> <span class="n">buf</span><span class="p">[</span><span class="n">NBUF</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">buf</span> <span class="n">head</span><span class="p">[</span><span class="n">BNUM</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">bcache</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">binit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">BNUM</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">initlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">&#34;bcache&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">prev</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Create linked list of buffers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">buf</span><span class="p">;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">bcache</span><span class="p">.</span><span class="n">buf</span><span class="o">+</span><span class="n">NBUF</span><span class="p">;</span> <span class="n">b</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="nf">initsleeplock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">,</span> <span class="s">&#34;buffer&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="k">struct</span> <span class="n">buf</span><span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">bget</span><span class="p">(</span><span class="n">uint</span> <span class="n">dev</span><span class="p">,</span> <span class="n">uint</span> <span class="n">blockno</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">HASH</span><span class="p">(</span><span class="n">blockno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Is the block already cached?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">next</span><span class="p">;</span> <span class="n">b</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">];</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">==</span> <span class="n">dev</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">blockno</span> <span class="o">==</span> <span class="n">blockno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">acquiresleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Not cached.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// Recycle the least recently used (LRU) unused buffer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">BNUM</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">index</span><span class="p">)</span>  <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">prev</span><span class="p">;</span> <span class="n">b</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">=</span> <span class="n">dev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">blockno</span> <span class="o">=</span> <span class="n">blockno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">valid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">bcache</span><span class="p">.</span><span class="n">head</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">acquiresleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;bget: no buffers&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">brelse</span><span class="p">(</span><span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nf">holdingsleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;brelse&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">releasesleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">HASH</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">blockno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">bpin</span><span class="p">(</span><span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">HASH</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">blockno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">bunpin</span><span class="p">(</span><span class="k">struct</span> <span class="n">buf</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nf">HASH</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">blockno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">b</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bcache</span><span class="p">.</span><span class="n">block_lock</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: Networking</title>
    <link>http://localhost:1313/posts/mit_61810_lab7/</link>
    <pubDate>Sat, 22 Apr 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab7/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第七个 lab 的 solution</p>
<h1 id="networking">Networking</h1>
<h2 id="your-job-hard">Your Job (hard)</h2>
<blockquote>
<p>Your job is to complete e1000_transmit() and e1000_recv(), both in kernel/e1000.c, so that the driver can transmit and receive packets. You are done when make grade says your solution passes all the tests.</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">e1000_transmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint32</span> <span class="n">index</span> <span class="o">=</span> <span class="n">regs</span><span class="p">[</span><span class="n">E1000_TDT</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">e1000_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">((</span><span class="n">tx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">status</span> <span class="o">&amp;</span> <span class="n">E1000_TXD_STAT_DD</span><span class="p">)</span> <span class="o">!=</span> <span class="n">E1000_TXD_STAT_DD</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">e1000_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">tx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">])</span> <span class="nf">mbuffree</span><span class="p">(</span><span class="n">tx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">tx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">tx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">length</span> <span class="o">=</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">tx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">E1000_TXD_CMD_EOP</span> <span class="o">|</span> <span class="n">E1000_TXD_CMD_RS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">tx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">regs</span><span class="p">[</span><span class="n">E1000_TDT</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">TX_RING_SIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">e1000_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">e1000_recv</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint32</span> <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">regs</span><span class="p">[</span><span class="n">E1000_RDT</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">RX_RING_SIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">rx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">status</span> <span class="o">&amp;</span> <span class="n">E1000_RXD_STAT_DD</span><span class="p">)</span> <span class="o">!=</span> <span class="n">E1000_RXD_STAT_DD</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">rx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="n">rx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">net_rx</span><span class="p">(</span><span class="n">rx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">rx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mbufalloc</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">rx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">rx_mbufs</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rx_ring</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">regs</span><span class="p">[</span><span class="n">E1000_RDT</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: Multithreading</title>
    <link>http://localhost:1313/posts/mit_61810_lab6/</link>
    <pubDate>Tue, 18 Apr 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab6/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第六个 lab 的 solution</p>
<h1 id="multithreading">Multithreading</h1>
<h2 id="uthread-switching-between-threads-moderate">Uthread: switching between threads (moderate)</h2>
<blockquote>
<p>Your job is to come up with a plan to create threads and save/restore registers to switch between threads, and implement that plan. When you&rsquo;re done, <code>make grade</code> should say that your solution passes the uthread test.</p>
</blockquote>
<p>这个就是抄就行了。</p>
<p><code>struct thread</code>结构体加一个新元素：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">context</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">ra</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">sp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// callee-saved
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">uint64</span> <span class="n">s0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">s11</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span>       <span class="n">stack</span><span class="p">[</span><span class="n">STACK_SIZE</span><span class="p">];</span> <span class="cm">/* the thread&#39;s stack */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span>        <span class="n">state</span><span class="p">;</span>             <span class="cm">/* FREE, RUNNING, RUNNABLE */</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">context</span> <span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<p><code>thread_schedule()</code>函数让加的那个部分只需要加个对注释里说的那个函数的引用：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">thread_switch</span><span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="o">&amp;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="o">&amp;</span><span class="n">next_thread</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">);</span></span></span></code></pre></div></div>
<p><code>thread_create()</code>函数在初始化线程的时候需要初始化新加的<code>context</code>这个变量</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">t</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">RUNNABLE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">.</span><span class="n">ra</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">.</span><span class="n">sp</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">stack</span> <span class="o">+</span> <span class="n">STACK_SIZE</span><span class="p">;</span></span></span></code></pre></div></div>
<p>至于<strong>uthread_switch.S</strong>也只需要抄之前在调度那里见过的代码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-asm">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">thread_switch:</span>
</span></span><span class="line"><span class="cl">	<span class="nf">sd</span> <span class="no">ra</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">sp</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s0</span><span class="p">,</span> <span class="mi">16</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s1</span><span class="p">,</span> <span class="mi">24</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s2</span><span class="p">,</span> <span class="mi">32</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s3</span><span class="p">,</span> <span class="mi">40</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s4</span><span class="p">,</span> <span class="mi">48</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s5</span><span class="p">,</span> <span class="mi">56</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s6</span><span class="p">,</span> <span class="mi">64</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s7</span><span class="p">,</span> <span class="mi">72</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s8</span><span class="p">,</span> <span class="mi">80</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s9</span><span class="p">,</span> <span class="mi">88</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s10</span><span class="p">,</span> <span class="mi">96</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">sd</span> <span class="no">s11</span><span class="p">,</span> <span class="mi">104</span><span class="p">(</span><span class="no">a0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">ra</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">sp</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s0</span><span class="p">,</span> <span class="mi">16</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s1</span><span class="p">,</span> <span class="mi">24</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s2</span><span class="p">,</span> <span class="mi">32</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s3</span><span class="p">,</span> <span class="mi">40</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s4</span><span class="p">,</span> <span class="mi">48</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s5</span><span class="p">,</span> <span class="mi">56</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s6</span><span class="p">,</span> <span class="mi">64</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s7</span><span class="p">,</span> <span class="mi">72</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s8</span><span class="p">,</span> <span class="mi">80</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s9</span><span class="p">,</span> <span class="mi">88</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s10</span><span class="p">,</span> <span class="mi">96</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ld</span> <span class="no">s11</span><span class="p">,</span> <span class="mi">104</span><span class="p">(</span><span class="no">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="nf">ret</span></span></span></code></pre></div></div>
<h2 id="using-threads-moderate">Using threads (moderate)</h2>
<blockquote>
<p>In this assignment you will explore parallel programming with threads and locks using a hash table. You should do this assignment on a real Linux or MacOS computer (not xv6, not qemu) that has multiple cores. Most recent laptops have multicore processors.</p>
</blockquote>
<p>全局定义一个lock</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在<code>main()</code>首先初始化这个lock</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nf">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span></span></span></code></pre></div></div>
<p>然后在put的时候加锁就行了</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="n">NBUCKET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// is the key already present?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">entry</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// update the existing key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">e</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// the new is new.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="barriermoderate">Barrier(moderate)</h2>
<blockquote>
<p>In this assignment you&rsquo;ll implement a barrier: a point in an application at which all participating threads must wait until all other participating threads reach that point too. You&rsquo;ll use pthread condition variables, which are a sequence coordination technique similar to xv6&rsquo;s sleep and wakeup.</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> 
</span></span><span class="line"><span class="cl"><span class="nf">barrier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">bstate</span><span class="p">.</span><span class="n">round</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bstate</span><span class="p">.</span><span class="n">barrier_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="n">bstate</span><span class="p">.</span><span class="n">nthread</span> <span class="o">!=</span> <span class="n">nthread</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bstate</span><span class="p">.</span><span class="n">barrier_cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bstate</span><span class="p">.</span><span class="n">barrier_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_cond_broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bstate</span><span class="p">.</span><span class="n">barrier_cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">bstate</span><span class="p">.</span><span class="n">round</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">bstate</span><span class="p">.</span><span class="n">round</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bstate</span><span class="p">.</span><span class="n">nthread</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bstate</span><span class="p">.</span><span class="n">barrier_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: Copy-on-Write Fork for xv6</title>
    <link>http://localhost:1313/posts/mit_61810_lab5/</link>
    <pubDate>Sat, 15 Apr 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab5/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第五个 lab 的 solution</p>
<h1 id="copy-on-write-fork-for-xv6">Copy-on-Write Fork for xv6</h1>
<h2 id="implement-copy-on-write-forkhard">Implement copy-on-write fork(hard)</h2>
<blockquote>
<p>Your task is to implement copy-on-write fork in the xv6 kernel. You are done if your modified kernel executes both the cowtest and &lsquo;usertests -q&rsquo; programs successfully.</p>
</blockquote>
<p>将<strong>kernel/vm.c</strong>的<code>uvmcopy()</code>修改成下边这样：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">void</span> <span class="nf">refinc</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pa</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">uvmcopy</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">old</span><span class="p">,</span> <span class="kt">pagetable_t</span> <span class="n">new</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">sz</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">pa</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sz</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">PGSIZE</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">pte</span> <span class="o">=</span> <span class="nf">walk</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;uvmcopy: pte should exist&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;uvmcopy: page not present&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pa</span> <span class="o">=</span> <span class="nf">PTE2PA</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pte</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PTE_W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pte</span> <span class="o">|=</span> <span class="n">PTE_RSW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">flags</span> <span class="o">=</span> <span class="nf">PTE_FLAGS</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nf">mappages</span><span class="p">(</span><span class="n">new</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="n">pa</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">refinc</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">pa</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nl">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="nf">uvmunmap</span><span class="p">(</span><span class="n">new</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">/</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>这里的refinc是之后加在别的源文件里的函数</p>
<p>把同文件的<code>copyout()</code>修改成：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">copyout</span><span class="p">(</span><span class="kt">pagetable_t</span> <span class="n">pagetable</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">dstva</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">uint64</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">n</span><span class="p">,</span> <span class="n">va0</span><span class="p">,</span> <span class="n">pa0</span><span class="p">,</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">va0</span> <span class="o">=</span> <span class="nf">PGROUNDDOWN</span><span class="p">(</span><span class="n">dstva</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">va0</span> <span class="o">&gt;=</span> <span class="n">MAXVA</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pte</span> <span class="o">=</span> <span class="nf">walk</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">pte</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">((</span><span class="o">*</span><span class="n">pte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">((</span><span class="o">*</span><span class="n">pte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">PTE_U</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">flags</span> <span class="o">=</span> <span class="nf">PTE_FLAGS</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pa0</span> <span class="o">=</span> <span class="nf">PTE2PA</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">PTE_RSW</span><span class="p">)</span> <span class="o">==</span> <span class="n">PTE_RSW</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">*</span> <span class="n">mem</span> <span class="o">=</span> <span class="nf">kalloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="nf">memmove</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pa0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">flags</span> <span class="o">|=</span> <span class="n">PTE_W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PTE_RSW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">pte</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PTE_V</span><span class="p">;</span> <span class="c1">// avoid remap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nf">mappages</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va0</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">mem</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">kfree</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nf">kfree</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="n">pa0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pa0</span> <span class="o">=</span> <span class="nf">walkaddr</span><span class="p">(</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">pa0</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">PGSIZE</span> <span class="o">-</span> <span class="p">(</span><span class="n">dstva</span> <span class="o">-</span> <span class="n">va0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memmove</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">pa0</span> <span class="o">+</span> <span class="p">(</span><span class="n">dstva</span> <span class="o">-</span> <span class="n">va0</span><span class="p">)),</span> <span class="n">src</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">len</span> <span class="o">-=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">src</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">dstva</span> <span class="o">=</span> <span class="n">va0</span> <span class="o">+</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><strong>kernel/riscv.h</strong>中对PTE权限设置那里加一个对RSW的定义</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define PTE_RSW (1L &lt;&lt; 8)</span></span></span></code></pre></div></div>
<p>将<strong>kernel/trap.c</strong>添加一个page fault的识别逻辑</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nf">r_scause</span><span class="p">()</span> <span class="o">==</span> <span class="mi">15</span> <span class="o">||</span> <span class="nf">r_scause</span><span class="p">()</span> <span class="o">==</span> <span class="mi">13</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// store page fault or load page fault
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint64</span> <span class="n">pa</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">mem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint64</span> <span class="n">va</span> <span class="o">=</span> <span class="nf">PGROUNDDOWN</span><span class="p">(</span><span class="nf">r_stval</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">va</span> <span class="o">&gt;=</span> <span class="n">MAXVA</span> <span class="o">||</span> <span class="n">va</span> <span class="o">&lt;</span> <span class="n">PGSIZE</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">setkilled</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">kill</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pte</span> <span class="o">=</span> <span class="nf">walk</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">pte</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">((</span><span class="o">*</span><span class="n">pte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">PTE_V</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">((</span><span class="o">*</span><span class="n">pte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">PTE_U</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">setkilled</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">kill</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pa</span> <span class="o">=</span> <span class="nf">PTE2PA</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_RSW</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">unknown_trap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pte</span> <span class="o">|=</span> <span class="n">PTE_W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pte</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PTE_RSW</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">flags</span> <span class="o">=</span> <span class="nf">PTE_FLAGS</span><span class="p">(</span><span class="o">*</span><span class="n">pte</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">((</span><span class="n">mem</span> <span class="o">=</span> <span class="nf">kalloc</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">setkilled</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">kill</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memmove</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">uvmunmap</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nf">mappages</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pagetable</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">,</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">mem</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="nf">kfree</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">setkilled</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">kill</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">kfree</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nl">unknown_trap</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;usertrap(): unexpected scause %p pid=%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">r_scause</span><span class="p">(),</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;            sepc=%p stval=%p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="nf">r_sepc</span><span class="p">(),</span> <span class="nf">r_stval</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">      <span class="nf">setkilled</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nl">kill</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">killed</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span></span></span></code></pre></div></div>
<p>修改<strong>kernel/kalloc.c</strong>：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">spinlock</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">refcount</span><span class="p">[(</span><span class="n">PHYSTOP</span> <span class="o">-</span> <span class="n">KERNBASE</span><span class="p">)</span> <span class="o">/</span> <span class="n">PGSIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">pginfo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">refinc</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pa</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">-</span> <span class="n">KERNBASE</span><span class="p">)</span> <span class="o">/</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pginfo</span><span class="p">.</span><span class="n">refcount</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">kfree</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pa</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">%</span> <span class="n">PGSIZE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="o">||</span> <span class="p">(</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">&gt;=</span> <span class="n">PHYSTOP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">panic</span><span class="p">(</span><span class="s">&#34;kfree&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">pa</span> <span class="o">-</span> <span class="n">KERNBASE</span><span class="p">)</span> <span class="o">/</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">pginfo</span><span class="p">.</span><span class="n">refcount</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pginfo</span><span class="p">.</span><span class="n">refcount</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pginfo</span><span class="p">.</span><span class="n">refcount</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Fill with junk to catch dangling refs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">memset</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">run</span><span class="o">*</span><span class="p">)</span><span class="n">pa</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="nf">kalloc</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">run</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kmem</span><span class="p">.</span><span class="n">freelist</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmem</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="p">((</span><span class="n">uint64</span><span class="p">)</span><span class="n">r</span> <span class="o">-</span> <span class="n">KERNBASE</span><span class="p">)</span> <span class="o">/</span> <span class="n">PGSIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pginfo</span><span class="p">.</span><span class="n">refcount</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pginfo</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">memset</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span> <span class="c1">// fill with junk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>MIT 6.1810: Traps</title>
    <link>http://localhost:1313/posts/mit_61810_lab4/</link>
    <pubDate>Thu, 06 Apr 2023 03:42:51 &#43;0000</pubDate>
    <author>s5n666@outlook.com (suo yuan)</author>
    <guid>http://localhost:1313/posts/mit_61810_lab4/</guid>
    <description><![CDATA[<p>MIT 6.1810 中第四个 lab 的 solution</p>
<h1 id="traps">Traps</h1>
<p>第一个其实是关于RISC-V汇编的一个问答，不是这个Backtrace，但我简单看了一眼懒得做了（</p>
<h2 id="backtrace-moderate">Backtrace (moderate)</h2>
<blockquote>
<p>For debugging it is often useful to have a backtrace: a list of the function calls on the stack above the point at which the error occurred. To help with backtraces, the compiler generates machine code that maintains a stack frame on the stack corresponding to each function in the current call chain. Each stack frame consists of the return address and a &ldquo;frame pointer&rdquo; to the caller&rsquo;s stack frame. Register s0 contains a pointer to the current stack frame (it actually points to the the address of the saved return address on the stack plus 8). Your backtrace should use the frame pointers to walk up the stack and print the saved return address in each stack frame.</p>
</blockquote>
<p>在kernel/printf.c中添加下面这个函数:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">backtrace</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;backtrace:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">uint64</span> <span class="n">fp</span> <span class="o">=</span> <span class="nf">r_fp</span><span class="p">();</span> <span class="n">fp</span> <span class="o">&gt;</span> <span class="nf">PGROUNDDOWN</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="p">;</span> <span class="n">fp</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">uint64</span><span class="o">*</span><span class="p">)(</span><span class="n">fp</span> <span class="o">-</span> <span class="mi">16</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">uint64</span><span class="o">*</span><span class="p">)(</span><span class="n">fp</span> <span class="o">-</span> <span class="mi">8</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="alarm-hard">Alarm (hard)</h2>
<blockquote>
<p>In this exercise you&rsquo;ll add a feature to xv6 that periodically alerts a process as it uses CPU time. This might be useful for compute-bound processes that want to limit how much CPU time they chew up, or for processes that want to compute but also want to take some periodic action. More generally, you&rsquo;ll be implementing a primitive form of user-level interrupt/fault handlers; you could use something similar to handle page faults in the application, for example. Your solution is correct if it passes alarmtest and &lsquo;usertests -q&rsquo;</p>
</blockquote>
<p>添加系统调用的部分就不写了。</p>
<p>在<strong>kernel/sysproc.c</strong>文件中添加以下函数:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">sys_sigalarm</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">ticks</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">handler_va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">argint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ticks</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">argaddr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">handler_va</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span><span class="o">*</span> <span class="n">proc</span> <span class="o">=</span> <span class="nf">myproc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">proc</span><span class="o">-&gt;</span><span class="n">alarm_interval</span> <span class="o">=</span> <span class="n">ticks</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">proc</span><span class="o">-&gt;</span><span class="n">handler_va</span> <span class="o">=</span> <span class="n">handler_va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">proc</span><span class="o">-&gt;</span><span class="n">has_called</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">sys_sigreturn</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">proc</span><span class="o">*</span> <span class="n">proc</span> <span class="o">=</span> <span class="nf">myproc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">proc</span><span class="o">-&gt;</span><span class="n">trapframe</span> <span class="o">=</span> <span class="n">proc</span><span class="o">-&gt;</span><span class="n">saved_trapframe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">proc</span><span class="o">-&gt;</span><span class="n">has_called</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">proc</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="o">-&gt;</span><span class="n">a0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>在<strong>kernel/proc.h</strong>的proc结构体中添加以下内容:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="n">uint64</span> <span class="n">handler_va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">alarm_interval</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">current_ticks</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">trapframe</span> <span class="n">saved_trapframe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">has_called</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在<strong>kernel/proc.c</strong>中的<code>allocproc()</code>函数对新加入的变量进行初始化:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">has_called</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">current_ticks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">alarm_interval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span><span class="o">-&gt;</span><span class="n">handler_va</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在<strong>kernel/trap.c</strong>中修改<code>usertrap()</code>函数，下面是修改后的样子:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="c1">// give up the CPU if this is a timer interrupt.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="n">which_dev</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">alarm_interval</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">has_called</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">current_ticks</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">alarm_interval</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">saved_trapframe</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">trapframe</span><span class="o">-&gt;</span><span class="n">epc</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">handler_va</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">current_ticks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">has_called</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<p>不过这样是无法通过<code>usertests -q</code>的测试的，不过能通过alarmtest这个测试，我本机测试是这样的。</p>
<p>后来发现了，需要把<code>usertrap()</code>的判断条件写全才行。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">alarm_interval</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">has_called</span><span class="p">)</span> <span class="p">{</span></span></span></code></pre></div></div>
<p>改成</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">alarm_interval</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">has_called</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">handler_va</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span></span></span></code></pre></div></div>]]></description>
</item>
</channel>
</rss>
